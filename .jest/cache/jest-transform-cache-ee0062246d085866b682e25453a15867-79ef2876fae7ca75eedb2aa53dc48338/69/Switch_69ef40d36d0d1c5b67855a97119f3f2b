e9a1a88043089c1cd317828f58c4d0a9
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["value", "disabled", "onValueChange", "color", "theme"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _utils = require("./utils");
var _theming = require("../../core/theming");
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var version = _reactNative.NativeModules.PlatformConstants ? _reactNative.NativeModules.PlatformConstants.reactNativeVersion : undefined;
var Switch = function Switch(_ref) {
  var value = _ref.value,
    disabled = _ref.disabled,
    onValueChange = _ref.onValueChange,
    color = _ref.color,
    themeOverrides = _ref.theme,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var _ref2 = (0, _utils.getSwitchColor)({
      theme: theme,
      disabled: disabled,
      value: value,
      color: color
    }),
    checkedColor = _ref2.checkedColor,
    onTintColor = _ref2.onTintColor,
    thumbTintColor = _ref2.thumbTintColor;
  var props = version && version.major === 0 && version.minor <= 56 ? {
    onTintColor: onTintColor,
    thumbTintColor: thumbTintColor
  } : _reactNative.Platform.OS === 'web' ? {
    activeTrackColor: onTintColor,
    thumbColor: thumbTintColor,
    activeThumbColor: checkedColor
  } : {
    thumbColor: thumbTintColor,
    trackColor: {
      true: onTintColor,
      false: onTintColor
    }
  };
  return React.createElement(_reactNative.Switch, _extends({
    value: value,
    disabled: disabled,
    onValueChange: disabled ? undefined : onValueChange
  }, props, rest));
};
var _default = Switch;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl91dGlscyIsIl90aGVtaW5nIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIl9leHRlbmRzIiwiYXNzaWduIiwiYmluZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJhcHBseSIsInZlcnNpb24iLCJOYXRpdmVNb2R1bGVzIiwiUGxhdGZvcm1Db25zdGFudHMiLCJyZWFjdE5hdGl2ZVZlcnNpb24iLCJ1bmRlZmluZWQiLCJTd2l0Y2giLCJfcmVmIiwidmFsdWUiLCJkaXNhYmxlZCIsIm9uVmFsdWVDaGFuZ2UiLCJjb2xvciIsInRoZW1lT3ZlcnJpZGVzIiwidGhlbWUiLCJyZXN0IiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiIsIl9leGNsdWRlZCIsInVzZUludGVybmFsVGhlbWUiLCJfcmVmMiIsImdldFN3aXRjaENvbG9yIiwiY2hlY2tlZENvbG9yIiwib25UaW50Q29sb3IiLCJ0aHVtYlRpbnRDb2xvciIsInByb3BzIiwibWFqb3IiLCJtaW5vciIsIlBsYXRmb3JtIiwiT1MiLCJhY3RpdmVUcmFja0NvbG9yIiwidGh1bWJDb2xvciIsImFjdGl2ZVRodW1iQ29sb3IiLCJ0cmFja0NvbG9yIiwidHJ1ZSIsImZhbHNlIiwiY3JlYXRlRWxlbWVudCIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1N3aXRjaC9Td2l0Y2gudHN4Il0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxJQUFBQSxLQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFRQSxJQUFBRSxNQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxRQUFBLEdBQUFILE9BQUE7QUFBc0QsU0FBQUkseUJBQUFDLFdBQUE7RUFBQSxXQUFBQyxPQUFBO0VBQUEsSUFBQUMsaUJBQUEsT0FBQUQsT0FBQTtFQUFBLElBQUFFLGdCQUFBLE9BQUFGLE9BQUE7RUFBQSxRQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsV0FBQTtJQUFBLE9BQUFBLFdBQUEsR0FBQUcsZ0JBQUEsR0FBQUQsaUJBQUE7RUFBQSxHQUFBRixXQUFBO0FBQUE7QUFBQSxTQUFBTix3QkFBQVUsR0FBQSxFQUFBSixXQUFBO0VBQUEsS0FBQUEsV0FBQSxJQUFBSSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQTtJQUFBLE9BQUFELEdBQUE7RUFBQTtFQUFBLElBQUFBLEdBQUEsb0JBQUFBLEdBQUEsd0JBQUFBLEdBQUE7SUFBQTtNQUFBRSxPQUFBLEVBQUFGO0lBQUE7RUFBQTtFQUFBLElBQUFHLEtBQUEsR0FBQVIsd0JBQUEsQ0FBQUMsV0FBQTtFQUFBLElBQUFPLEtBQUEsSUFBQUEsS0FBQSxDQUFBQyxHQUFBLENBQUFKLEdBQUE7SUFBQSxPQUFBRyxLQUFBLENBQUFFLEdBQUEsQ0FBQUwsR0FBQTtFQUFBO0VBQUEsSUFBQU0sTUFBQTtFQUFBLElBQUFDLHFCQUFBLEdBQUFDLE1BQUEsQ0FBQUMsY0FBQSxJQUFBRCxNQUFBLENBQUFFLHdCQUFBO0VBQUEsU0FBQUMsR0FBQSxJQUFBWCxHQUFBO0lBQUEsSUFBQVcsR0FBQSxrQkFBQUgsTUFBQSxDQUFBSSxTQUFBLENBQUFDLGNBQUEsQ0FBQUMs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