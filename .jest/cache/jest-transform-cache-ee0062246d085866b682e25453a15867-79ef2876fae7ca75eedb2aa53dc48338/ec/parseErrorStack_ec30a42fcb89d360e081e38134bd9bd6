c966123cd61d3d3b33901da1545b09da
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var parseHermesStack = require('./parseHermesStack');
function convertHermesStack(stack) {
  var frames = [];
  for (var entry of stack.entries) {
    if (entry.type !== 'FRAME') {
      continue;
    }
    var location = entry.location,
      functionName = entry.functionName;
    if (location.type === 'NATIVE' || location.type === 'INTERNAL_BYTECODE') {
      continue;
    }
    frames.push({
      methodName: functionName,
      file: location.sourceUrl,
      lineNumber: location.line1Based,
      column: location.type === 'SOURCE' ? location.column1Based - 1 : location.virtualOffset0Based
    });
  }
  return frames;
}
function parseErrorStack(errorStack) {
  if (errorStack == null) {
    return [];
  }
  var stacktraceParser = require('stacktrace-parser');
  var parsedStack = Array.isArray(errorStack) ? errorStack : global.HermesInternal ? convertHermesStack(parseHermesStack(errorStack)) : stacktraceParser.parse(errorStack).map(function (frame) {
    return _objectSpread(_objectSpread({}, frame), {}, {
      column: frame.column != null ? frame.column - 1 : null
    });
  });
  return parsedStack;
}
module.exports = parseErrorStack;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJvd25LZXlzIiwiZSIsInIiLCJ0IiwiT2JqZWN0Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm8iLCJmaWx0ZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImZvckVhY2giLCJkZWZhdWx0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsInBhcnNlSGVybWVzU3RhY2siLCJjb252ZXJ0SGVybWVzU3RhY2siLCJzdGFjayIsImZyYW1lcyIsImVudHJ5IiwiZW50cmllcyIsInR5cGUiLCJsb2NhdGlvbiIsImZ1bmN0aW9uTmFtZSIsIm1ldGhvZE5hbWUiLCJmaWxlIiwic291cmNlVXJsIiwibGluZU51bWJlciIsImxpbmUxQmFzZWQiLCJjb2x1bW4iLCJjb2x1bW4xQmFzZWQiLCJ2aXJ0dWFsT2Zmc2V0MEJhc2VkIiwicGFyc2VFcnJvclN0YWNrIiwiZXJyb3JTdGFjayIsInN0YWNrdHJhY2VQYXJzZXIiLCJwYXJzZWRTdGFjayIsIkFycmF5IiwiaXNBcnJheSIsImdsb2JhbCIsIkhlcm1lc0ludGVybmFsIiwicGFyc2UiLCJtYXAiLCJmcmFtZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJwYXJzZUVycm9yU3RhY2suanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHR5cGUge1N0YWNrRnJhbWV9IGZyb20gJy4uL05hdGl2ZUV4Y2VwdGlvbnNNYW5hZ2VyJztcbmltcG9ydCB0eXBlIHtIZXJtZXNQYXJzZWRTdGFja30gZnJvbSAnLi9wYXJzZUhlcm1lc1N0YWNrJztcblxuY29uc3QgcGFyc2VIZXJtZXNTdGFjayA9IHJlcXVpcmUoJy4vcGFyc2VIZXJtZXNTdGFjaycpO1xuXG5mdW5jdGlvbiBjb252ZXJ0SGVybWVzU3RhY2soc3RhY2s6IEhlcm1lc1BhcnNlZFN0YWNrKTogQXJyYXk8U3RhY2tGcmFtZT4ge1xuICBjb25zdCBmcmFtZXM6IEFycmF5PFN0YWNrRnJhbWU+ID0gW107XG4gIGZvciAoY29uc3QgZW50cnkgb2Ygc3RhY2suZW50cmllcykge1xuICAgIGlmIChlbnRyeS50eXBlICE9PSAnRlJBTUUnKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3Qge2xvY2F0aW9uLCBmdW5jdGlvbk5hbWV9ID0gZW50cnk7XG4gICAgaWYgKGxvY2F0aW9uLnR5cGUgPT09ICdOQVRJVkUnIHx8IGxvY2F0aW9uLnR5cGUgPT09ICdJTlRFUk5BTF9CWVRFQ09ERScpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBmcmFtZXMucHVzaCh7XG4gICAgICBtZXRob2ROYW1lOiBmdW5jdGlvbk5hbWUsXG4gICAgICBmaWxlOiBsb2NhdGlvbi5zb3VyY2VVcmwsXG4gICAgICBsaW5lTnVtYmVyOiBsb2NhdGlvbi5saW5lMUJhc2VkLFxuICAgICAgY29sdW1uOlxuICAgICAgICBsb2NhdGlvbi50eXBlID09PSAnU09VUkNFJ1xuICAgICAgICAgID8gbG9jYXRpb24uY29sdW1uMUJhc2VkIC0gMVxuICAgICAgICAgIDogbG9jYXRpb24udmlydHVhbE9mZnNldDBCYXNlZCxcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gZnJhbWVzO1xufVxuXG5mdW5jdGlvbiBwYXJzZUVycm9yU3RhY2soZXJyb3JTdGFjaz86IHN0cmluZyk6IEFycmF5PFN0YWNrRnJhbWU+IHtcbiAgaWYgKGVycm9yU3RhY2sgPT0gbnVsbCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGNvbnN0IHN0YWNrdHJhY2VQYXJzZXIgPSByZXF1aXJlKCdzdGFja3RyYWNlLXBhcnNlcicpO1xuICBjb25zdCBwYXJzZWRTdGFjayA9IEFycmF5LmlzQXJyYXkoZXJyb3JTdGFjaylcbiAgICA/IGVycm9yU3RhY2tcbiAgICA6IGdsb2JhbC5IZXJtZXNJbnRlcm5hbFxuICAgID8gY29udmVydEhlcm1lc1N0YWNrKHBhcnNlSGVybWVzU3RhY2soZXJyb3JTdGFjaykpXG4gICAgOiBzdGFja3RyYWNlUGFyc2VyLnBhcnNlKGVycm9yU3RhY2spLm1hcCgoZnJhbWUpOiBTdGFja0ZyYW1lID0+ICh7XG4gICAgICAgIC4uLmZyYW1lLFxuICAgICAgICBjb2x1bW46IGZyYW1lLmNvbHVtbiAhPSBudWxsID8gZnJhbWUuY29sdW1uIC0gMSA6IG51bGwsXG4gICAgICB9KSk7XG5cbiAgcmV0dXJuIHBhcnNlZFN0YWNrO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlRXJyb3JTdGFjaztcbiJdLCJtYXBwaW5ncyI6IkFBVUEsWUFBWTs7QUFBQyxJQUFBQSxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsZ0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLFNBQUFFLFFBQUFDLENBQUEsRUFBQUMsQ0FBQSxRQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsSUFBQSxDQUFBSixDQUFBLE9BQUFHLE1BQUEsQ0FBQUUscUJBQUEsUUFBQUMsQ0FBQSxHQUFBSCxNQUFBLENBQUFFLHFCQUFBLENBQUFMLENBQUEsR0FBQUMsQ0FBQSxLQUFBSyxDQUFBLEdBQUFBLENBQUEsQ0FBQUMsTUFBQSxXQUFBTixDQUFBLFdBQUFFLE1BQUEs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