6ecf0c6c96d23b6bcea113918cd355bd
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["mode", "dense", "disabled", "error", "multiline", "editable", "contentStyle", "render", "theme"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _TextInputAffix = _interopRequireDefault(require("./Adornment/TextInputAffix"));
var _TextInputIcon = _interopRequireDefault(require("./Adornment/TextInputIcon"));
var _TextInputFlat = _interopRequireDefault(require("./TextInputFlat"));
var _TextInputOutlined = _interopRequireDefault(require("./TextInputOutlined"));
var _theming = require("../../core/theming");
var _forwardRef = require("../../utils/forwardRef");
var _roundLayoutSize = require("../../utils/roundLayoutSize");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var BLUR_ANIMATION_DURATION = 180;
var FOCUS_ANIMATION_DURATION = 150;
var DefaultRenderer = function DefaultRenderer(props) {
  return React.createElement(_reactNative.TextInput, props);
};
var TextInput = (0, _forwardRef.forwardRef)(function (_ref, ref) {
  var _ref$mode = _ref.mode,
    mode = _ref$mode === void 0 ? 'flat' : _ref$mode,
    _ref$dense = _ref.dense,
    dense = _ref$dense === void 0 ? false : _ref$dense,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$error = _ref.error,
    errorProp = _ref$error === void 0 ? false : _ref$error,
    _ref$multiline = _ref.multiline,
    multiline = _ref$multiline === void 0 ? false : _ref$multiline,
    _ref$editable = _ref.editable,
    editable = _ref$editable === void 0 ? true : _ref$editable,
    contentStyle = _ref.contentStyle,
    _ref$render = _ref.render,
    render = _ref$render === void 0 ? DefaultRenderer : _ref$render,
    themeOverrides = _ref.theme,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var isControlled = rest.value !== undefined;
  var validInputValue = isControlled ? rest.value : rest.defaultValue;
  var _React$useRef = React.useRef(new _reactNative.Animated.Value(validInputValue ? 0 : 1)),
    labeled = _React$useRef.current;
  var _React$useRef2 = React.useRef(new _reactNative.Animated.Value(errorProp ? 1 : 0)),
    error = _React$useRef2.current;
  var _React$useState = React.useState(false),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    focused = _React$useState2[0],
    setFocused = _React$useState2[1];
  var _React$useState3 = React.useState(' '),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    placeholder = _React$useState4[0],
    setPlaceholder = _React$useState4[1];
  var _React$useState5 = React.useState(validInputValue),
    _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),
    uncontrolledValue = _React$useState6[0],
    setUncontrolledValue = _React$useState6[1];
  var value = isControlled ? rest.value : uncontrolledValue;
  var _React$useState7 = React.useState({
      width: 33
    }),
    _React$useState8 = (0, _slicedToArray2.default)(_React$useState7, 2),
    labelTextLayout = _React$useState8[0],
    setLabelTextLayout = _React$useState8[1];
  var _React$useState9 = React.useState({
      width: 65
    }),
    _React$useState10 = (0, _slicedToArray2.default)(_React$useState9, 2),
    inputContainerLayout = _React$useState10[0],
    setInputContainerLayout = _React$useState10[1];
  var _React$useState11 = React.useState({
      measured: false,
      width: 0,
      height: 0
    }),
    _React$useState12 = (0, _slicedToArray2.default)(_React$useState11, 2),
    labelLayout = _React$useState12[0],
    setLabelLayout = _React$useState12[1];
  var _React$useState13 = React.useState({
      width: null,
      height: null
    }),
    _React$useState14 = (0, _slicedToArray2.default)(_React$useState13, 2),
    leftLayout = _React$useState14[0],
    setLeftLayout = _React$useState14[1];
  var _React$useState15 = React.useState({
      width: null,
      height: null
    }),
    _React$useState16 = (0, _slicedToArray2.default)(_React$useState15, 2),
    rightLayout = _React$useState16[0],
    setRightLayout = _React$useState16[1];
  var timer = React.useRef();
  var root = React.useRef();
  var scale = theme.animation.scale;
  React.useImperativeHandle(ref, function () {
    return {
      focus: function focus() {
        var _root$current;
        return (_root$current = root.current) === null || _root$current === void 0 ? void 0 : _root$current.focus();
      },
      clear: function clear() {
        var _root$current2;
        return (_root$current2 = root.current) === null || _root$current2 === void 0 ? void 0 : _root$current2.clear();
      },
      setNativeProps: function setNativeProps(args) {
        var _root$current3;
        return (_root$current3 = root.current) === null || _root$current3 === void 0 ? void 0 : _root$current3.setNativeProps(args);
      },
      isFocused: function isFocused() {
        var _root$current4;
        return ((_root$current4 = root.current) === null || _root$current4 === void 0 ? void 0 : _root$current4.isFocused()) || false;
      },
      blur: function blur() {
        var _root$current5;
        return (_root$current5 = root.current) === null || _root$current5 === void 0 ? void 0 : _root$current5.blur();
      },
      forceFocus: function forceFocus() {
        var _root$current6;
        return (_root$current6 = root.current) === null || _root$current6 === void 0 ? void 0 : _root$current6.focus();
      }
    };
  });
  React.useEffect(function () {
    if (errorProp) {
      _reactNative.Animated.timing(error, {
        toValue: 1,
        duration: FOCUS_ANIMATION_DURATION * scale,
        useNativeDriver: true
      }).start();
    } else {
      {
        _reactNative.Animated.timing(error, {
          toValue: 0,
          duration: BLUR_ANIMATION_DURATION * scale,
          useNativeDriver: true
        }).start();
      }
    }
  }, [errorProp, scale, error]);
  React.useEffect(function () {
    if (focused || !rest.label) {
      if (rest.placeholder) {
        timer.current = setTimeout(function () {
          return setPlaceholder(rest.placeholder);
        }, 50);
      }
    } else {
      setPlaceholder(' ');
    }
    return function () {
      if (timer.current) {
        clearTimeout(timer.current);
      }
    };
  }, [focused, rest.label, rest.placeholder]);
  React.useEffect(function () {
    labeled.stopAnimation();
    if (value || focused) {
      _reactNative.Animated.timing(labeled, {
        toValue: 0,
        duration: BLUR_ANIMATION_DURATION * scale,
        useNativeDriver: true
      }).start();
    } else {
      _reactNative.Animated.timing(labeled, {
        toValue: 1,
        duration: FOCUS_ANIMATION_DURATION * scale,
        useNativeDriver: true
      }).start();
    }
  }, [focused, value, labeled, scale]);
  var onLeftAffixLayoutChange = React.useCallback(function (event) {
    var height = (0, _roundLayoutSize.roundLayoutSize)(event.nativeEvent.layout.height);
    var width = (0, _roundLayoutSize.roundLayoutSize)(event.nativeEvent.layout.width);
    if (width !== leftLayout.width || height !== leftLayout.height) {
      setLeftLayout({
        width: width,
        height: height
      });
    }
  }, [leftLayout.height, leftLayout.width]);
  var onRightAffixLayoutChange = React.useCallback(function (event) {
    var width = (0, _roundLayoutSize.roundLayoutSize)(event.nativeEvent.layout.width);
    var height = (0, _roundLayoutSize.roundLayoutSize)(event.nativeEvent.layout.height);
    if (width !== rightLayout.width || height !== rightLayout.height) {
      setRightLayout({
        width: width,
        height: height
      });
    }
  }, [rightLayout.height, rightLayout.width]);
  var handleFocus = function handleFocus(args) {
    var _rest$onFocus;
    if (disabled || !editable) {
      return;
    }
    setFocused(true);
    (_rest$onFocus = rest.onFocus) === null || _rest$onFocus === void 0 ? void 0 : _rest$onFocus.call(rest, args);
  };
  var handleBlur = function handleBlur(args) {
    var _rest$onBlur;
    if (!editable) {
      return;
    }
    setFocused(false);
    (_rest$onBlur = rest.onBlur) === null || _rest$onBlur === void 0 ? void 0 : _rest$onBlur.call(rest, args);
  };
  var handleChangeText = function handleChangeText(value) {
    var _rest$onChangeText;
    if (!editable || disabled) {
      return;
    }
    if (!isControlled) {
      setUncontrolledValue(value);
    }
    (_rest$onChangeText = rest.onChangeText) === null || _rest$onChangeText === void 0 ? void 0 : _rest$onChangeText.call(rest, value);
  };
  var handleLayoutAnimatedText = React.useCallback(function (e) {
    var width = (0, _roundLayoutSize.roundLayoutSize)(e.nativeEvent.layout.width);
    var height = (0, _roundLayoutSize.roundLayoutSize)(e.nativeEvent.layout.height);
    if (width !== labelLayout.width || height !== labelLayout.height) {
      setLabelLayout({
        width: width,
        height: height,
        measured: true
      });
    }
  }, [labelLayout.height, labelLayout.width]);
  var handleLabelTextLayout = React.useCallback(function (_ref2) {
    var nativeEvent = _ref2.nativeEvent;
    setLabelTextLayout({
      width: nativeEvent.lines.reduce(function (acc, line) {
        return acc + Math.ceil(line.width);
      }, 0)
    });
  }, []);
  var handleInputContainerLayout = React.useCallback(function (_ref3) {
    var layout = _ref3.nativeEvent.layout;
    setInputContainerLayout({
      width: layout.width
    });
  }, []);
  var forceFocus = React.useCallback(function () {
    var _root$current7;
    return (_root$current7 = root.current) === null || _root$current7 === void 0 ? void 0 : _root$current7.focus();
  }, []);
  var _rest$maxFontSizeMult = rest.maxFontSizeMultiplier,
    maxFontSizeMultiplier = _rest$maxFontSizeMult === void 0 ? 1.5 : _rest$maxFontSizeMult;
  if (mode === 'outlined') {
    return React.createElement(_TextInputOutlined.default, _extends({
      dense: dense,
      disabled: disabled,
      error: errorProp,
      multiline: multiline,
      editable: editable,
      render: render
    }, rest, {
      theme: theme,
      value: value,
      parentState: {
        labeled: labeled,
        error: error,
        focused: focused,
        placeholder: placeholder,
        value: value,
        labelTextLayout: labelTextLayout,
        labelLayout: labelLayout,
        leftLayout: leftLayout,
        rightLayout: rightLayout,
        inputContainerLayout: inputContainerLayout
      },
      innerRef: function innerRef(ref) {
        root.current = ref;
      },
      onFocus: handleFocus,
      forceFocus: forceFocus,
      onBlur: handleBlur,
      onChangeText: handleChangeText,
      onLayoutAnimatedText: handleLayoutAnimatedText,
      onInputLayout: handleInputContainerLayout,
      onLabelTextLayout: handleLabelTextLayout,
      onLeftAffixLayoutChange: onLeftAffixLayoutChange,
      onRightAffixLayoutChange: onRightAffixLayoutChange,
      maxFontSizeMultiplier: maxFontSizeMultiplier,
      contentStyle: contentStyle
    }));
  }
  return React.createElement(_TextInputFlat.default, _extends({
    dense: dense,
    disabled: disabled,
    error: errorProp,
    multiline: multiline,
    editable: editable,
    render: render
  }, rest, {
    theme: theme,
    value: value,
    parentState: {
      labeled: labeled,
      error: error,
      focused: focused,
      placeholder: placeholder,
      value: value,
      labelTextLayout: labelTextLayout,
      labelLayout: labelLayout,
      leftLayout: leftLayout,
      rightLayout: rightLayout,
      inputContainerLayout: inputContainerLayout
    },
    innerRef: function innerRef(ref) {
      root.current = ref;
    },
    onFocus: handleFocus,
    forceFocus: forceFocus,
    onBlur: handleBlur,
    onInputLayout: handleInputContainerLayout,
    onChangeText: handleChangeText,
    onLayoutAnimatedText: handleLayoutAnimatedText,
    onLabelTextLayout: handleLabelTextLayout,
    onLeftAffixLayoutChange: onLeftAffixLayoutChange,
    onRightAffixLayoutChange: onRightAffixLayoutChange,
    maxFontSizeMultiplier: maxFontSizeMultiplier,
    contentStyle: contentStyle
  }));
});
TextInput.Icon = _TextInputIcon.default;
TextInput.Affix = _TextInputAffix.default;
var _default = TextInput;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,