a6969cd67823fcbc769d699c3974a7cd
_getJestObj().mock('react-native/Libraries/Animated/NativeAnimatedHelper');
_getJestObj().mock('react-native/Libraries/Animated/Easing', function () {
  var Easing = jest.requireActual('react-native/Libraries/Animated/Easing');
  return _objectSpread(_objectSpread({}, Easing), {}, {
    ease: jest.fn(function () {
      return 'ease';
    }),
    bezier: jest.fn(function () {
      return 'bezier';
    }),
    linear: jest.fn(function () {
      return 'linear';
    })
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
require("@testing-library/jest-native/extend-expect");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJFYXNpbmciLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsIl9vYmplY3RTcHJlYWQiLCJlYXNlIiwiZm4iLCJiZXppZXIiLCJsaW5lYXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJvd25LZXlzIiwiZSIsInIiLCJ0IiwiT2JqZWN0Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm8iLCJmaWx0ZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsImRlZmF1bHQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5IiwiX3JlcXVpcmUiXSwic291cmNlcyI6WyJqZXN0LnNldHVwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LW5hdGl2ZS9leHRlbmQtZXhwZWN0JztcblxuLy8gTW9ja2luZyBuYXRpdmUgYW5pbWF0ZWQgbW9kdWxlIHRvIHByZXZlbnQgZXJyb3JzXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvQW5pbWF0ZWQvTmF0aXZlQW5pbWF0ZWRIZWxwZXInKTtcblxuLy8gTW9ja2luZyBFYXNpbmcgbW9kdWxlIGdsb2JhbGx5XG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvQW5pbWF0ZWQvRWFzaW5nJywgKCkgPT4ge1xuICBjb25zdCBFYXNpbmcgPSBqZXN0LnJlcXVpcmVBY3R1YWwoJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvQW5pbWF0ZWQvRWFzaW5nJyk7XG4gIHJldHVybiB7XG4gICAgLi4uRWFzaW5nLFxuICAgIGVhc2U6IGplc3QuZm4oKCkgPT4gJ2Vhc2UnKSxcbiAgICBiZXppZXI6IGplc3QuZm4oKCkgPT4gJ2JlemllcicpLFxuICAgIGxpbmVhcjogamVzdC5mbigoKSA9PiAnbGluZWFyJyksXG4gICAgLy8gQWRkIG90aGVyIGVhc2luZyBmdW5jdGlvbnMgYXMgbmVlZGVkXG4gIH07XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBR0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLHNEQUFzRCxDQUFDO0FBR2pFRCxXQUFBLEdBQUtDLElBQUksQ0FBQyx3Q0FBd0MsRUFBRSxZQUFNO0VBQ3hELElBQU1DLE1BQU0sR0FBR0MsSUFBSSxDQUFDQyxhQUFhLENBQUMsd0NBQXdDLENBQUM7RUFDM0UsT0FBQUMsYUFBQSxDQUFBQSxhQUFBLEtBQ0tILE1BQU07SUFDVEksSUFBSSxFQUFFSCxJQUFJLENBQUNJLEVBQUUsQ0FBQztNQUFBLE9BQU0sTUFBTTtJQUFBLEVBQUM7SUFDM0JDLE1BQU0sRUFBRUwsSUFBSSxDQUFDSSxFQUFFLENBQUM7TUFBQSxPQUFNLFFBQVE7SUFBQSxFQUFDO0lBQy9CRSxNQUFNLEVBQUVOLElBQUksQ0FBQ0ksRUFBRSxDQUFDO01BQUEsT0FBTSxRQUFRO0lBQUE7RUFBQztBQUduQyxDQUFDLENBQUM7QUFBQyxJQUFBRyxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsZ0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQWZIQSxPQUFBO0FBQW9ELFNBQUFFLFFBQUFDLENBQUEsRUFBQUMsQ0FBQSxRQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsSUFBQSxDQUFBSixDQUFBLE9BQUFHLE1BQUEsQ0FBQUUscUJBQUEsUUFBQUMsQ0FBQSxHQUFBSCxNQUFBLENBQUFFLHFCQUFBLENBQUFMLENBQUEsR0FBQUMsQ0FBQSxLQUFBSyxDQUFBLEdBQUFBLENBQUEsQ0FBQUMsTUFBQSxXQUFBTixDQUFBLFdBQUFFLE1BQUEsQ0FBQUssd0JBQUEsQ0FBQVIsQ0FBQSxFQUFBQyxDQUFBLEVBQUFRLFVBQUEsT0FBQVAsQ0FBQSxDQUFBUSxJQUFBLENBQUFDLEtBQUEsQ0FBQVQsQ0FBQSxFQUFBSSxDQUFBLFlBQUFKLENBQUE7QUFBQSxTQUFBWCxjQUFBUyxDQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBVyxTQUFBLENBQUFDLE1BQUEsRUFBQVosQ0FBQSxVQUFBQyxDQUFBLFdBQUFVLFNBQUEsQ0FBQVgsQ0FBQSxJQUFBVyxTQUFBLENBQUFYLENBQUEsUUFBQUEsQ0FBQSxPQUFBRixPQUFBLENBQUFJLE1BQUEsQ0FBQUQsQ0FBQSxPQUFBWSxPQUFBLFdBQUFiLENBQUEsUUFBQUgsZ0JBQUEsQ0FBQWlCLE9BQUEsRUFBQWYsQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsQ0FBQUQsQ0FBQSxTQUFBRSxNQUFBLENBQUFhLHlCQUFBLEdBQUFiLE1BQUEsQ0FBQWMsZ0JBQUEsQ0FBQWpCLENBQUEsRUFBQUcsTUFBQSxDQUFBYSx5QkFBQSxDQUFBZCxDQUFBLEtBQUFILE9BQUEsQ0FBQUksTUFBQSxDQUFBRCxDQUFBLEdBQUFZLE9BQUEsV0FBQWIsQ0FBQSxJQUFBRSxNQUFBLENBQUFlLGNBQUEsQ0FBQWxCLENBQUEsRUFBQUMsQ0FBQSxFQUFBRSxNQUFBLENBQUFLLHdCQUFBLENBQUFOLENBQUEsRUFBQUQsQ0FBQSxpQkFBQUQsQ0FBQTtBQUFBLFNBQUFkLFlBQUE7RUFBQSxJQUFBaUMsUUFBQSxHQUFBdEIsT0FBQTtJQUFBUixJQUFBLEdBQUE4QixRQUFBLENBQUE5QixJQUFBO0VBQUFILFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFHLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQSIsImlnbm9yZUxpc3QiOltdfQ==