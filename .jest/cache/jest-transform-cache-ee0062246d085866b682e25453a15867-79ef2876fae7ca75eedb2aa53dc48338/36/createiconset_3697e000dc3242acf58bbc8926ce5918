d7a1fcc0defef9b9682af51e3677a9de
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_ICON_SIZE = exports.DEFAULT_ICON_COLOR = void 0;
exports.default = createIconSet;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactNative = require("react-native");
var _ensureNativeModuleAvailable = _interopRequireDefault(require("./ensure-native-module-available"));
var _createIconSourceCache = _interopRequireDefault(require("./create-icon-source-cache"));
var _iconButton = _interopRequireDefault(require("./icon-button"));
var _NativeRNVectorIcons = _interopRequireDefault(require("./NativeRNVectorIcons"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["name", "size", "color", "style", "children"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var DEFAULT_ICON_SIZE = exports.DEFAULT_ICON_SIZE = 12;
var DEFAULT_ICON_COLOR = exports.DEFAULT_ICON_COLOR = 'black';
function createIconSet(glyphMap, fontFamily, fontFile, fontStyle) {
  var fontBasename = fontFile ? fontFile.replace(/\.(otf|ttf)$/, '') : fontFamily;
  var fontReference = _reactNative.Platform.select({
    windows: `/Assets/${fontFile}#${fontFamily}`,
    android: fontBasename,
    web: fontBasename,
    default: fontFamily
  });
  var IconNamePropType = _propTypes.default.oneOf(Object.keys(glyphMap));
  var Icon = function (_PureComponent) {
    function Icon() {
      (0, _classCallCheck2.default)(this, Icon);
      return _callSuper(this, Icon, arguments);
    }
    (0, _inherits2.default)(Icon, _PureComponent);
    return (0, _createClass2.default)(Icon, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
          name = _this$props.name,
          size = _this$props.size,
          color = _this$props.color,
          style = _this$props.style,
          children = _this$props.children,
          props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
        var glyph = name ? glyphMap[name] || '?' : '';
        if (typeof glyph === 'number') {
          glyph = String.fromCodePoint(glyph);
        }
        var styleDefaults = {
          fontSize: size,
          color: color
        };
        var styleOverrides = {
          fontFamily: fontReference,
          fontWeight: 'normal',
          fontStyle: 'normal'
        };
        props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];
        return (0, _jsxRuntime.jsxs)(_reactNative.Text, _objectSpread(_objectSpread({
          selectable: false
        }, props), {}, {
          children: [glyph, children]
        }));
      }
    }]);
  }(_react.PureComponent);
  Icon.propTypes = {
    allowFontScaling: _propTypes.default.bool,
    name: IconNamePropType,
    size: _propTypes.default.number,
    color: _propTypes.default.any,
    children: _propTypes.default.node,
    style: _propTypes.default.any
  };
  Icon.defaultProps = {
    size: DEFAULT_ICON_SIZE,
    allowFontScaling: false
  };
  var imageSourceCache = (0, _createIconSourceCache.default)();
  function resolveGlyph(name) {
    var glyph = glyphMap[name] || '?';
    if (typeof glyph === 'number') {
      return String.fromCodePoint(glyph);
    }
    return glyph;
  }
  function getImageSourceSync(name) {
    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;
    var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;
    (0, _ensureNativeModuleAvailable.default)();
    var glyph = resolveGlyph(name);
    var processedColor = (0, _reactNative.processColor)(color);
    var cacheKey = `${glyph}:${size}:${processedColor}`;
    if (imageSourceCache.has(cacheKey)) {
      return imageSourceCache.get(cacheKey);
    }
    try {
      var imagePath = _NativeRNVectorIcons.default.getImageForFontSync(fontReference, glyph, size, processedColor);
      var value = {
        uri: imagePath,
        scale: _reactNative.PixelRatio.get()
      };
      imageSourceCache.setValue(cacheKey, value);
      return value;
    } catch (error) {
      imageSourceCache.setError(cacheKey, error);
      throw error;
    }
  }
  function getImageSource(_x) {
    return _getImageSource.apply(this, arguments);
  }
  function _getImageSource() {
    _getImageSource = (0, _asyncToGenerator2.default)(function* (name) {
      var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;
      var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;
      (0, _ensureNativeModuleAvailable.default)();
      var glyph = resolveGlyph(name);
      var processedColor = (0, _reactNative.processColor)(color);
      var cacheKey = `${glyph}:${size}:${processedColor}`;
      if (imageSourceCache.has(cacheKey)) {
        return imageSourceCache.get(cacheKey);
      }
      try {
        var imagePath = yield _NativeRNVectorIcons.default.getImageForFont(fontReference, glyph, size, processedColor);
        var value = {
          uri: imagePath,
          scale: _reactNative.PixelRatio.get()
        };
        imageSourceCache.setValue(cacheKey, value);
        return value;
      } catch (error) {
        imageSourceCache.setError(cacheKey, error);
        throw error;
      }
    });
    return _getImageSource.apply(this, arguments);
  }
  function loadFont() {
    return _loadFont.apply(this, arguments);
  }
  function _loadFont() {
    _loadFont = (0, _asyncToGenerator2.default)(function* () {
      var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : fontFile;
      if (_reactNative.Platform.OS === 'ios') {
        (0, _ensureNativeModuleAvailable.default)();
        if (!file) {
          throw new Error('Unable to load font, because no file was specified. ');
        }
        yield _NativeRNVectorIcons.default.loadFontWithFileName.apply(_NativeRNVectorIcons.default, (0, _toConsumableArray2.default)(file.split('.')));
      }
    });
    return _loadFont.apply(this, arguments);
  }
  function hasIcon(name) {
    return Object.prototype.hasOwnProperty.call(glyphMap, name);
  }
  function getRawGlyphMap() {
    return glyphMap;
  }
  function getFontFamily() {
    return fontReference;
  }
  Icon.Button = (0, _iconButton.default)(Icon);
  Icon.getImageSource = getImageSource;
  Icon.getImageSourceSync = getImageSourceSync;
  Icon.loadFont = loadFont;
  Icon.hasIcon = hasIcon;
  Icon.getRawGlyphMap = getRawGlyphMap;
  Icon.getFontFamily = getFontFamily;
  return Icon;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,