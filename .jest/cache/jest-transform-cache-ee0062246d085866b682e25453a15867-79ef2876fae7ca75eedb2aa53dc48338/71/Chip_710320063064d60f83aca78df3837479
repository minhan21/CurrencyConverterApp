f1f2f4c094a0b51543468fe43bc1ee7d
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["mode", "children", "icon", "avatar", "selected", "disabled", "background", "accessibilityLabel", "closeIconAccessibilityLabel", "onPress", "onLongPress", "onPressOut", "onPressIn", "delayLongPress", "onClose", "closeIcon", "textStyle", "style", "theme", "testID", "selectedColor", "rippleColor", "showSelectedOverlay", "showSelectedCheck", "ellipsizeMode", "compact", "elevated", "maxFontSizeMultiplier"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _useLatestCallback = _interopRequireDefault(require("use-latest-callback"));
var _helpers = require("./helpers");
var _theming = require("../../core/theming");
var _colors = require("../../styles/themes/v2/colors");
var _hasTouchHandler = _interopRequireDefault(require("../../utils/hasTouchHandler"));
var _Icon = _interopRequireDefault(require("../Icon"));
var _MaterialCommunityIcon = _interopRequireDefault(require("../MaterialCommunityIcon"));
var _Surface = _interopRequireDefault(require("../Surface"));
var _TouchableRipple = _interopRequireDefault(require("../TouchableRipple/TouchableRipple"));
var _Text = _interopRequireDefault(require("../Typography/Text"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var Chip = function Chip(_ref) {
  var _ref$mode = _ref.mode,
    mode = _ref$mode === void 0 ? 'flat' : _ref$mode,
    children = _ref.children,
    icon = _ref.icon,
    avatar = _ref.avatar,
    _ref$selected = _ref.selected,
    selected = _ref$selected === void 0 ? false : _ref$selected,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    background = _ref.background,
    accessibilityLabel = _ref.accessibilityLabel,
    _ref$closeIconAccessi = _ref.closeIconAccessibilityLabel,
    closeIconAccessibilityLabel = _ref$closeIconAccessi === void 0 ? 'Close' : _ref$closeIconAccessi,
    onPress = _ref.onPress,
    onLongPress = _ref.onLongPress,
    onPressOut = _ref.onPressOut,
    onPressIn = _ref.onPressIn,
    delayLongPress = _ref.delayLongPress,
    onClose = _ref.onClose,
    closeIcon = _ref.closeIcon,
    textStyle = _ref.textStyle,
    style = _ref.style,
    themeOverrides = _ref.theme,
    _ref$testID = _ref.testID,
    testID = _ref$testID === void 0 ? 'chip' : _ref$testID,
    selectedColor = _ref.selectedColor,
    customRippleColor = _ref.rippleColor,
    _ref$showSelectedOver = _ref.showSelectedOverlay,
    showSelectedOverlay = _ref$showSelectedOver === void 0 ? false : _ref$showSelectedOver,
    _ref$showSelectedChec = _ref.showSelectedCheck,
    showSelectedCheck = _ref$showSelectedChec === void 0 ? true : _ref$showSelectedChec,
    ellipsizeMode = _ref.ellipsizeMode,
    compact = _ref.compact,
    _ref$elevated = _ref.elevated,
    elevated = _ref$elevated === void 0 ? false : _ref$elevated,
    maxFontSizeMultiplier = _ref.maxFontSizeMultiplier,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var isV3 = theme.isV3,
    roundness = theme.roundness;
  var _React$useRef = React.useRef(new _reactNative.Animated.Value(isV3 && elevated ? 1 : 0)),
    elevation = _React$useRef.current;
  var hasPassedTouchHandler = (0, _hasTouchHandler.default)({
    onPress: onPress,
    onLongPress: onLongPress,
    onPressIn: onPressIn,
    onPressOut: onPressOut
  });
  var isOutlined = mode === 'outlined';
  var handlePressIn = (0, _useLatestCallback.default)(function (e) {
    var scale = theme.animation.scale;
    onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(e);
    _reactNative.Animated.timing(elevation, {
      toValue: isV3 ? elevated ? 2 : 0 : 4,
      duration: 200 * scale,
      useNativeDriver: _reactNative.Platform.OS === 'web' || _reactNative.Platform.constants.reactNativeVersion.minor <= 72
    }).start();
  });
  var handlePressOut = (0, _useLatestCallback.default)(function (e) {
    var scale = theme.animation.scale;
    onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut(e);
    _reactNative.Animated.timing(elevation, {
      toValue: isV3 && elevated ? 1 : 0,
      duration: 150 * scale,
      useNativeDriver: _reactNative.Platform.OS === 'web' || _reactNative.Platform.constants.reactNativeVersion.minor <= 72
    }).start();
  });
  var opacity = isV3 ? 0.38 : 0.26;
  var defaultBorderRadius = roundness * (isV3 ? 2 : 4);
  var iconSize = isV3 ? 18 : 16;
  var _ref2 = _reactNative.StyleSheet.flatten(style) || {},
    customBackgroundColor = _ref2.backgroundColor,
    _ref2$borderRadius = _ref2.borderRadius,
    borderRadius = _ref2$borderRadius === void 0 ? defaultBorderRadius : _ref2$borderRadius;
  var _ref3 = (0, _helpers.getChipColors)({
      isOutlined: isOutlined,
      theme: theme,
      selectedColor: selectedColor,
      showSelectedOverlay: showSelectedOverlay,
      customBackgroundColor: customBackgroundColor,
      disabled: disabled,
      customRippleColor: customRippleColor
    }),
    borderColor = _ref3.borderColor,
    textColor = _ref3.textColor,
    iconColor = _ref3.iconColor,
    rippleColor = _ref3.rippleColor,
    selectedBackgroundColor = _ref3.selectedBackgroundColor,
    backgroundColor = _ref3.backgroundColor;
  var accessibilityState = {
    selected: selected,
    disabled: disabled
  };
  var elevationStyle = isV3 || _reactNative.Platform.OS === 'android' ? elevation : 0;
  var multiplier = isV3 ? compact ? 1.5 : 2 : 1;
  var labelSpacings = {
    marginRight: onClose ? 0 : 8 * multiplier,
    marginLeft: avatar || icon || selected && showSelectedCheck ? 4 * multiplier : 8 * multiplier
  };
  var contentSpacings = {
    paddingRight: isV3 ? onClose ? 34 : 0 : onClose ? 32 : 4
  };
  var labelTextStyle = _objectSpread({
    color: textColor
  }, isV3 ? theme.fonts.labelLarge : theme.fonts.regular);
  return React.createElement(_Surface.default, _extends({
    style: [styles.container, isV3 && (isOutlined ? styles.md3OutlineContainer : styles.md3FlatContainer), !theme.isV3 && {
      elevation: elevationStyle
    }, {
      backgroundColor: selected ? selectedBackgroundColor : backgroundColor,
      borderColor: borderColor,
      borderRadius: borderRadius
    }, style]
  }, theme.isV3 && {
    elevation: elevationStyle
  }, rest, {
    testID: `${testID}-container`,
    theme: theme
  }), React.createElement(_TouchableRipple.default, {
    borderless: true,
    background: background,
    style: [{
      borderRadius: borderRadius
    }, styles.touchable],
    onPress: onPress,
    onLongPress: onLongPress,
    onPressIn: hasPassedTouchHandler ? handlePressIn : undefined,
    onPressOut: hasPassedTouchHandler ? handlePressOut : undefined,
    delayLongPress: delayLongPress,
    rippleColor: rippleColor,
    disabled: disabled,
    accessibilityLabel: accessibilityLabel,
    accessibilityRole: "button",
    accessibilityState: accessibilityState,
    testID: testID,
    theme: theme
  }, React.createElement(_reactNative.View, {
    style: [styles.content, isV3 && styles.md3Content, contentSpacings]
  }, avatar && !icon ? React.createElement(_reactNative.View, {
    style: [styles.avatarWrapper, isV3 && styles.md3AvatarWrapper, disabled && {
      opacity: opacity
    }]
  }, React.isValidElement(avatar) ? React.cloneElement(avatar, {
    style: [styles.avatar, avatar.props.style]
  }) : avatar) : null, icon || selected && showSelectedCheck ? React.createElement(_reactNative.View, {
    style: [styles.icon, isV3 && styles.md3Icon, avatar ? [styles.avatar, styles.avatarSelected, isV3 && selected && styles.md3SelectedIcon] : null]
  }, icon ? React.createElement(_Icon.default, {
    source: icon,
    color: avatar ? _colors.white : !disabled && theme.isV3 ? theme.colors.primary : iconColor,
    size: 18,
    theme: theme
  }) : React.createElement(_MaterialCommunityIcon.default, {
    name: "check",
    color: avatar ? _colors.white : iconColor,
    size: 18,
    direction: "ltr"
  })) : null, React.createElement(_Text.default, {
    variant: "labelLarge",
    selectable: false,
    numberOfLines: 1,
    style: [isV3 ? styles.md3LabelText : styles.labelText, labelTextStyle, labelSpacings, textStyle],
    ellipsizeMode: ellipsizeMode,
    maxFontSizeMultiplier: maxFontSizeMultiplier
  }, children))), onClose ? React.createElement(_reactNative.View, {
    style: styles.closeButtonStyle
  }, React.createElement(_reactNative.Pressable, {
    onPress: onClose,
    disabled: disabled,
    accessibilityRole: "button",
    accessibilityLabel: closeIconAccessibilityLabel
  }, React.createElement(_reactNative.View, {
    style: [styles.icon, styles.closeIcon, isV3 && styles.md3CloseIcon]
  }, closeIcon ? React.createElement(_Icon.default, {
    source: closeIcon,
    color: iconColor,
    size: iconSize
  }) : React.createElement(_MaterialCommunityIcon.default, {
    name: isV3 ? 'close' : 'close-circle',
    size: iconSize,
    color: iconColor,
    direction: "ltr"
  })))) : null);
};
var styles = _reactNative.StyleSheet.create({
  container: {
    borderWidth: _reactNative.StyleSheet.hairlineWidth,
    borderStyle: 'solid',
    flexDirection: _reactNative.Platform.select({
      default: 'column',
      web: 'row'
    })
  },
  md3OutlineContainer: {
    borderWidth: 1
  },
  md3FlatContainer: {
    borderWidth: 0
  },
  content: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingLeft: 4,
    position: 'relative'
  },
  md3Content: {
    paddingLeft: 0
  },
  icon: {
    padding: 4,
    alignSelf: 'center'
  },
  md3Icon: {
    paddingLeft: 8,
    paddingRight: 0
  },
  closeIcon: {
    marginRight: 4
  },
  md3CloseIcon: {
    marginRight: 8,
    padding: 0
  },
  labelText: {
    minHeight: 24,
    lineHeight: 24,
    textAlignVertical: 'center',
    marginVertical: 4
  },
  md3LabelText: {
    textAlignVertical: 'center',
    marginVertical: 6
  },
  avatar: {
    width: 24,
    height: 24,
    borderRadius: 12
  },
  avatarWrapper: {
    marginRight: 4
  },
  md3AvatarWrapper: {
    marginLeft: 4,
    marginRight: 0
  },
  md3SelectedIcon: {
    paddingLeft: 4
  },
  avatarSelected: {
    position: 'absolute',
    top: 4,
    left: 4,
    backgroundColor: 'rgba(0, 0, 0, .29)'
  },
  closeButtonStyle: {
    position: 'absolute',
    right: 0,
    height: '100%',
    justifyContent: 'center',
    alignItems: 'center'
  },
  touchable: {
    width: '100%'
  }
});
var _default = Chip;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,