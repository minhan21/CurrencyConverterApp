8469017b738940f062c71c15c5091db4
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["component"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _useLatestCallback = _interopRequireDefault(require("use-latest-callback"));
var _BottomNavigationBar = _interopRequireDefault(require("./BottomNavigationBar"));
var _BottomNavigationRouteScreen = _interopRequireDefault(require("./BottomNavigationRouteScreen"));
var _theming = require("../../core/theming");
var _useAnimatedValueArray = _interopRequireDefault(require("../../utils/useAnimatedValueArray"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var FAR_FAR_AWAY = _reactNative.Platform.OS === 'web' ? 0 : 9999;
var SceneComponent = React.memo(function (_ref) {
  var component = _ref.component,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  return React.createElement(component, rest);
});
var BottomNavigation = function BottomNavigation(_ref2) {
  var navigationState = _ref2.navigationState,
    renderScene = _ref2.renderScene,
    renderIcon = _ref2.renderIcon,
    renderLabel = _ref2.renderLabel,
    renderTouchable = _ref2.renderTouchable,
    getLabelText = _ref2.getLabelText,
    getBadge = _ref2.getBadge,
    getColor = _ref2.getColor,
    getAccessibilityLabel = _ref2.getAccessibilityLabel,
    getTestID = _ref2.getTestID,
    activeColor = _ref2.activeColor,
    inactiveColor = _ref2.inactiveColor,
    _ref2$keyboardHidesNa = _ref2.keyboardHidesNavigationBar,
    keyboardHidesNavigationBar = _ref2$keyboardHidesNa === void 0 ? _reactNative.Platform.OS === 'android' : _ref2$keyboardHidesNa,
    barStyle = _ref2.barStyle,
    _ref2$labeled = _ref2.labeled,
    labeled = _ref2$labeled === void 0 ? true : _ref2$labeled,
    style = _ref2.style,
    activeIndicatorStyle = _ref2.activeIndicatorStyle,
    _ref2$sceneAnimationE = _ref2.sceneAnimationEnabled,
    sceneAnimationEnabled = _ref2$sceneAnimationE === void 0 ? false : _ref2$sceneAnimationE,
    _ref2$sceneAnimationT = _ref2.sceneAnimationType,
    sceneAnimationType = _ref2$sceneAnimationT === void 0 ? 'opacity' : _ref2$sceneAnimationT,
    sceneAnimationEasing = _ref2.sceneAnimationEasing,
    onTabPress = _ref2.onTabPress,
    onTabLongPress = _ref2.onTabLongPress,
    onIndexChange = _ref2.onIndexChange,
    shiftingProp = _ref2.shifting,
    safeAreaInsets = _ref2.safeAreaInsets,
    _ref2$labelMaxFontSiz = _ref2.labelMaxFontSizeMultiplier,
    labelMaxFontSizeMultiplier = _ref2$labelMaxFontSiz === void 0 ? 1 : _ref2$labelMaxFontSiz,
    compactProp = _ref2.compact,
    _ref2$testID = _ref2.testID,
    testID = _ref2$testID === void 0 ? 'bottom-navigation' : _ref2$testID,
    themeOverrides = _ref2.theme,
    _ref2$getLazy = _ref2.getLazy,
    getLazy = _ref2$getLazy === void 0 ? function (_ref3) {
      var route = _ref3.route;
      return route.lazy;
    } : _ref2$getLazy;
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var scale = theme.animation.scale;
  var compact = compactProp != null ? compactProp : !theme.isV3;
  var shifting = shiftingProp != null ? shiftingProp : theme.isV3 ? false : navigationState.routes.length > 3;
  if (shifting && navigationState.routes.length < 2) {
    shifting = false;
    console.warn('BottomNavigation needs at least 2 tabs to run shifting animation');
  }
  var focusedKey = navigationState.routes[navigationState.index].key;
  var tabsPositionAnims = (0, _useAnimatedValueArray.default)(navigationState.routes.map(function (_, i) {
    return i === navigationState.index ? 0 : i >= navigationState.index ? 1 : -1;
  }));
  var offsetsAnims = (0, _useAnimatedValueArray.default)(navigationState.routes.map(function (_, i) {
    return i === navigationState.index ? 0 : 1;
  }));
  var _React$useState = React.useState([focusedKey]),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    loaded = _React$useState2[0],
    setLoaded = _React$useState2[1];
  if (!loaded.includes(focusedKey)) {
    setLoaded(function (loaded) {
      return [].concat((0, _toConsumableArray2.default)(loaded), [focusedKey]);
    });
  }
  var animateToIndex = React.useCallback(function (index) {
    _reactNative.Animated.parallel((0, _toConsumableArray2.default)(navigationState.routes.map(function (_, i) {
      return _reactNative.Animated.timing(tabsPositionAnims[i], {
        toValue: i === index ? 0 : i >= index ? 1 : -1,
        duration: theme.isV3 || shifting ? 150 * scale : 0,
        useNativeDriver: true,
        easing: sceneAnimationEasing
      });
    }))).start(function (_ref4) {
      var finished = _ref4.finished;
      if (finished) {
        offsetsAnims.forEach(function (offset, i) {
          if (i === index) {
            offset.setValue(0);
          } else {
            offset.setValue(1);
          }
        });
      }
    });
  }, [shifting, navigationState.routes, offsetsAnims, scale, tabsPositionAnims, sceneAnimationEasing, theme]);
  React.useEffect(function () {
    animateToIndex(navigationState.index);
  }, []);
  var prevNavigationState = React.useRef();
  React.useEffect(function () {
    offsetsAnims.forEach(function (offset, i) {
      var _prevNavigationState$;
      if (i === navigationState.index || i === ((_prevNavigationState$ = prevNavigationState.current) === null || _prevNavigationState$ === void 0 ? void 0 : _prevNavigationState$.index)) {
        offset.setValue(0);
      }
    });
    animateToIndex(navigationState.index);
  }, [navigationState.index, animateToIndex, offsetsAnims]);
  var handleTabPress = (0, _useLatestCallback.default)(function (event) {
    onTabPress === null || onTabPress === void 0 ? void 0 : onTabPress(event);
    if (event.defaultPrevented) {
      return;
    }
    var index = navigationState.routes.findIndex(function (route) {
      return event.route.key === route.key;
    });
    if (index !== navigationState.index) {
      prevNavigationState.current = navigationState;
      onIndexChange(index);
    }
  });
  var jumpTo = (0, _useLatestCallback.default)(function (key) {
    var index = navigationState.routes.findIndex(function (route) {
      return route.key === key;
    });
    prevNavigationState.current = navigationState;
    onIndexChange(index);
  });
  var routes = navigationState.routes;
  var colors = theme.colors;
  return React.createElement(_reactNative.View, {
    style: [styles.container, style],
    testID: testID
  }, React.createElement(_reactNative.View, {
    style: [styles.content, {
      backgroundColor: colors === null || colors === void 0 ? void 0 : colors.background
    }]
  }, routes.map(function (route, index) {
    var _prevNavigationState$2;
    if (getLazy({
      route: route
    }) !== false && !loaded.includes(route.key)) {
      return null;
    }
    var focused = navigationState.index === index;
    var previouslyFocused = ((_prevNavigationState$2 = prevNavigationState.current) === null || _prevNavigationState$2 === void 0 ? void 0 : _prevNavigationState$2.index) === index;
    var countAlphaOffscreen = sceneAnimationEnabled && (focused || previouslyFocused);
    var renderToHardwareTextureAndroid = sceneAnimationEnabled && focused;
    var opacity = sceneAnimationEnabled ? tabsPositionAnims[index].interpolate({
      inputRange: [-1, 0, 1],
      outputRange: [0, 1, 0]
    }) : focused ? 1 : 0;
    var offsetTarget = focused ? 0 : FAR_FAR_AWAY;
    var top = sceneAnimationEnabled ? offsetsAnims[index].interpolate({
      inputRange: [0, 1],
      outputRange: [0, offsetTarget]
    }) : offsetTarget;
    var left = sceneAnimationType === 'shifting' ? tabsPositionAnims[index].interpolate({
      inputRange: [-1, 0, 1],
      outputRange: [-50, 0, 50]
    }) : 0;
    var zIndex = focused ? 1 : 0;
    return React.createElement(_BottomNavigationRouteScreen.default, {
      key: route.key,
      pointerEvents: focused ? 'auto' : 'none',
      accessibilityElementsHidden: !focused,
      importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',
      index: index,
      visibility: opacity,
      style: [_reactNative.StyleSheet.absoluteFill, {
        zIndex: zIndex
      }],
      collapsable: false,
      removeClippedSubviews: _reactNative.Platform.OS === 'ios' ? navigationState.index !== index : true
    }, React.createElement(_reactNative.Animated.View, _extends({}, _reactNative.Platform.OS === 'android' && {
      needsOffscreenAlphaCompositing: countAlphaOffscreen
    }, {
      renderToHardwareTextureAndroid: renderToHardwareTextureAndroid,
      style: [styles.content, {
        opacity: opacity,
        transform: [{
          translateX: left
        }, {
          translateY: top
        }]
      }]
    }), renderScene({
      route: route,
      jumpTo: jumpTo
    })));
  })), React.createElement(_BottomNavigationBar.default, {
    navigationState: navigationState,
    renderIcon: renderIcon,
    renderLabel: renderLabel,
    renderTouchable: renderTouchable,
    getLabelText: getLabelText,
    getBadge: getBadge,
    getColor: getColor,
    getAccessibilityLabel: getAccessibilityLabel,
    getTestID: getTestID,
    activeColor: activeColor,
    inactiveColor: inactiveColor,
    keyboardHidesNavigationBar: keyboardHidesNavigationBar,
    style: barStyle,
    activeIndicatorStyle: activeIndicatorStyle,
    labeled: labeled,
    animationEasing: sceneAnimationEasing,
    onTabPress: handleTabPress,
    onTabLongPress: onTabLongPress,
    shifting: shifting,
    safeAreaInsets: safeAreaInsets,
    labelMaxFontSizeMultiplier: labelMaxFontSizeMultiplier,
    compact: compact,
    testID: `${testID}-bar`,
    theme: theme
  }));
};
BottomNavigation.SceneMap = function (scenes) {
  return function (_ref5) {
    var route = _ref5.route,
      jumpTo = _ref5.jumpTo;
    return React.createElement(SceneComponent, {
      key: route.key,
      component: scenes[route.key ? route.key : ''],
      route: route,
      jumpTo: jumpTo
    });
  };
};
BottomNavigation.Bar = _BottomNavigationBar.default;
var _default = BottomNavigation;
exports.default = _default;
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    overflow: 'hidden'
  },
  content: {
    flex: 1
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,