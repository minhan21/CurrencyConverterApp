27cc868aa6efed5211f6ef2532afcad1
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["index", "total", "style", "theme"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.CardCover = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _utils = require("./utils");
var _theming = require("../../core/theming");
var _colors = require("../../styles/themes/v2/colors");
var _splitStyles = require("../../utils/splitStyles");
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var CardCover = function CardCover(_ref) {
  var index = _ref.index,
    total = _ref.total,
    style = _ref.style,
    themeOverrides = _ref.theme,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var flattenedStyles = _reactNative.StyleSheet.flatten(style) || {};
  var _ref2 = (0, _splitStyles.splitStyles)(flattenedStyles, function (style) {
      return style.startsWith('border') && style.endsWith('Radius');
    }),
    _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
    borderRadiusStyles = _ref3[1];
  var coverStyle = (0, _utils.getCardCoverStyle)({
    theme: theme,
    index: index,
    total: total,
    borderRadiusStyles: borderRadiusStyles
  });
  return React.createElement(_reactNative.View, {
    style: [styles.container, coverStyle, style]
  }, React.createElement(_reactNative.Image, _extends({}, rest, {
    style: [styles.image, coverStyle],
    accessibilityIgnoresInvertColors: true
  })));
};
exports.CardCover = CardCover;
CardCover.displayName = 'Card.Cover';
var styles = _reactNative.StyleSheet.create({
  container: {
    height: 195,
    backgroundColor: _colors.grey200,
    overflow: 'hidden'
  },
  image: {
    flex: 1,
    height: undefined,
    width: undefined,
    padding: 16,
    justifyContent: 'flex-end'
  }
});
var _default = CardCover;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl91dGlscyIsIl90aGVtaW5nIiwiX2NvbG9ycyIsIl9zcGxpdFN0eWxlcyIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfZXh0ZW5kcyIsImFzc2lnbiIsImJpbmQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiYXBwbHkiLCJDYXJkQ292ZXIiLCJfcmVmIiwiaW5kZXgiLCJ0b3RhbCIsInN0eWxlIiwidGhlbWVPdmVycmlkZXMiLCJ0aGVtZSIsInJlc3QiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwiX2V4Y2x1ZGVkIiwidXNlSW50ZXJuYWxUaGVtZSIsImZsYXR0ZW5lZFN0eWxlcyIsIlN0eWxlU2hlZXQiLCJmbGF0dGVuIiwiX3JlZjIiLCJzcGxpdFN0eWxlcyIsInN0YXJ0c1dpdGgiLCJlbmRzV2l0aCIsIl9yZWYzIiwiX3NsaWNlZFRvQXJyYXkyIiwiYm9yZGVyUmFkaXVzU3R5bGVzIiwiY292ZXJTdHlsZSIsImdldENhcmRDb3ZlclN0eWxlIiwiY3JlYXRlRWxlbWVudCIsIlZpZXciLCJzdHlsZXMiLCJjb250YWluZXIiLCJJbWFnZSIsImltYWdlIiwiYWNjZXNzaWJpbGl0eUlnbm9yZXNJbnZlcnRDb2xvcnMiLCJleHBvcnRzIiwiZGlzcGxheU5hbWUiLCJjcmVhdGUiLCJoZWlnaHQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJncmV5MjAwIiwib3ZlcmZsb3ciLCJmbGV4IiwidW5kZWZpbmVkIiwid2lkdGgiLCJwYWRkaW5nIiwianVzdGlmeUNvbnRlbnQiLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NhcmQvQ2FyZENvdmVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLElBQUFBLEtBQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUVBLElBQUFFLE1BQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLFFBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLE9BQUEsR0FBQUosT0FBQTtBQUVBLElBQUFLLFlBQUEsR0FBQUwsT0FBQTtBQUFzRCxTQUFBTSx5QkFBQUMsV0FBQTtFQUFBLFdBQUFDLE9BQUE7RUFBQSxJQUFBQyxpQkFBQSxPQUFBRCxPQUFBO0VBQUEsSUFBQUUsZ0JBQUEsT0FBQUYsT0FBQTtFQUFBLFFBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxXQUFBO0lBQUEsT0FBQUEsV0FBQSxHQUFBRyxnQkFBQSxHQUFBRCxpQkFBQTtFQUFBLEdBQUFGLFdBQUE7QUFBQTtBQUFBLFNBQUFSLHdCQUFBWSxHQUFBLEVBQUFKLFdBQUE7RUFBQSxLQUFBQSxXQUFBLElBQUFJLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBO0lBQUEsT0FBQUQsR0FBQTtFQUFBO0VBQUEsSUFBQUEsR0FBQSxvQkFBQUEsR0FBQSx3QkFBQUEsR0FBQTtJQUFBO01BQUFFLE9BQUEsRUFBQUY7SUFBQTtFQUFBO0VBQUEsSUFBQUcsS0FBQSxHQUFBUix3QkFBQSxDQUFBQyxXQUFBO0VBQUEsSUFBQU8sS0FBQSxJQUFBQSxLQUFBLENBQUFDLEdBQUEsQ0FBQUosR0FBQTtJQUFBLE9BQUFHLEtBQUEsQ0FBQUUsR0FBQSxDQUFBTCxHQUFB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