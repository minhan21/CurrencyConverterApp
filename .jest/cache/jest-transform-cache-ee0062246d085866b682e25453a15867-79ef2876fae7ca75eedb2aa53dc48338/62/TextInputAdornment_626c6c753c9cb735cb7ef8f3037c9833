c021e0245ae9d3e1f4d11f150471a22b
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.getAdornmentConfig = getAdornmentConfig;
exports.getAdornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput;
var _react = _interopRequireDefault(require("react"));
var _enums = require("./enums");
var _TextInputAffix = _interopRequireWildcard(require("./TextInputAffix"));
var _TextInputIcon = _interopRequireWildcard(require("./TextInputIcon"));
var _helpers = require("../helpers");
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function getAdornmentConfig(_ref) {
  var left = _ref.left,
    right = _ref.right;
  var adornmentConfig = [];
  if (left || right) {
    [{
      side: _enums.AdornmentSide.Left,
      adornment: left
    }, {
      side: _enums.AdornmentSide.Right,
      adornment: right
    }].forEach(function (_ref2) {
      var side = _ref2.side,
        adornment = _ref2.adornment;
      if (adornment && _react.default.isValidElement(adornment)) {
        var type;
        if (adornment.type === _TextInputAffix.default) {
          type = _enums.AdornmentType.Affix;
        } else if (adornment.type === _TextInputIcon.default) {
          type = _enums.AdornmentType.Icon;
        }
        adornmentConfig.push({
          side: side,
          type: type
        });
      }
    });
  }
  return adornmentConfig;
}
function getAdornmentStyleAdjustmentForNativeInput(_ref3) {
  var adornmentConfig = _ref3.adornmentConfig,
    leftAffixWidth = _ref3.leftAffixWidth,
    rightAffixWidth = _ref3.rightAffixWidth,
    paddingHorizontal = _ref3.paddingHorizontal,
    _ref3$inputOffset = _ref3.inputOffset,
    inputOffset = _ref3$inputOffset === void 0 ? 0 : _ref3$inputOffset,
    mode = _ref3.mode,
    isV3 = _ref3.isV3;
  var _ref7 = (0, _helpers.getConstants)(isV3),
    OUTLINED_INPUT_OFFSET = _ref7.OUTLINED_INPUT_OFFSET,
    ADORNMENT_OFFSET = _ref7.ADORNMENT_OFFSET;
  if (adornmentConfig.length) {
    var adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(function (_ref4) {
      var type = _ref4.type,
        side = _ref4.side;
      var isLeftSide = side === _enums.AdornmentSide.Left;
      var inputModeAdornemntOffset = mode === _enums.InputMode.Outlined ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET : ADORNMENT_OFFSET;
      var paddingKey = `padding${captalize(side)}`;
      var affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;
      var padding = typeof paddingHorizontal === 'number' ? paddingHorizontal : inputModeAdornemntOffset;
      var offset = affixWidth + padding;
      var isAffix = type === _enums.AdornmentType.Affix;
      var marginKey = `margin${captalize(side)}`;
      return (0, _defineProperty2.default)((0, _defineProperty2.default)({}, marginKey, isAffix ? 0 : offset), paddingKey, isAffix ? offset : inputOffset);
    });
    var allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce(function (mergedStyles, currentStyle) {
      return _objectSpread(_objectSpread({}, mergedStyles), currentStyle);
    }, {});
    return allStyleAdjustmentsMerged;
  } else {
    return [{}];
  }
}
var captalize = function captalize(text) {
  return text.charAt(0).toUpperCase() + text.slice(1);
};
var TextInputAdornment = function TextInputAdornment(_ref5) {
  var adornmentConfig = _ref5.adornmentConfig,
    left = _ref5.left,
    right = _ref5.right,
    onAffixChange = _ref5.onAffixChange,
    textStyle = _ref5.textStyle,
    visible = _ref5.visible,
    topPosition = _ref5.topPosition,
    isTextInputFocused = _ref5.isTextInputFocused,
    forceFocus = _ref5.forceFocus,
    paddingHorizontal = _ref5.paddingHorizontal,
    maxFontSizeMultiplier = _ref5.maxFontSizeMultiplier,
    theme = _ref5.theme,
    disabled = _ref5.disabled;
  if (adornmentConfig.length) {
    return _react.default.createElement(_react.default.Fragment, null, adornmentConfig.map(function (_ref6) {
      var type = _ref6.type,
        side = _ref6.side;
      var inputAdornmentComponent;
      if (side === _enums.AdornmentSide.Left) {
        inputAdornmentComponent = left;
      } else if (side === _enums.AdornmentSide.Right) {
        inputAdornmentComponent = right;
      }
      var commonProps = {
        side: side,
        testID: `${side}-${type}-adornment`,
        isTextInputFocused: isTextInputFocused,
        paddingHorizontal: paddingHorizontal,
        disabled: disabled
      };
      if (type === _enums.AdornmentType.Icon) {
        return _react.default.createElement(_TextInputIcon.IconAdornment, _extends({}, commonProps, {
          theme: theme,
          key: side,
          icon: inputAdornmentComponent,
          topPosition: topPosition[_enums.AdornmentType.Icon],
          forceFocus: forceFocus
        }));
      } else if (type === _enums.AdornmentType.Affix) {
        return _react.default.createElement(_TextInputAffix.AffixAdornment, _extends({}, commonProps, {
          key: side,
          topPosition: topPosition[_enums.AdornmentType.Affix][side],
          affix: inputAdornmentComponent,
          textStyle: textStyle,
          onLayout: onAffixChange[side],
          visible: visible,
          maxFontSizeMultiplier: maxFontSizeMultiplier
        }));
      } else {
        return null;
      }
    }));
  } else {
    return null;
  }
};
var _default = TextInputAdornment;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,