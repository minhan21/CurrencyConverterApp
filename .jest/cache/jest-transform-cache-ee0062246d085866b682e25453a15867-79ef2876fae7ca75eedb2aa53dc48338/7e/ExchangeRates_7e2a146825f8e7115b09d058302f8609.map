{"file":"/Users/antran/Desktop/CurrencyConverterApp/src/components/ExchangeRates.tsx","mappings":"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","names":[],"sources":["/Users/antran/Desktop/CurrencyConverterApp/src/components/ExchangeRates.tsx"],"sourcesContent":["// src/components/ExchangeRates.tsx\nimport React, { useEffect, memo } from 'react';\nimport { View, StyleSheet, FlatList, ImageBackground } from 'react-native';\nimport {\n  useTheme,\n  Text,\n  ActivityIndicator,\n  Card,\n  Button,\n  Avatar,\n} from 'react-native-paper';\nimport useFetchRates from '../hooks/useFetchRates';\nimport { useRateContext } from '../context/RateContext';\n\ninterface ExchangeRatesProps {\n  baseCurrency: string;\n}\n\nconst ExchangeRates: React.FC<ExchangeRatesProps> = ({ baseCurrency }) => {\n  const { rates, loading, error, refetch } = useFetchRates(baseCurrency);\n  const { setRates } = useRateContext();\n  const { colors } = useTheme();\n\n  useEffect(() => {\n    setRates(rates);\n  }, [rates, setRates]);\n\n  const renderItem = ({ item }: { item: [string, number] }) => (\n    <Card style={styles.card}>\n      <Card.Content style={styles.cardContent}>\n        <Avatar.Text size={40} label={item[0][0]} style={styles.avatar} />\n        <View style={styles.textContainer}>\n          <Text style={styles.currency}>{item[0]}</Text>\n          <Text style={styles.rate}>{item[1]}</Text>\n        </View>\n      </Card.Content>\n    </Card>\n  );\n\n  if (loading) {\n    return (\n      <View style={styles.loadingContainer}>\n        <ActivityIndicator\n          animating={true}\n          color={colors.primary}\n          accessibilityLabel=\"Loading exchange rates\"\n        />\n        <Text>Loading exchange rates...</Text>\n      </View>\n    );\n  }\n\n  if (error) {\n    return (\n      <View style={styles.errorContainer}>\n        <Text\n          style={{ color: colors.error, marginBottom: 10 }}\n          accessibilityLabel=\"Error fetching exchange rates\"\n        >\n          {error}\n        </Text>\n        <Button\n          icon=\"refresh\"\n          mode=\"contained\"\n          onPress={refetch}\n          style={styles.refreshButton}\n        >\n          Try Again\n        </Button>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.background}>\n      <View\n        style={styles.container}\n        accessible\n        accessibilityLabel=\"Exchange rates\"\n      >\n        <Button\n          icon=\"refresh\"\n          mode=\"contained\"\n          onPress={refetch}\n          style={styles.refreshButton}\n          labelStyle={styles.refreshButtonText}\n        >\n          Refresh Rates\n        </Button>\n        <FlatList\n          data={Object.entries(rates)}\n          renderItem={renderItem}\n          keyExtractor={(item) => item[0]}\n          refreshing={loading}\n          onRefresh={refetch}\n          contentContainerStyle={styles.list}\n        />\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  background: {\n    flex: 1,\n    resizeMode: 'cover',\n    justifyContent: 'center',\n  },\n  container: {\n    flex: 1,\n    backgroundColor: 'rgba(255, 255, 255, 0.9)',\n    padding: 10,\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n  },\n  refreshButton: {\n    marginBottom: 10,\n    backgroundColor: '#6200ee',\n  },\n  refreshButtonText: {\n    color: '#fff',\n    fontWeight: 'bold',\n  },\n  list: {\n    paddingBottom: 100,\n  },\n  card: {\n    marginVertical: 5,\n    borderRadius: 10,\n    elevation: 3,\n  },\n  cardContent: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  avatar: {\n    backgroundColor: '#6200ee',\n  },\n  textContainer: {\n    marginLeft: 15,\n  },\n  currency: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: '#333',\n  },\n  rate: {\n    fontSize: 16,\n    color: '#555',\n  },\n});\n\nexport default memo(ExchangeRates);\n"],"version":3}