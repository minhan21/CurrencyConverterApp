{"version":3,"names":["_invariant","_interopRequireDefault","require","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","CellRenderMask","exports","numCells","_classCallCheck2","invariant","_numCells","_regions","first","last","isSpacer","_createClass2","key","value","enumerateRegions","addCells","cells","_this$_regions","_this$_findRegion","_findRegion","_this$_findRegion2","_slicedToArray2","firstIntersect","firstIntersectIdx","_this$_findRegion3","_this$_findRegion4","lastIntersect","lastIntersectIdx","newLeadRegion","newTailRegion","newMainRegion","replacementRegions","concat","numRegionsToDelete","splice","_toConsumableArray2","equals","other","every","region","i","cellIdx","firstIdx","lastIdx","middleIdx","Math","floor","middleRegion"],"sources":["CellRenderMask.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport invariant from 'invariant';\n\nexport type CellRegion = {\n  first: number,\n  last: number,\n  isSpacer: boolean,\n};\n\nexport class CellRenderMask {\n  _numCells: number;\n  _regions: Array<CellRegion>;\n\n  constructor(numCells: number) {\n    invariant(\n      numCells >= 0,\n      'CellRenderMask must contain a non-negative number os cells',\n    );\n\n    this._numCells = numCells;\n\n    if (numCells === 0) {\n      this._regions = [];\n    } else {\n      this._regions = [\n        {\n          first: 0,\n          last: numCells - 1,\n          isSpacer: true,\n        },\n      ];\n    }\n  }\n\n  enumerateRegions(): $ReadOnlyArray<CellRegion> {\n    return this._regions;\n  }\n\n  addCells(cells: {first: number, last: number}): void {\n    invariant(\n      cells.first >= 0 &&\n        cells.first < this._numCells &&\n        cells.last >= -1 &&\n        cells.last < this._numCells &&\n        cells.last >= cells.first - 1,\n      'CellRenderMask.addCells called with invalid cell range',\n    );\n\n    // VirtualizedList uses inclusive ranges, where zero-count states are\n    // possible. E.g. [0, -1] for no cells, starting at 0.\n    if (cells.last < cells.first) {\n      return;\n    }\n\n    const [firstIntersect, firstIntersectIdx] = this._findRegion(cells.first);\n    const [lastIntersect, lastIntersectIdx] = this._findRegion(cells.last);\n\n    // Fast-path if the cells to add are already all present in the mask. We\n    // will otherwise need to do some mutation.\n    if (firstIntersectIdx === lastIntersectIdx && !firstIntersect.isSpacer) {\n      return;\n    }\n\n    // We need to replace the existing covered regions with 1-3 new regions\n    // depending whether we need to split spacers out of overlapping regions.\n    const newLeadRegion: Array<CellRegion> = [];\n    const newTailRegion: Array<CellRegion> = [];\n    const newMainRegion: CellRegion = {\n      ...cells,\n      isSpacer: false,\n    };\n\n    if (firstIntersect.first < newMainRegion.first) {\n      if (firstIntersect.isSpacer) {\n        newLeadRegion.push({\n          first: firstIntersect.first,\n          last: newMainRegion.first - 1,\n          isSpacer: true,\n        });\n      } else {\n        newMainRegion.first = firstIntersect.first;\n      }\n    }\n\n    if (lastIntersect.last > newMainRegion.last) {\n      if (lastIntersect.isSpacer) {\n        newTailRegion.push({\n          first: newMainRegion.last + 1,\n          last: lastIntersect.last,\n          isSpacer: true,\n        });\n      } else {\n        newMainRegion.last = lastIntersect.last;\n      }\n    }\n\n    const replacementRegions: Array<CellRegion> = [\n      ...newLeadRegion,\n      newMainRegion,\n      ...newTailRegion,\n    ];\n    const numRegionsToDelete = lastIntersectIdx - firstIntersectIdx + 1;\n    this._regions.splice(\n      firstIntersectIdx,\n      numRegionsToDelete,\n      ...replacementRegions,\n    );\n  }\n\n  numCells(): number {\n    return this._numCells;\n  }\n\n  equals(other: CellRenderMask): boolean {\n    return (\n      this._numCells === other._numCells &&\n      this._regions.length === other._regions.length &&\n      this._regions.every(\n        (region, i) =>\n          region.first === other._regions[i].first &&\n          region.last === other._regions[i].last &&\n          region.isSpacer === other._regions[i].isSpacer,\n      )\n    );\n  }\n\n  _findRegion(cellIdx: number): [CellRegion, number] {\n    let firstIdx = 0;\n    let lastIdx = this._regions.length - 1;\n\n    while (firstIdx <= lastIdx) {\n      const middleIdx = Math.floor((firstIdx + lastIdx) / 2);\n      const middleRegion = this._regions[middleIdx];\n\n      if (cellIdx >= middleRegion.first && cellIdx <= middleRegion.last) {\n        return [middleRegion, middleIdx];\n      } else if (cellIdx < middleRegion.first) {\n        lastIdx = middleIdx - 1;\n      } else if (cellIdx > middleRegion.last) {\n        firstIdx = middleIdx + 1;\n      }\n    }\n\n    invariant(false, `A region was not found containing cellIdx ${cellIdx}`);\n  }\n}\n"],"mappings":"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","ignoreList":[]}