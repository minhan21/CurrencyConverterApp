d4ed351c10bafc15d0ce7ce1fd7abed1
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["size", "source", "style", "onError", "onLayout", "onLoad", "onLoadEnd", "onLoadStart", "onProgress", "theme", "testID"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _theming = require("../../core/theming");
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var defaultSize = 64;
var AvatarImage = function AvatarImage(_ref) {
  var _ref$size = _ref.size,
    size = _ref$size === void 0 ? defaultSize : _ref$size,
    source = _ref.source,
    style = _ref.style,
    onError = _ref.onError,
    onLayout = _ref.onLayout,
    onLoad = _ref.onLoad,
    onLoadEnd = _ref.onLoadEnd,
    onLoadStart = _ref.onLoadStart,
    onProgress = _ref.onProgress,
    themeOverrides = _ref.theme,
    testID = _ref.testID,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var _ref2 = (0, _theming.useInternalTheme)(themeOverrides),
    colors = _ref2.colors;
  var _ref3 = _reactNative.StyleSheet.flatten(style) || {},
    _ref3$backgroundColor = _ref3.backgroundColor,
    backgroundColor = _ref3$backgroundColor === void 0 ? colors === null || colors === void 0 ? void 0 : colors.primary : _ref3$backgroundColor;
  return React.createElement(_reactNative.View, _extends({
    style: [{
      width: size,
      height: size,
      borderRadius: size / 2,
      backgroundColor: backgroundColor
    }, style]
  }, rest), typeof source === 'function' && source({
    size: size
  }), typeof source !== 'function' && React.createElement(_reactNative.Image, {
    testID: testID,
    source: source,
    style: {
      width: size,
      height: size,
      borderRadius: size / 2
    },
    onError: onError,
    onLayout: onLayout,
    onLoad: onLoad,
    onLoadEnd: onLoadEnd,
    onLoadStart: onLoadStart,
    onProgress: onProgress,
    accessibilityIgnoresInvertColors: true
  }));
};
AvatarImage.displayName = 'Avatar.Image';
var _default = AvatarImage;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl90aGVtaW5nIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIl9leHRlbmRzIiwiYXNzaWduIiwiYmluZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJhcHBseSIsImRlZmF1bHRTaXplIiwiQXZhdGFySW1hZ2UiLCJfcmVmIiwiX3JlZiRzaXplIiwic2l6ZSIsInN0eWxlIiwib25FcnJvciIsIm9uTGF5b3V0Iiwib25Mb2FkIiwib25Mb2FkRW5kIiwib25Mb2FkU3RhcnQiLCJvblByb2dyZXNzIiwidGhlbWVPdmVycmlkZXMiLCJ0aGVtZSIsInRlc3RJRCIsInJlc3QiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwiX2V4Y2x1ZGVkIiwiX3JlZjIiLCJ1c2VJbnRlcm5hbFRoZW1lIiwiY29sb3JzIiwiX3JlZjMiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsIl9yZWYzJGJhY2tncm91bmRDb2xvciIsImJhY2tncm91bmRDb2xvciIsInByaW1hcnkiLCJjcmVhdGVFbGVtZW50IiwiVmlldyIsIndpZHRoIiwiaGVpZ2h0IiwiYm9yZGVyUmFkaXVzIiwiSW1hZ2UiLCJhY2Nlc3NpYmlsaXR5SWdub3Jlc0ludmVydENvbG9ycyIsImRpc3BsYXlOYW1lIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvQXZhdGFyL0F2YXRhckltYWdlLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsSUFBQUEsS0FBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBVUEsSUFBQUUsUUFBQSxHQUFBRixPQUFBO0FBQXNELFNBQUFHLHlCQUFBQyxXQUFBO0VBQUEsV0FBQUMsT0FBQTtFQUFBLElBQUFDLGlCQUFBLE9BQUFELE9BQUE7RUFBQSxJQUFBRSxnQkFBQSxPQUFBRixPQUFBO0VBQUEsUUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLFdBQUE7SUFBQSxPQUFBQSxXQUFBLEdBQUFHLGdCQUFBLEdBQUFELGlCQUFBO0VBQUEsR0FBQUYsV0FBQTtBQUFBO0FBQUEsU0FBQUwsd0JBQUFTLEdBQUEsRUFBQUosV0FBQTtFQUFBLEtBQUFBLFdBQUEsSUFBQUksR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUE7SUFBQSxPQUFBRCxHQUFBO0VBQUE7RUFBQSxJQUFBQSxHQUFBLG9CQUFBQSxHQUFBLHdCQUFBQSxHQUFBO0lBQUE7TUFBQUUsT0FBQSxFQUFBRjtJQUFBO0VBQUE7RUFBQSxJQUFBRyxLQUFBLEdBQUFSLHdCQUFBLENBQUFDLFdBQUE7RUFBQSxJQUFBTyxLQUFBLElBQUFBLEtBQUEsQ0FBQUMsR0FBQSxDQUFBSixHQUFBO0lBQUEsT0FBQUcsS0FBQSxDQUFBRSxHQUFBLENBQUFMLEdBQUE7RUFBQTtFQUFBLElBQUFNLE1BQUE7RUFBQSxJQUFBQyxxQkFBQSxHQUFBQyxNQUFBLENBQUFDLGNBQUEsSUFBQUQsTUFBQSxDQUFBRSx3QkFBQTtFQUFBLFNBQUFDLEdBQUEsSUFBQVgsR0FBQTtJQUFBLElBQUFXLEdBQUEsa0JBQUFILE1BQUEsQ0FBQUksU0FBQSxDQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWQsR0FBQSxFQUFBVyxHQUFBO01BQUEsSUFBQUksSUFBQSxHQUFBUixxQkFBQSxHQUFBQyxNQUFBLENBQUFFLHdCQUFBLENBQUFWLEdBQUEsRUFBQVcsR0FBQTtNQUFBLElBQUFJLElBQUEsS0FBQUEsSUFBQSxDQUFBVixHQUFBLElBQUFVLElBQUEsQ0FBQUMsR0FBQTtRQUFBUixNQUFBLENBQUFDLGNBQUEsQ0FBQUgsTUFBQSxFQUFBSyxHQUFBLEVBQUFJLElBQUE7TUFBQTtRQUFBVCxNQUFBLENBQUFLLEdBQUEsSUFBQVgsR0FBQSxDQUFBVyxHQUFBO01BQUE7SUFBQTtFQUFBO0VBQUFMLE1BQUEsQ0FBQUosT0FBQSxHQUFBRixHQUFBO0VBQUEsSUFBQUcsS0FBQTtJQUFBQSxLQUFBLENBQUFhLEdBQUEsQ0FBQWhCLEdBQUEsRUFBQU0sTUFBQTtFQUFBO0VBQUEsT0FBQUEsTUFBQTtBQUFBO0FBQUEsU0FBQVcsU0FBQTtFQUFBQSxRQUFBLEdBQUFULE1BQUEsQ0FBQVUsTUFBQSxHQUFBVixNQUFBLENBQUFVLE1BQUEsQ0FBQUMsSUFBQSxlQUFBQyxNQUFBO0lBQUEsU0FBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxFQUFBRixDQUFBO01BQUEsSUFBQUcsTUFBQSxHQUFBRixTQUFBLENBQUFELENBQUE7TUFBQSxTQUFBVixHQUFBLElBQUFhLE1BQUE7UUFBQSxJQUFBaEIsTUFBQSxDQUFBSSxTQUFBLENBQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBVSxNQUFBLEVBQUFiLEdBQUE7VUFBQVMsTUFBQSxDQUFBVCxHQUFBLElBQUFhLE1BQUEsQ0FBQWIsR0FBQTtRQUFBO01BQUE7SUFBQTtJQUFBLE9BQUFTLE1BQUE7RUFBQTtFQUFBLE9BQUFILFFBQUEsQ0FBQVEsS0FBQSxPQUFBSCxTQUFBO0FBQUE7QUFHdEQsSUFBTUksV0FBVyxHQUFHLEVBQUU7QUE4RHRCLElBQU1DLFdBQVcsR0FBRyxTQUFkQSxXQUFXQSxDQUFHQyxJQUFBLEVBYVA7RUFBQSxJQUFBQyxTQUFBLEdBQUxELElBQUEsQ0FaTkUsSUFBSTtJQUFKQSxJQUFJLEdBQUFELFNBQUEsY0FBR0gsV0FBVyxHQUFBRyxTQUFBO0lBQ2xCTCxNQUFNLEdBV0FJLElBQUEsQ0FYTkosTUFBTTtJQUNOTyxLQUFLLEdBVUNILElBQUEsQ0FWTkcsS0FBSztJQUNMQyxPQUFPLEdBU0RKLElBQUEsQ0FUTkksT0FBTztJQUNQQyxRQUFRLEdBUUZMLElBQUEsQ0FSTkssUUFBUTtJQUNSQyxNQUFNLEdBT0FOLElBQUEsQ0FQTk0sTUFBTTtJQUNOQyxTQUFTLEdBTUhQLElBQUEsQ0FOTk8sU0FBUztJQUNUQyxXQUFXLEdBS0xSLElBQUEsQ0FMTlEsV0FBVztJQUNYQyxVQUFVLEdBSUpULElBQUEsQ0FKTlMsVUFBVTtJQUNIQyxjQUFjLEdBR2ZWLElBQUEsQ0FITlcsS0FBSztJQUNMQyxNQUFNLEdBRUFaLElBQUEsQ0FGTlksTUFBTTtJQUNIQyxJQUFBLE9BQUFDLHlCQUFBLENBQUF4QyxPQUFBLEVBQ0cwQixJQUFBLEVBQUFlLFNBQUE7RUFDTixJQUFBQyxLQUFBLEdBQW1CLElBQUFsRCxRQUFBLENBQUFtRCxnQkFBZ0IsRUFBQ1AsY0FBYyxDQUFDO0lBQTNDUSxNQUFBLEdBQUFGLEtBQUEsQ0FBQUUsTUFBQTtFQUNSLElBQUFDLEtBQUEsR0FBOEN0RCxZQUFBLENBQUF1RCxVQUFVLENBQUNDLE9BQU8sQ0FBQ2xCLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUFBbUIscUJBQUEsR0FBQUgsS0FBQSxDQUFyRUksZUFBZTtJQUFmQSxlQUFlLEdBQUFELHFCQUFBLGNBQUdKLE1BQU0sYUFBTkEsTUFBTSx1QkFBTkEsTUFBTSxDQUFFTSxPQUFBLEdBQUFGLHFCQUFBO0VBRWxDLE9BQ0U1RCxLQUFBLENBQUErRCxhQUFBLENBQUM1RCxZQUFBLENBQUE2RCxJQUFJLEVBQUFyQyxRQUFBO0lBQ0hjLEtBQUssRUFBRSxDQUNMO01BQ0V3QixLQUFLLEVBQUV6QixJQUFJO01BQ1gwQixNQUFNLEVBQUUxQixJQUFJO01BQ1oyQixZQUFZLEVBQUUzQixJQUFJLEdBQUcsQ0FBQztNQUN0QnFCLGVBQUEsRUFBQUE7SUFDRixDQUFDLEVBQ0RwQixLQUFLO0VBQ0wsR0FDRVUsSUFBSSxHQUVQLE9BQU9qQixNQUFNLEtBQUssVUFBVSxJQUFJQSxNQUFNLENBQUM7SUFBRU0sSUFBQSxFQUFBQTtFQUFLLENBQUMsQ0FBQyxFQUNoRCxPQUFPTixNQUFNLEtBQUssVUFBVSxJQUMzQmxDLEtBQUEsQ0FBQStELGFBQUEsQ0FBQzVELFlBQUEsQ0FBQWlFLEtBQUs7SUFDSmxCLE1BQU0sRUFBRUEsTUFBTztJQUNmaEIsTUFBTSxFQUFFQSxNQUFPO0lBQ2ZPLEtBQUssRUFBRTtNQUFFd0IsS0FBSyxFQUFFekIsSUFBSTtNQUFFMEIsTUFBTSxFQUFFMUIsSUFBSTtNQUFFMkIsWUFBWSxFQUFFM0IsSUFBSSxHQUFHO0lBQUUsQ0FBRTtJQUM3REUsT0FBTyxFQUFFQSxPQUFRO0lBQ2pCQyxRQUFRLEVBQUVBLFFBQVM7SUFDbkJDLE1BQU0sRUFBRUEsTUFBTztJQUNmQyxTQUFTLEVBQUVBLFNBQVU7SUFDckJDLFdBQVcsRUFBRUEsV0FBWTtJQUN6QkMsVUFBVSxFQUFFQSxVQUFXO0lBQ3ZCc0IsZ0NBQWdDO0VBQUEsQ0FDakMsQ0FFQyxDQUFDO0FBRVgsQ0FBQztBQUVEaEMsV0FBVyxDQUFDaUMsV0FBVyxHQUFHLGNBQWM7QUFBQyxJQUFBQyxRQUFBLEdBRTFCbEMsV0FBVztBQUFBbUMsT0FBQSxDQUFBNUQsT0FBQSxHQUFBMkQsUUFBQSIsImlnbm9yZUxpc3QiOltdfQ==