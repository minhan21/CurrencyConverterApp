277388750c52612a2b8ba6b4527a7cb0
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["disabled", "onPress", "theme", "status", "value", "testID"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RadioButtonIOS = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _RadioButtonGroup = require("./RadioButtonGroup");
var _utils = require("./utils");
var _theming = require("../../core/theming");
var _utils2 = require("../Checkbox/utils");
var _MaterialCommunityIcon = _interopRequireDefault(require("../MaterialCommunityIcon"));
var _TouchableRipple = _interopRequireDefault(require("../TouchableRipple/TouchableRipple"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var RadioButtonIOS = function RadioButtonIOS(_ref) {
  var disabled = _ref.disabled,
    onPress = _ref.onPress,
    themeOverrides = _ref.theme,
    status = _ref.status,
    value = _ref.value,
    testID = _ref.testID,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  return React.createElement(_RadioButtonGroup.RadioButtonContext.Consumer, null, function (context) {
    var checked = (0, _utils.isChecked)({
      contextValue: context === null || context === void 0 ? void 0 : context.value,
      status: status,
      value: value
    }) === 'checked';
    var _ref2 = (0, _utils2.getSelectionControlIOSColor)({
        theme: theme,
        disabled: disabled,
        customColor: rest.color
      }),
      checkedColor = _ref2.checkedColor,
      rippleColor = _ref2.rippleColor;
    var opacity = checked ? 1 : 0;
    return React.createElement(_TouchableRipple.default, _extends({}, rest, {
      borderless: true,
      rippleColor: rippleColor,
      onPress: disabled ? undefined : function (event) {
        (0, _utils.handlePress)({
          onPress: onPress,
          value: value,
          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,
          event: event
        });
      },
      accessibilityRole: "radio",
      accessibilityState: {
        disabled: disabled,
        checked: checked
      },
      accessibilityLiveRegion: "polite",
      style: styles.container,
      testID: testID,
      theme: theme
    }), React.createElement(_reactNative.View, {
      style: {
        opacity: opacity
      }
    }, React.createElement(_MaterialCommunityIcon.default, {
      allowFontScaling: false,
      name: "check",
      size: 24,
      color: checkedColor,
      direction: "ltr"
    })));
  });
};
exports.RadioButtonIOS = RadioButtonIOS;
RadioButtonIOS.displayName = 'RadioButton.IOS';
var styles = _reactNative.StyleSheet.create({
  container: {
    borderRadius: 18,
    padding: 6
  }
});
var _default = RadioButtonIOS;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9SYWRpb0J1dHRvbkdyb3VwIiwiX3V0aWxzIiwiX3RoZW1pbmciLCJfdXRpbHMyIiwiX01hdGVyaWFsQ29tbXVuaXR5SWNvbiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfVG91Y2hhYmxlUmlwcGxlIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIl9leHRlbmRzIiwiYXNzaWduIiwiYmluZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJhcHBseSIsIlJhZGlvQnV0dG9uSU9TIiwiX3JlZiIsImRpc2FibGVkIiwib25QcmVzcyIsInRoZW1lT3ZlcnJpZGVzIiwidGhlbWUiLCJzdGF0dXMiLCJ2YWx1ZSIsInRlc3RJRCIsInJlc3QiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwiX2V4Y2x1ZGVkIiwidXNlSW50ZXJuYWxUaGVtZSIsImNyZWF0ZUVsZW1lbnQiLCJSYWRpb0J1dHRvbkNvbnRleHQiLCJDb25zdW1lciIsImNvbnRleHQiLCJjaGVja2VkIiwiaXNDaGVja2VkIiwiY29udGV4dFZhbHVlIiwiX3JlZjIiLCJnZXRTZWxlY3Rpb25Db250cm9sSU9TQ29sb3IiLCJjdXN0b21Db2xvciIsImNvbG9yIiwiY2hlY2tlZENvbG9yIiwicmlwcGxlQ29sb3IiLCJvcGFjaXR5IiwiYm9yZGVybGVzcyIsInVuZGVmaW5lZCIsImV2ZW50IiwiaGFuZGxlUHJlc3MiLCJvblZhbHVlQ2hhbmdlIiwiYWNjZXNzaWJpbGl0eVJvbGUiLCJhY2Nlc3NpYmlsaXR5U3RhdGUiLCJhY2Nlc3NpYmlsaXR5TGl2ZVJlZ2lvbiIsInN0eWxlIiwic3R5bGVzIiwiY29udGFpbmVyIiwiVmlldyIsImFsbG93Rm9udFNjYWxpbmciLCJuYW1lIiwic2l6ZSIsImRpcmVjdGlvbiIsImV4cG9ydHMiLCJkaXNwbGF5TmFtZSIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJib3JkZXJSYWRpdXMiLCJwYWRkaW5nIiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9SYWRpb0J1dHRvbi9SYWRpb0J1dHRvbklPUy50c3giXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLElBQUFBLEtBQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUVBLElBQUFFLGlCQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxNQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxRQUFBLEdBQUFKLE9BQUE7QUFFQSxJQUFBSyxPQUFBLEdBQUFMLE9BQUE7QUFDQSxJQUFBTSxzQkFBQSxHQUFBQyxzQkFBQSxDQUFBUCxPQUFBO0FBQ0EsSUFBQVEsZ0JBQUEsR0FBQUQsc0JBQUEsQ0FBQVAsT0FBQTtBQUFpRSxTQUFBTyx1QkFBQUUsR0FBQTtFQUFBLE9BQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUE7SUFBQUUsT0FBQSxFQUFBRjtFQUFBO0FBQUE7QUFBQSxTQUFBRyx5QkFBQUMsV0FBQTtFQUFBLFdBQUFDLE9BQUE7RUFBQSxJQUFBQyxpQkFBQSxPQUFBRCxPQUFBO0VBQUEsSUFBQUUsZ0JBQUEsT0FBQUYsT0FBQTtFQUFBLFFBQUFGLHdCQUFBLFlBQUFBLHlC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