{"file":"/Users/antran/Desktop/CurrencyConverterApp/node_modules/@react-native/js-polyfills/error-guard.js","mappings":"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","names":[],"sources":["/Users/antran/Desktop/CurrencyConverterApp/node_modules/@react-native/js-polyfills/error-guard.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n * @polyfill\n */\n\nlet _inGuard = 0;\n\ntype ErrorHandler = (error: mixed, isFatal: boolean) => void;\ntype Fn<Args, Return> = (...Args) => Return;\n\n/**\n * This is the error handler that is called when we encounter an exception\n * when loading a module. This will report any errors encountered before\n * ExceptionsManager is configured.\n */\nlet _globalHandler: ErrorHandler = function onError(\n  e: mixed,\n  isFatal: boolean,\n) {\n  throw e;\n};\n\n/**\n * The particular require runtime that we are using looks for a global\n * `ErrorUtils` object and if it exists, then it requires modules with the\n * error handler specified via ErrorUtils.setGlobalHandler by calling the\n * require function with applyWithGuard. Since the require module is loaded\n * before any of the modules, this ErrorUtils must be defined (and the handler\n * set) globally before requiring anything.\n */\nconst ErrorUtils = {\n  setGlobalHandler(fun: ErrorHandler): void {\n    _globalHandler = fun;\n  },\n  getGlobalHandler(): ErrorHandler {\n    return _globalHandler;\n  },\n  reportError(error: mixed): void {\n    _globalHandler && _globalHandler(error, false);\n  },\n  reportFatalError(error: mixed): void {\n    // NOTE: This has an untyped call site in Metro.\n    _globalHandler && _globalHandler(error, true);\n  },\n  applyWithGuard<TArgs: $ReadOnlyArray<mixed>, TOut>(\n    fun: Fn<TArgs, TOut>,\n    context?: ?mixed,\n    args?: ?TArgs,\n    // Unused, but some code synced from www sets it to null.\n    unused_onError?: null,\n    // Some callers pass a name here, which we ignore.\n    unused_name?: ?string,\n  ): ?TOut {\n    try {\n      _inGuard++;\n      /* $FlowFixMe[incompatible-call] : TODO T48204745 (1) apply(context,\n       * null) is fine. (2) array -> rest array should work */\n      /* $FlowFixMe[incompatible-type] : TODO T48204745 (1) apply(context,\n       * null) is fine. (2) array -> rest array should work */\n      return fun.apply(context, args);\n    } catch (e) {\n      ErrorUtils.reportError(e);\n    } finally {\n      _inGuard--;\n    }\n    return null;\n  },\n  applyWithGuardIfNeeded<TArgs: $ReadOnlyArray<mixed>, TOut>(\n    fun: Fn<TArgs, TOut>,\n    context?: ?mixed,\n    args?: ?TArgs,\n  ): ?TOut {\n    if (ErrorUtils.inGuard()) {\n      /* $FlowFixMe[incompatible-call] : TODO T48204745 (1) apply(context,\n       * null) is fine. (2) array -> rest array should work */\n      /* $FlowFixMe[incompatible-type] : TODO T48204745 (1) apply(context,\n       * null) is fine. (2) array -> rest array should work */\n      return fun.apply(context, args);\n    } else {\n      ErrorUtils.applyWithGuard(fun, context, args);\n    }\n    return null;\n  },\n  inGuard(): boolean {\n    return !!_inGuard;\n  },\n  guard<TArgs: $ReadOnlyArray<mixed>, TOut>(\n    fun: Fn<TArgs, TOut>,\n    name?: ?string,\n    context?: ?mixed,\n  ): ?(...TArgs) => ?TOut {\n    // TODO: (moti) T48204753 Make sure this warning is never hit and remove it - types\n    // should be sufficient.\n    if (typeof fun !== 'function') {\n      console.warn('A function must be passed to ErrorUtils.guard, got ', fun);\n      return null;\n    }\n    const guardName = name ?? fun.name ?? '<generated guard>';\n    /* $FlowFixMe[missing-this-annot] The 'this' type annotation(s) required by\n     * Flow's LTI update could not be added via codemod */\n    function guarded(...args: TArgs): ?TOut {\n      return ErrorUtils.applyWithGuard(\n        fun,\n        context ?? this,\n        args,\n        null,\n        guardName,\n      );\n    }\n\n    return guarded;\n  },\n};\n\nglobal.ErrorUtils = ErrorUtils;\n\nexport type ErrorUtilsT = typeof ErrorUtils;\n"],"version":3}