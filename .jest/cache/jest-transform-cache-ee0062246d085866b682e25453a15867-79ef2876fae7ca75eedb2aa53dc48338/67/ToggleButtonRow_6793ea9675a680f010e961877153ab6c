5c8686f2c3c3ed9c944ca0a5145b5389
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ToggleButtonRow = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _ToggleButton = _interopRequireDefault(require("./ToggleButton"));
var _ToggleButtonGroup = _interopRequireDefault(require("./ToggleButtonGroup"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
var ToggleButtonRow = function ToggleButtonRow(_ref) {
  var value = _ref.value,
    onValueChange = _ref.onValueChange,
    children = _ref.children,
    style = _ref.style;
  var count = React.Children.count(children);
  return React.createElement(_ToggleButtonGroup.default, {
    value: value,
    onValueChange: onValueChange
  }, React.createElement(_reactNative.View, {
    style: [styles.row, style]
  }, React.Children.map(children, function (child, i) {
    if (child && child.type === _ToggleButton.default) {
      return React.cloneElement(child, {
        style: [styles.button, i === 0 ? styles.first : i === count - 1 ? styles.last : styles.middle, child.props.style]
      });
    }
    return child;
  })));
};
exports.ToggleButtonRow = ToggleButtonRow;
ToggleButtonRow.displayName = 'ToggleButton.Row';
var styles = _reactNative.StyleSheet.create({
  row: {
    flexDirection: 'row'
  },
  button: {
    borderWidth: _reactNative.StyleSheet.hairlineWidth
  },
  first: {
    borderTopRightRadius: 0,
    borderBottomRightRadius: 0
  },
  middle: {
    borderRadius: 0,
    borderLeftWidth: 0
  },
  last: {
    borderLeftWidth: 0,
    borderTopLeftRadius: 0,
    borderBottomLeftRadius: 0
  }
});
var _default = ToggleButtonRow;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9Ub2dnbGVCdXR0b24iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX1RvZ2dsZUJ1dHRvbkdyb3VwIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIlRvZ2dsZUJ1dHRvblJvdyIsIl9yZWYiLCJ2YWx1ZSIsIm9uVmFsdWVDaGFuZ2UiLCJjaGlsZHJlbiIsInN0eWxlIiwiY291bnQiLCJDaGlsZHJlbiIsImNyZWF0ZUVsZW1lbnQiLCJWaWV3Iiwic3R5bGVzIiwicm93IiwibWFwIiwiY2hpbGQiLCJpIiwidHlwZSIsImNsb25lRWxlbWVudCIsImJ1dHRvbiIsImZpcnN0IiwibGFzdCIsIm1pZGRsZSIsInByb3BzIiwiZXhwb3J0cyIsImRpc3BsYXlOYW1lIiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsImZsZXhEaXJlY3Rpb24iLCJib3JkZXJXaWR0aCIsImhhaXJsaW5lV2lkdGgiLCJib3JkZXJUb3BSaWdodFJhZGl1cyIsImJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzIiwiYm9yZGVyUmFkaXVzIiwiYm9yZGVyTGVmdFdpZHRoIiwiYm9yZGVyVG9wTGVmdFJhZGl1cyIsImJvcmRlckJvdHRvbUxlZnRSYWRpdXMiLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRz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STtJQUFDSixLQUFLLEVBQUUsQ0FBQ0ssTUFBTSxDQUFDQyxHQUFHLEVBQUVOLEtBQUs7RUFBRSxHQUM5QmxDLEtBQUssQ0FBQ29DLFFBQVEsQ0FBQ0ssR0FBRyxDQUFDUixRQUFRLEVBQUUsVUFBQ1MsS0FBSyxFQUFFQyxDQUFDLEVBQUs7SUFFMUMsSUFBSUQsS0FBSyxJQUFJQSxLQUFLLENBQUNFLElBQUksS0FBS3hDLGFBQUEsQ0FBQUssT0FBWSxFQUFFO01BRXhDLE9BQU9ULEtBQUssQ0FBQzZDLFlBQVksQ0FBQ0gsS0FBSyxFQUFFO1FBQy9CUixLQUFLLEVBQUUsQ0FDTEssTUFBTSxDQUFDTyxNQUFNLEVBQ2JILENBQUMsS0FBSyxDQUFDLEdBQ0hKLE1BQU0sQ0FBQ1EsS0FBSyxHQUNaSixDQUFDLEtBQUtSLEtBQUssR0FBRyxDQUFDLEdBQ2ZJLE1BQU0sQ0FBQ1MsSUFBSSxHQUNYVCxNQUFNLENBQUNVLE1BQU0sRUFFakJQLEtBQUssQ0FBQ1EsS0FBSyxDQUFDaEIsS0FBSztNQUVyQixDQUFDLENBQUM7SUFDSjtJQUVBLE9BQU9RLEtBQUs7RUFDZCxDQUFDLENBQ0csQ0FDVyxDQUFDO0FBRXhCLENBQUM7QUFBQ1MsT0FBQSxDQUFBdEIsZUFBQSxHQUFBQSxlQUFBO0FBRUZBLGVBQWUsQ0FBQ3VCLFdBQVcsR0FBRyxrQkFBa0I7QUFFaEQsSUFBTWIsTUFBTSxHQUFHcEMsWUFBQSxDQUFBa0QsVUFBVSxDQUFDQyxNQUFNLENBQUM7RUFDL0JkLEdBQUcsRUFBRTtJQUNIZSxhQUFhLEVBQUU7RUFDakIsQ0FBQztFQUNEVCxNQUFNLEVBQUU7SUFDTlUsV0FBVyxFQUFFckQsWUFBQSxDQUFBa0QsVUFBVSxDQUFDSTtFQUMxQixDQUFDO0VBRURWLEtBQUssRUFBRTtJQUNMVyxvQkFBb0IsRUFBRSxDQUFDO0lBQ3ZCQyx1QkFBdUIsRUFBRTtFQUMzQixDQUFDO0VBRURWLE1BQU0sRUFBRTtJQUNOVyxZQUFZLEVBQUUsQ0FBQztJQUNmQyxlQUFlLEVBQUU7RUFDbkIsQ0FBQztFQUVEYixJQUFJLEVBQUU7SUFDSmEsZUFBZSxFQUFFLENBQUM7SUFDbEJDLG1CQUFtQixFQUFFLENBQUM7SUFDdEJDLHNCQUFzQixFQUFFO0VBQzFCO0FBQ0YsQ0FBQyxDQUFDO0FBQUMsSUFBQUMsUUFBQSxHQUVZbkMsZUFBZTtBQUU5QnNCLE9BQUEsQ0FBQTFDLE9BQUEsR0FBQXVELFFBQUEiLCJpZ25vcmVMaXN0IjpbXX0=