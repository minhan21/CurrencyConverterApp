dabf37f181f39e20a223f0c6c51b50b9
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SegmentedButton = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _color = _interopRequireDefault(require("color"));
var _utils = require("./utils");
var _theming = require("../../core/theming");
var _Icon = _interopRequireDefault(require("../Icon"));
var _TouchableRipple = _interopRequireDefault(require("../TouchableRipple/TouchableRipple"));
var _Text = _interopRequireDefault(require("../Typography/Text"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
var SegmentedButtonItem = function SegmentedButtonItem(_ref) {
  var checked = _ref.checked,
    accessibilityLabel = _ref.accessibilityLabel,
    disabled = _ref.disabled,
    style = _ref.style,
    labelStyle = _ref.labelStyle,
    showSelectedCheck = _ref.showSelectedCheck,
    checkedColor = _ref.checkedColor,
    uncheckedColor = _ref.uncheckedColor,
    customRippleColor = _ref.rippleColor,
    background = _ref.background,
    icon = _ref.icon,
    testID = _ref.testID,
    label = _ref.label,
    onPress = _ref.onPress,
    segment = _ref.segment,
    _ref$density = _ref.density,
    density = _ref$density === void 0 ? 'regular' : _ref$density,
    themeOverrides = _ref.theme,
    labelMaxFontSizeMultiplier = _ref.labelMaxFontSizeMultiplier;
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var checkScale = React.useRef(new _reactNative.Animated.Value(0)).current;
  React.useEffect(function () {
    if (!showSelectedCheck) {
      return;
    }
    if (checked) {
      _reactNative.Animated.spring(checkScale, {
        toValue: 1,
        useNativeDriver: true
      }).start();
    } else {
      _reactNative.Animated.spring(checkScale, {
        toValue: 0,
        useNativeDriver: true
      }).start();
    }
  }, [checked, checkScale, showSelectedCheck]);
  var roundness = theme.roundness,
    isV3 = theme.isV3;
  var _ref2 = (0, _utils.getSegmentedButtonColors)({
      checked: checked,
      theme: theme,
      disabled: disabled,
      checkedColor: checkedColor,
      uncheckedColor: uncheckedColor
    }),
    borderColor = _ref2.borderColor,
    textColor = _ref2.textColor,
    borderWidth = _ref2.borderWidth,
    backgroundColor = _ref2.backgroundColor;
  var borderRadius = (isV3 ? 5 : 1) * roundness;
  var segmentBorderRadius = (0, _utils.getSegmentedButtonBorderRadius)({
    theme: theme,
    segment: segment
  });
  var rippleColor = customRippleColor || (0, _color.default)(textColor).alpha(0.12).rgb().string();
  var showIcon = !icon ? false : label && checked ? !showSelectedCheck : true;
  var showCheckedIcon = checked && showSelectedCheck;
  var iconSize = isV3 ? 18 : 16;
  var iconStyle = _objectSpread({
    marginRight: label ? 5 : showCheckedIcon ? 3 : 0
  }, label && {
    transform: [{
      scale: checkScale.interpolate({
        inputRange: [0, 1],
        outputRange: [1, 0]
      })
    }]
  });
  var buttonStyle = _objectSpread({
    backgroundColor: backgroundColor,
    borderColor: borderColor,
    borderWidth: borderWidth,
    borderRadius: borderRadius
  }, segmentBorderRadius);
  var paddingVertical = (0, _utils.getSegmentedButtonDensityPadding)({
    density: density
  });
  var rippleStyle = _objectSpread({
    borderRadius: borderRadius
  }, segmentBorderRadius);
  var labelTextStyle = _objectSpread(_objectSpread({}, !isV3 ? {
    textTransform: 'uppercase',
    fontWeight: '500'
  } : theme.fonts.labelLarge), {}, {
    color: textColor
  });
  return React.createElement(_reactNative.View, {
    style: [buttonStyle, styles.button, style]
  }, React.createElement(_TouchableRipple.default, {
    borderless: true,
    onPress: onPress,
    accessibilityLabel: accessibilityLabel,
    accessibilityState: {
      disabled: disabled,
      checked: checked
    },
    accessibilityRole: "button",
    disabled: disabled,
    rippleColor: rippleColor,
    testID: testID,
    style: rippleStyle,
    background: background,
    theme: theme
  }, React.createElement(_reactNative.View, {
    style: [styles.content, {
      paddingVertical: paddingVertical
    }]
  }, showCheckedIcon ? React.createElement(_reactNative.Animated.View, {
    testID: `${testID}-check-icon`,
    style: [iconStyle, {
      transform: [{
        scale: checkScale
      }]
    }]
  }, React.createElement(_Icon.default, {
    source: 'check',
    size: iconSize,
    color: textColor
  })) : null, showIcon ? React.createElement(_reactNative.Animated.View, {
    testID: `${testID}-icon`,
    style: iconStyle
  }, React.createElement(_Icon.default, {
    source: icon,
    size: iconSize,
    color: textColor
  })) : null, React.createElement(_Text.default, {
    variant: "labelLarge",
    style: [styles.label, labelTextStyle, labelStyle],
    selectable: false,
    numberOfLines: 1,
    maxFontSizeMultiplier: labelMaxFontSizeMultiplier,
    testID: `${testID}-label`
  }, label))));
};
exports.SegmentedButton = SegmentedButtonItem;
var styles = _reactNative.StyleSheet.create({
  button: {
    flex: 1,
    minWidth: 76,
    borderStyle: 'solid'
  },
  label: {
    textAlign: 'center'
  },
  content: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 9,
    paddingHorizontal: 16
  }
});
var _default = SegmentedButtonItem;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,