c38519da4dfdbc073f5daf1b43ad0d3e
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _View = _interopRequireDefault(require("../Components/View/View"));
var _flattenStyle = _interopRequireDefault(require("../StyleSheet/flattenStyle"));
var _StyleSheet = _interopRequireDefault(require("../StyleSheet/StyleSheet"));
var _Image = _interopRequireDefault(require("./Image"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "style", "imageStyle", "imageRef", "importantForAccessibility"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var ImageBackground = function (_React$Component) {
  function ImageBackground() {
    var _this;
    (0, _classCallCheck2.default)(this, ImageBackground);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, ImageBackground, [].concat(args));
    _this._viewRef = null;
    _this._captureRef = function (ref) {
      _this._viewRef = ref;
    };
    return _this;
  }
  (0, _inherits2.default)(ImageBackground, _React$Component);
  return (0, _createClass2.default)(ImageBackground, [{
    key: "setNativeProps",
    value: function setNativeProps(props) {
      var viewRef = this._viewRef;
      if (viewRef) {
        viewRef.setNativeProps(props);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
        children = _this$props.children,
        style = _this$props.style,
        imageStyle = _this$props.imageStyle,
        imageRef = _this$props.imageRef,
        importantForAccessibility = _this$props.importantForAccessibility,
        props = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
      var flattenedStyle = (0, _flattenStyle.default)(style);
      return (0, _jsxRuntime.jsxs)(_View.default, {
        accessibilityIgnoresInvertColors: true,
        importantForAccessibility: importantForAccessibility,
        style: style,
        ref: this._captureRef,
        children: [(0, _jsxRuntime.jsx)(_Image.default, _objectSpread(_objectSpread({}, props), {}, {
          importantForAccessibility: importantForAccessibility,
          style: [_StyleSheet.default.absoluteFill, {
            width: flattenedStyle == null ? void 0 : flattenedStyle.width,
            height: flattenedStyle == null ? void 0 : flattenedStyle.height
          }, imageStyle],
          ref: imageRef
        })), children]
      });
    }
  }]);
}(React.Component);
module.exports = ImageBackground;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwiX2NsYXNzQ2FsbENoZWNrMiIsIl9jcmVhdGVDbGFzczIiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIiLCJfZ2V0UHJvdG90eXBlT2YyIiwiX2luaGVyaXRzMiIsIl9WaWV3IiwiX2ZsYXR0ZW5TdHlsZSIsIl9TdHlsZVNoZWV0IiwiX0ltYWdlIiwiUmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9qc3hSdW50aW1lIiwiX2V4Y2x1ZGVkIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0Iiwib3duS2V5cyIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvIiwiZmlsdGVyIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJfY2FsbFN1cGVyIiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJjb25zdHJ1Y3RvciIsIkJvb2xlYW4iLCJwcm90b3R5cGUiLCJ2YWx1ZU9mIiwiSW1hZ2VCYWNrZ3JvdW5kIiwiX1JlYWN0JENvbXBvbmVudCIsIl90aGlzIiwiX2xlbiIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJjb25jYXQiLCJfdmlld1JlZiIsIl9jYXB0dXJlUmVmIiwicmVmIiwia2V5IiwidmFsdWUiLCJzZXROYXRpdmVQcm9wcyIsInByb3BzIiwidmlld1JlZiIsInJlbmRlciIsIl90aGlzJHByb3BzIiwiY2hpbGRyZW4iLCJzdHlsZSIsImltYWdlU3R5bGUiLCJpbWFnZVJlZiIsImltcG9ydGFudEZvckFjY2Vzc2liaWxpdHkiLCJmbGF0dGVuZWRTdHlsZSIsImZsYXR0ZW5TdHlsZSIsImpzeHMiLCJhY2Nlc3NpYmlsaXR5SWdub3Jlc0ludmVydENvbG9ycyIsImpzeCIsIlN0eWxlU2hlZXQiLCJhYnNvbHV0ZUZpbGwiLCJ3aWR0aCIsImhlaWdodCIsIkNvbXBvbmVudCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJJbWFnZUJhY2tncm91bmQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHR5cGUge1ZpZXdQcm9wc30gZnJvbSAnLi4vQ29tcG9uZW50cy9WaWV3L1ZpZXdQcm9wVHlwZXMnO1xuaW1wb3J0IHR5cGUge0hvc3RDb21wb25lbnR9IGZyb20gJy4uL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlVHlwZXMnO1xuaW1wb3J0IHR5cGUge0ltYWdlQmFja2dyb3VuZFByb3BzfSBmcm9tICcuL0ltYWdlUHJvcHMnO1xuXG5pbXBvcnQgVmlldyBmcm9tICcuLi9Db21wb25lbnRzL1ZpZXcvVmlldyc7XG5pbXBvcnQgZmxhdHRlblN0eWxlIGZyb20gJy4uL1N0eWxlU2hlZXQvZmxhdHRlblN0eWxlJztcbmltcG9ydCBTdHlsZVNoZWV0IGZyb20gJy4uL1N0eWxlU2hlZXQvU3R5bGVTaGVldCc7XG5pbXBvcnQgSW1hZ2UgZnJvbSAnLi9JbWFnZSc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbi8qKlxuICogVmVyeSBzaW1wbGUgZHJvcC1pbiByZXBsYWNlbWVudCBmb3IgPEltYWdlPiB3aGljaCBzdXBwb3J0cyBuZXN0aW5nIHZpZXdzLlxuICpcbiAqIGBgYFJlYWN0TmF0aXZlV2ViUGxheWVyXG4gKiBpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuICogaW1wb3J0IHsgQXBwUmVnaXN0cnksIFZpZXcsIEltYWdlQmFja2dyb3VuZCwgVGV4dCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG4gKlxuICogY2xhc3MgRGlzcGxheUFuSW1hZ2VCYWNrZ3JvdW5kIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAqICAgcmVuZGVyKCkge1xuICogICAgIHJldHVybiAoXG4gKiAgICAgICA8SW1hZ2VCYWNrZ3JvdW5kXG4gKiAgICAgICAgIHN0eWxlPXt7d2lkdGg6IDUwLCBoZWlnaHQ6IDUwfX1cbiAqICAgICAgICAgc291cmNlPXt7dXJpOiAnaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvaW1nL29wZW5ncmFwaC5wbmcnfX1cbiAqICAgICAgID5cbiAqICAgICAgICAgPFRleHQ+UmVhY3Q8L1RleHQ+XG4gKiAgICAgICA8L0ltYWdlQmFja2dyb3VuZD5cbiAqICAgICApO1xuICogICB9XG4gKiB9XG4gKlxuICogLy8gQXBwIHJlZ2lzdHJhdGlvbiBhbmQgcmVuZGVyaW5nXG4gKiBBcHBSZWdpc3RyeS5yZWdpc3RlckNvbXBvbmVudCgnRGlzcGxheUFuSW1hZ2VCYWNrZ3JvdW5kJywgKCkgPT4gRGlzcGxheUFuSW1hZ2VCYWNrZ3JvdW5kKTtcbiAqIGBgYFxuICovXG5jbGFzcyBJbWFnZUJhY2tncm91bmQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SW1hZ2VCYWNrZ3JvdW5kUHJvcHM+IHtcbiAgc2V0TmF0aXZlUHJvcHMocHJvcHM6IHsuLi59KSB7XG4gICAgLy8gV29yay1hcm91bmQgZmxvd1xuICAgIGNvbnN0IHZpZXdSZWYgPSB0aGlzLl92aWV3UmVmO1xuICAgIGlmICh2aWV3UmVmKSB7XG4gICAgICB2aWV3UmVmLnNldE5hdGl2ZVByb3BzKHByb3BzKTtcbiAgICB9XG4gIH1cblxuICBfdmlld1JlZjogP1JlYWN0LkVsZW1lbnRSZWY8dHlwZW9mIFZpZXc+ID0gbnVsbDtcblxuICBfY2FwdHVyZVJlZiA9IChcbiAgICByZWY6IG51bGwgfCBSZWFjdCRFbGVtZW50UmVmPFxuICAgICAgUmVhY3QkQWJzdHJhY3RDb21wb25lbnQ8XG4gICAgICAgIFZpZXdQcm9wcyxcbiAgICAgICAgUmVhY3QuRWxlbWVudFJlZjxIb3N0Q29tcG9uZW50PFZpZXdQcm9wcz4+LFxuICAgICAgPixcbiAgICA+LFxuICApID0+IHtcbiAgICB0aGlzLl92aWV3UmVmID0gcmVmO1xuICB9O1xuXG4gIHJlbmRlcigpOiBSZWFjdC5Ob2RlIHtcbiAgICBjb25zdCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIHN0eWxlLFxuICAgICAgaW1hZ2VTdHlsZSxcbiAgICAgIGltYWdlUmVmLFxuICAgICAgaW1wb3J0YW50Rm9yQWNjZXNzaWJpbGl0eSxcbiAgICAgIC4uLnByb3BzXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICAvLyAkRmxvd0ZpeE1lW3VuZGVyY29uc3RyYWluZWQtaW1wbGljaXQtaW5zdGFudGlhdGlvbl1cbiAgICBjb25zdCBmbGF0dGVuZWRTdHlsZSA9IGZsYXR0ZW5TdHlsZShzdHlsZSk7XG4gICAgcmV0dXJuIChcbiAgICAgIDxWaWV3XG4gICAgICAgIGFjY2Vzc2liaWxpdHlJZ25vcmVzSW52ZXJ0Q29sb3JzPXt0cnVlfVxuICAgICAgICBpbXBvcnRhbnRGb3JBY2Nlc3NpYmlsaXR5PXtpbXBvcnRhbnRGb3JBY2Nlc3NpYmlsaXR5fVxuICAgICAgICBzdHlsZT17c3R5bGV9XG4gICAgICAgIHJlZj17dGhpcy5fY2FwdHVyZVJlZn0+XG4gICAgICAgIHsvKiAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS11c2VdICovfVxuICAgICAgICA8SW1hZ2VcbiAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgaW1wb3J0YW50Rm9yQWNjZXNzaWJpbGl0eT17aW1wb3J0YW50Rm9yQWNjZXNzaWJpbGl0eX1cbiAgICAgICAgICBzdHlsZT17W1xuICAgICAgICAgICAgU3R5bGVTaGVldC5hYnNvbHV0ZUZpbGwsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIC8vIFRlbXBvcmFyeSBXb3JrYXJvdW5kOlxuICAgICAgICAgICAgICAvLyBDdXJyZW50IChpbXBlcmZlY3QgeWV0KSBpbXBsZW1lbnRhdGlvbiBvZiA8SW1hZ2U+IG92ZXJ3cml0ZXMgd2lkdGggYW5kIGhlaWdodCBzdHlsZXNcbiAgICAgICAgICAgICAgLy8gKHdoaWNoIGlzIG5vdCBxdWl0ZSBjb3JyZWN0KSwgYW5kIHRoZXNlIHN0eWxlcyBjb25mbGljdCB3aXRoIGV4cGxpY2l0bHkgc2V0IHN0eWxlc1xuICAgICAgICAgICAgICAvLyBvZiA8SW1hZ2VCYWNrZ3JvdW5kPiBhbmQgd2l0aCBvdXIgaW50ZXJuYWwgbGF5b3V0IG1vZGVsIGhlcmUuXG4gICAgICAgICAgICAgIC8vIFNvLCB3ZSBoYXZlIHRvIHByb3h5L3JlYXBwbHkgdGhlc2Ugc3R5bGVzIGV4cGxpY2l0bHkgZm9yIGFjdHVhbCA8SW1hZ2U+IGNvbXBvbmVudC5cbiAgICAgICAgICAgICAgLy8gVGhpcyB3b3JrYXJvdW5kIHNob3VsZCBiZSByZW1vdmVkIGFmdGVyIGltcGxlbWVudGluZyBwcm9wZXIgc3VwcG9ydCBvZlxuICAgICAgICAgICAgICAvLyBpbnRyaW5zaWMgY29udGVudCBzaXplIG9mIHRoZSA8SW1hZ2U+LlxuICAgICAgICAgICAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICAgICAgICAgICAgd2lkdGg6IGZsYXR0ZW5lZFN0eWxlPy53aWR0aCxcbiAgICAgICAgICAgICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICAgICAgICAgIGhlaWdodDogZmxhdHRlbmVkU3R5bGU/LmhlaWdodCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbWFnZVN0eWxlLFxuICAgICAgICAgIF19XG4gICAgICAgICAgcmVmPXtpbWFnZVJlZn1cbiAgICAgICAgLz5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9WaWV3PlxuICAgICk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBJbWFnZUJhY2tncm91bmQ7XG4iXSwibWFwcGluZ3MiOiJBQVVBLFlBQVk7O0FBQUMsSUFBQUEsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLGdCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBRSx5QkFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUcsZ0JBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFJLGFBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFLLDJCQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBTSxnQkFBQSxHQUFBUCxzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQU8sVUFBQSxHQUFBUixzQkFBQSxDQUFBQyxPQUFBO0FBTWIsSUFBQVEsS0FBQSxHQUFBVCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQVMsYUFBQSxHQUFBVixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQVUsV0FBQSxHQUFBWCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQVcsTUFBQSxHQUFBWixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQVksS0FBQSxHQUFBQyx1QkFBQSxDQUFBYixPQUFBO0FBQStCLElBQUFjLFdBQUEsR0FBQWQsT0FBQTtBQUFBLElBQUFlLFNBQUE7QUFBQSxTQUFBQyx5QkFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxt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