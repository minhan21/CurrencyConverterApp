c26736c4058608a997bc00ea3e7aaf57
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.FABGroup = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _FAB = _interopRequireDefault(require("./FAB"));
var _utils = require("./utils");
var _theming = require("../../core/theming");
var _Card = _interopRequireDefault(require("../Card/Card"));
var _Text = _interopRequireDefault(require("../Typography/Text"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
var AnimatedPressable = _reactNative.Animated.createAnimatedComponent(_reactNative.Pressable);
var FABGroup = function FABGroup(_ref) {
  var actions = _ref.actions,
    icon = _ref.icon,
    open = _ref.open,
    _onPress = _ref.onPress,
    _onLongPress = _ref.onLongPress,
    toggleStackOnLongPress = _ref.toggleStackOnLongPress,
    accessibilityLabel = _ref.accessibilityLabel,
    themeOverrides = _ref.theme,
    style = _ref.style,
    fabStyle = _ref.fabStyle,
    visible = _ref.visible,
    label = _ref.label,
    testID = _ref.testID,
    onStateChange = _ref.onStateChange,
    colorProp = _ref.color,
    _ref$delayLongPress = _ref.delayLongPress,
    delayLongPress = _ref$delayLongPress === void 0 ? 200 : _ref$delayLongPress,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'primary' : _ref$variant,
    _ref$enableLongPressW = _ref.enableLongPressWhenStackOpened,
    enableLongPressWhenStackOpened = _ref$enableLongPressW === void 0 ? false : _ref$enableLongPressW,
    customBackdropColor = _ref.backdropColor,
    rippleColor = _ref.rippleColor;
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var _React$useRef = React.useRef(new _reactNative.Animated.Value(0)),
    backdrop = _React$useRef.current;
  var animations = React.useRef(actions.map(function () {
    return new _reactNative.Animated.Value(open ? 1 : 0);
  }));
  var _React$useState = React.useState(null),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    prevActions = _React$useState2[0],
    setPrevActions = _React$useState2[1];
  var scale = theme.animation.scale;
  var isV3 = theme.isV3;
  React.useEffect(function () {
    if (open) {
      _reactNative.Animated.parallel([_reactNative.Animated.timing(backdrop, {
        toValue: 1,
        duration: 250 * scale,
        useNativeDriver: true
      }), _reactNative.Animated.stagger(isV3 ? 15 : 50 * scale, animations.current.map(function (animation) {
        return _reactNative.Animated.timing(animation, {
          toValue: 1,
          duration: 150 * scale,
          useNativeDriver: true
        });
      }).reverse())]).start();
    } else {
      _reactNative.Animated.parallel([_reactNative.Animated.timing(backdrop, {
        toValue: 0,
        duration: 200 * scale,
        useNativeDriver: true
      })].concat((0, _toConsumableArray2.default)(animations.current.map(function (animation) {
        return _reactNative.Animated.timing(animation, {
          toValue: 0,
          duration: 150 * scale,
          useNativeDriver: true
        });
      })))).start();
    }
  }, [open, actions, backdrop, scale, isV3]);
  var close = function close() {
    return onStateChange({
      open: false
    });
  };
  var toggle = function toggle() {
    return onStateChange({
      open: !open
    });
  };
  var _ref2 = (0, _utils.getFABGroupColors)({
      theme: theme,
      customBackdropColor: customBackdropColor
    }),
    labelColor = _ref2.labelColor,
    backdropColor = _ref2.backdropColor,
    stackedFABBackgroundColor = _ref2.stackedFABBackgroundColor;
  var backdropOpacity = open ? backdrop.interpolate({
    inputRange: [0, 0.5, 1],
    outputRange: [0, 1, 1]
  }) : backdrop;
  var opacities = animations.current;
  var scales = opacities.map(function (opacity) {
    return open ? opacity.interpolate({
      inputRange: [0, 1],
      outputRange: [0.5, 1]
    }) : 1;
  });
  var translations = opacities.map(function (opacity) {
    return open ? opacity.interpolate({
      inputRange: [0, 1],
      outputRange: [24, -8]
    }) : -8;
  });
  var labelTranslations = opacities.map(function (opacity) {
    return open ? opacity.interpolate({
      inputRange: [0, 1],
      outputRange: [8, -8]
    }) : -8;
  });
  var _ref3 = (0, _reactNativeSafeAreaContext.useSafeAreaInsets)(),
    top = _ref3.top,
    bottom = _ref3.bottom,
    right = _ref3.right,
    left = _ref3.left;
  var containerPaddings = {
    paddingBottom: bottom,
    paddingRight: right,
    paddingLeft: left,
    paddingTop: top
  };
  if (actions.length !== (prevActions === null || prevActions === void 0 ? void 0 : prevActions.length)) {
    animations.current = actions.map(function (_, i) {
      return animations.current[i] || new _reactNative.Animated.Value(open ? 1 : 0);
    });
    setPrevActions(actions);
  }
  return React.createElement(_reactNative.View, {
    pointerEvents: "box-none",
    style: [styles.container, containerPaddings, style]
  }, React.createElement(AnimatedPressable, {
    accessibilityRole: "button",
    onPress: close,
    pointerEvents: open ? 'auto' : 'none',
    style: [styles.backdrop, {
      opacity: backdropOpacity,
      backgroundColor: backdropColor
    }]
  }), React.createElement(_reactNative.View, {
    pointerEvents: "box-none",
    style: styles.safeArea
  }, React.createElement(_reactNative.View, {
    pointerEvents: open ? 'box-none' : 'none'
  }, actions.map(function (it, i) {
    var _it$labelTextColor;
    var labelTextStyle = _objectSpread({
      color: (_it$labelTextColor = it.labelTextColor) != null ? _it$labelTextColor : labelColor
    }, isV3 ? theme.fonts.titleMedium : {});
    var marginHorizontal = typeof it.size === 'undefined' || it.size === 'small' ? 24 : 16;
    var accessibilityLabel = typeof it.accessibilityLabel !== 'undefined' ? it.accessibilityLabel : it.label;
    var size = typeof it.size !== 'undefined' ? it.size : 'small';
    return React.createElement(_reactNative.View, {
      key: i,
      style: [styles.item, {
        marginHorizontal: marginHorizontal
      }],
      pointerEvents: open ? 'box-none' : 'none',
      accessibilityRole: "button",
      importantForAccessibility: "yes",
      accessible: true,
      accessibilityLabel: accessibilityLabel
    }, it.label && React.createElement(_reactNative.View, null, React.createElement(_Card.default, {
      mode: isV3 ? 'contained' : 'elevated',
      onPress: function onPress(e) {
        it.onPress(e);
        close();
      },
      accessibilityHint: it.accessibilityHint,
      importantForAccessibility: "no-hide-descendants",
      accessibilityElementsHidden: true,
      style: [styles.containerStyle, {
        transform: [isV3 ? {
          translateY: labelTranslations[i]
        } : {
          scale: scales[i]
        }],
        opacity: opacities[i]
      }, isV3 && styles.v3ContainerStyle, it.containerStyle]
    }, React.createElement(_Text.default, {
      variant: "titleMedium",
      importantForAccessibility: "no-hide-descendants",
      accessibilityElementsHidden: true,
      style: [labelTextStyle, it.labelStyle],
      maxFontSizeMultiplier: it.labelMaxFontSizeMultiplier
    }, it.label))), React.createElement(_FAB.default, {
      size: size,
      icon: it.icon,
      color: it.color,
      style: [{
        transform: [{
          scale: scales[i]
        }],
        opacity: opacities[i],
        backgroundColor: stackedFABBackgroundColor
      }, isV3 && {
        transform: [{
          translateY: translations[i]
        }]
      }, it.style],
      accessibilityElementsHidden: true,
      theme: theme,
      onPress: function onPress(e) {
        it.onPress(e);
        close();
      },
      importantForAccessibility: "no-hide-descendants",
      testID: it.testID,
      visible: open,
      rippleColor: it.rippleColor
    }));
  })), React.createElement(_FAB.default, {
    onPress: function onPress(e) {
      _onPress === null || _onPress === void 0 ? void 0 : _onPress(e);
      if (!toggleStackOnLongPress || open) {
        toggle();
      }
    },
    onLongPress: function onLongPress(e) {
      if (!open || enableLongPressWhenStackOpened) {
        _onLongPress === null || _onLongPress === void 0 ? void 0 : _onLongPress(e);
        if (toggleStackOnLongPress) {
          toggle();
        }
      }
    },
    delayLongPress: delayLongPress,
    icon: icon,
    color: colorProp,
    accessibilityLabel: accessibilityLabel,
    accessibilityRole: "button",
    accessibilityState: {
      expanded: open
    },
    style: [styles.fab, fabStyle],
    theme: theme,
    visible: visible,
    label: label,
    testID: testID,
    variant: variant,
    rippleColor: rippleColor
  })));
};
exports.FABGroup = FABGroup;
FABGroup.displayName = 'FAB.Group';
var _default = FABGroup;
exports.default = _default;
var styles = _reactNative.StyleSheet.create({
  safeArea: {
    alignItems: 'flex-end'
  },
  container: _objectSpread(_objectSpread({}, _reactNative.StyleSheet.absoluteFillObject), {}, {
    justifyContent: 'flex-end'
  }),
  fab: {
    marginHorizontal: 16,
    marginBottom: 16,
    marginTop: 0
  },
  backdrop: _objectSpread({}, _reactNative.StyleSheet.absoluteFillObject),
  containerStyle: {
    borderRadius: 5,
    paddingHorizontal: 12,
    paddingVertical: 6,
    marginVertical: 8,
    marginHorizontal: 16,
    elevation: 2
  },
  item: {
    marginBottom: 16,
    flexDirection: 'row',
    justifyContent: 'flex-end',
    alignItems: 'center'
  },
  v3ContainerStyle: {
    backgroundColor: 'transparent',
    elevation: 0
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,