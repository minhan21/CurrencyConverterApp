3ded17dbc0a3d253a68e344160ba0c97
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock the entire react-native-paper library
jest.mock('react-native-paper', () => {
    const actualPaper = jest.requireActual('react-native-paper');
    return {
        ...actualPaper,
        Easing: {
            ease: jest.fn(() => 'ease'),
            bezier: jest.fn(() => 'bezier'),
            linear: jest.fn(() => 'linear'),
        },
    };
});
// src/__tests__/CurrencyConverter.test.tsx
const react_1 = __importDefault(require("react"));
const react_native_1 = require("@testing-library/react-native");
const CurrencyConverter_1 = __importDefault(require("../components/CurrencyConverter"));
test('converts currency correctly', async () => {
    const rates = { USD: 1, EUR: 0.85 };
    const { getByText, getByLabelText } = (0, react_native_1.render)(react_1.default.createElement(CurrencyConverter_1.default, { rates: rates }));
    // Select base and target currencies
    const baseCurrencyPicker = getByLabelText('Select base currency');
    const targetCurrencyPicker = getByLabelText('Select target currency');
    (0, react_native_1.fireEvent)(baseCurrencyPicker, 'valueChange', 'USD');
    (0, react_native_1.fireEvent)(targetCurrencyPicker, 'valueChange', 'EUR');
    // Enter amount and check conversion
    const amountInput = getByLabelText('Amount');
    react_native_1.fireEvent.changeText(amountInput, '100');
    await (0, react_native_1.waitFor)(() => {
        expect(getByText('100 USD = 85.00 EUR')).toBeTruthy();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2FudHJhbi9EZXNrdG9wL0N1cnJlbmN5Q29udmVydGVyQXBwL3NyYy9fX3Rlc3RzX18vQ3VycmVuY3lDb252ZXJ0ZXIudGVzdC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7QUFLQSw2Q0FBNkM7QUFDN0MsSUFBSSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUU7SUFDbkMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQzdELE9BQU87UUFDTCxHQUFHLFdBQVc7UUFDZCxNQUFNLEVBQUU7WUFDTixJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUM7WUFDM0IsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDO1lBQy9CLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQztTQUNoQztLQUNGLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQztBQWhCSCwyQ0FBMkM7QUFDM0Msa0RBQTBCO0FBQzFCLGdFQUEyRTtBQUMzRSx3RkFBZ0U7QUFlaEUsSUFBSSxDQUFDLDZCQUE2QixFQUFFLEtBQUssSUFBSSxFQUFFO0lBQzdDLE1BQU0sS0FBSyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDcEMsTUFBTSxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsR0FBRyxJQUFBLHFCQUFNLEVBQzFDLDhCQUFDLDJCQUFpQixJQUFDLEtBQUssRUFBRSxLQUFLLEdBQUksQ0FDcEMsQ0FBQztJQUVGLG9DQUFvQztJQUNwQyxNQUFNLGtCQUFrQixHQUFHLGNBQWMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBQ2xFLE1BQU0sb0JBQW9CLEdBQUcsY0FBYyxDQUFDLHdCQUF3QixDQUFDLENBQUM7SUFFdEUsSUFBQSx3QkFBUyxFQUFDLGtCQUFrQixFQUFFLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNwRCxJQUFBLHdCQUFTLEVBQUMsb0JBQW9CLEVBQUUsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRXRELG9DQUFvQztJQUNwQyxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDN0Msd0JBQVMsQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRXpDLE1BQU0sSUFBQSxzQkFBTyxFQUFDLEdBQUcsRUFBRTtRQUNqQixNQUFNLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN4RCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbnRyYW4vRGVza3RvcC9DdXJyZW5jeUNvbnZlcnRlckFwcC9zcmMvX190ZXN0c19fL0N1cnJlbmN5Q29udmVydGVyLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9fX3Rlc3RzX18vQ3VycmVuY3lDb252ZXJ0ZXIudGVzdC50c3hcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIGZpcmVFdmVudCwgd2FpdEZvciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCBDdXJyZW5jeUNvbnZlcnRlciBmcm9tICcuLi9jb21wb25lbnRzL0N1cnJlbmN5Q29udmVydGVyJztcblxuLy8gTW9jayB0aGUgZW50aXJlIHJlYWN0LW5hdGl2ZS1wYXBlciBsaWJyYXJ5XG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS1wYXBlcicsICgpID0+IHtcbiAgY29uc3QgYWN0dWFsUGFwZXIgPSBqZXN0LnJlcXVpcmVBY3R1YWwoJ3JlYWN0LW5hdGl2ZS1wYXBlcicpO1xuICByZXR1cm4ge1xuICAgIC4uLmFjdHVhbFBhcGVyLFxuICAgIEVhc2luZzoge1xuICAgICAgZWFzZTogamVzdC5mbigoKSA9PiAnZWFzZScpLFxuICAgICAgYmV6aWVyOiBqZXN0LmZuKCgpID0+ICdiZXppZXInKSxcbiAgICAgIGxpbmVhcjogamVzdC5mbigoKSA9PiAnbGluZWFyJyksXG4gICAgfSxcbiAgfTtcbn0pO1xuXG50ZXN0KCdjb252ZXJ0cyBjdXJyZW5jeSBjb3JyZWN0bHknLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHJhdGVzID0geyBVU0Q6IDEsIEVVUjogMC44NSB9O1xuICBjb25zdCB7IGdldEJ5VGV4dCwgZ2V0QnlMYWJlbFRleHQgfSA9IHJlbmRlcihcbiAgICA8Q3VycmVuY3lDb252ZXJ0ZXIgcmF0ZXM9e3JhdGVzfSAvPixcbiAgKTtcblxuICAvLyBTZWxlY3QgYmFzZSBhbmQgdGFyZ2V0IGN1cnJlbmNpZXNcbiAgY29uc3QgYmFzZUN1cnJlbmN5UGlja2VyID0gZ2V0QnlMYWJlbFRleHQoJ1NlbGVjdCBiYXNlIGN1cnJlbmN5Jyk7XG4gIGNvbnN0IHRhcmdldEN1cnJlbmN5UGlja2VyID0gZ2V0QnlMYWJlbFRleHQoJ1NlbGVjdCB0YXJnZXQgY3VycmVuY3knKTtcblxuICBmaXJlRXZlbnQoYmFzZUN1cnJlbmN5UGlja2VyLCAndmFsdWVDaGFuZ2UnLCAnVVNEJyk7XG4gIGZpcmVFdmVudCh0YXJnZXRDdXJyZW5jeVBpY2tlciwgJ3ZhbHVlQ2hhbmdlJywgJ0VVUicpO1xuXG4gIC8vIEVudGVyIGFtb3VudCBhbmQgY2hlY2sgY29udmVyc2lvblxuICBjb25zdCBhbW91bnRJbnB1dCA9IGdldEJ5TGFiZWxUZXh0KCdBbW91bnQnKTtcbiAgZmlyZUV2ZW50LmNoYW5nZVRleHQoYW1vdW50SW5wdXQsICcxMDAnKTtcblxuICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCcxMDAgVVNEID0gODUuMDAgRVVSJykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==