6d1abc0222cecfc8b495a1937fb0e065
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["index", "total", "siblings", "style"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var CardContent = function CardContent(_ref) {
  var index = _ref.index,
    total = _ref.total,
    siblings = _ref.siblings,
    style = _ref.style,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var cover = 'withInternalTheme(CardCover)';
  var title = 'withInternalTheme(CardTitle)';
  var contentStyle, prev, next;
  if (typeof index === 'number' && siblings) {
    prev = siblings[index - 1];
    next = siblings[index + 1];
  }
  if (prev === cover && next === cover || prev === title && next === title || total === 1) {
    contentStyle = styles.only;
  } else if (index === 0) {
    if (next === cover || next === title) {
      contentStyle = styles.only;
    } else {
      contentStyle = styles.first;
    }
  } else if (typeof total === 'number' && index === total - 1) {
    if (prev === cover || prev === title) {
      contentStyle = styles.only;
    } else {
      contentStyle = styles.last;
    }
  } else if (prev === cover || prev === title) {
    contentStyle = styles.first;
  } else if (next === cover || next === title) {
    contentStyle = styles.last;
  }
  return React.createElement(_reactNative.View, _extends({}, rest, {
    style: [styles.container, contentStyle, style]
  }));
};
CardContent.displayName = 'Card.Content';
var styles = _reactNative.StyleSheet.create({
  container: {
    paddingHorizontal: 16
  },
  first: {
    paddingTop: 16
  },
  last: {
    paddingBottom: 16
  },
  only: {
    paddingVertical: 16
  }
});
var _default = CardContent;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfZXh0ZW5kcyIsImFzc2lnbiIsImJpbmQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiYXBwbHkiLCJDYXJkQ29udGVudCIsIl9yZWYiLCJpbmRleCIsInRvdGFsIiwic2libGluZ3MiLCJzdHlsZSIsInJlc3QiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwiX2V4Y2x1ZGVkIiwiY292ZXIiLCJ0aXRsZSIsImNvbnRlbnRTdHlsZSIsInByZXYiLCJuZXh0Iiwic3R5bGVzIiwib25seSIsImZpcnN0IiwibGFzdCIsImNyZWF0ZUVsZW1lbnQiLCJWaWV3IiwiY29udGFpbmVyIiwiZGlzcGxheU5hbWUiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwicGFkZGluZ0hvcml6b250YWwiLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsInBhZGRpbmdWZXJ0aWNhbCIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NhcmQvQ2FyZENvbnRlbnQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxJQUFBQSxLQUFB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