20b3ab848b58fbb9569a513b39656cbb
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _useLatestCallback = _interopRequireDefault(require("use-latest-callback"));
var _Surface = _interopRequireDefault(require("./Surface"));
var _theming = require("../core/theming");
var _addEventListener = require("../utils/addEventListener");
var _BackHandler = require("../utils/BackHandler/BackHandler");
var _useAnimatedValue = _interopRequireDefault(require("../utils/useAnimatedValue"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
var DEFAULT_DURATION = 220;
var AnimatedPressable = _reactNative.Animated.createAnimatedComponent(_reactNative.Pressable);
function Modal(_ref) {
  var _theme$colors;
  var _ref$dismissable = _ref.dismissable,
    dismissable = _ref$dismissable === void 0 ? true : _ref$dismissable,
    _ref$dismissableBackB = _ref.dismissableBackButton,
    dismissableBackButton = _ref$dismissableBackB === void 0 ? dismissable : _ref$dismissableBackB,
    _ref$visible = _ref.visible,
    visible = _ref$visible === void 0 ? false : _ref$visible,
    _ref$overlayAccessibi = _ref.overlayAccessibilityLabel,
    overlayAccessibilityLabel = _ref$overlayAccessibi === void 0 ? 'Close modal' : _ref$overlayAccessibi,
    _ref$onDismiss = _ref.onDismiss,
    onDismiss = _ref$onDismiss === void 0 ? function () {} : _ref$onDismiss,
    children = _ref.children,
    contentContainerStyle = _ref.contentContainerStyle,
    style = _ref.style,
    themeOverrides = _ref.theme,
    _ref$testID = _ref.testID,
    testID = _ref$testID === void 0 ? 'modal' : _ref$testID;
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var visibleRef = React.useRef(visible);
  React.useEffect(function () {
    visibleRef.current = visible;
  });
  var onDismissCallback = (0, _useLatestCallback.default)(onDismiss);
  var scale = theme.animation.scale;
  var _ref3 = (0, _reactNativeSafeAreaContext.useSafeAreaInsets)(),
    top = _ref3.top,
    bottom = _ref3.bottom;
  var opacity = (0, _useAnimatedValue.default)(visible ? 1 : 0);
  var _React$useState = React.useState(visible),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    rendered = _React$useState2[0],
    setRendered = _React$useState2[1];
  if (visible && !rendered) {
    setRendered(true);
  }
  var showModal = React.useCallback(function () {
    _reactNative.Animated.timing(opacity, {
      toValue: 1,
      duration: scale * DEFAULT_DURATION,
      easing: _reactNative.Easing.out(_reactNative.Easing.cubic),
      useNativeDriver: true
    }).start();
  }, [opacity, scale]);
  var hideModal = React.useCallback(function () {
    _reactNative.Animated.timing(opacity, {
      toValue: 0,
      duration: scale * DEFAULT_DURATION,
      easing: _reactNative.Easing.out(_reactNative.Easing.cubic),
      useNativeDriver: true
    }).start(function (_ref2) {
      var finished = _ref2.finished;
      if (!finished) {
        return;
      }
      if (visible) {
        onDismissCallback();
      }
      if (visibleRef.current) {
        showModal();
      } else {
        setRendered(false);
      }
    });
  }, [onDismissCallback, opacity, scale, showModal, visible]);
  React.useEffect(function () {
    if (!visible) {
      return undefined;
    }
    var onHardwareBackPress = function onHardwareBackPress() {
      if (dismissable || dismissableBackButton) {
        hideModal();
      }
      return true;
    };
    var subscription = (0, _addEventListener.addEventListener)(_BackHandler.BackHandler, 'hardwareBackPress', onHardwareBackPress);
    return function () {
      return subscription.remove();
    };
  }, [dismissable, dismissableBackButton, hideModal, visible]);
  var prevVisible = React.useRef(null);
  React.useEffect(function () {
    if (prevVisible.current !== visible) {
      if (visible) {
        showModal();
      } else {
        hideModal();
      }
    }
    prevVisible.current = visible;
  });
  if (!rendered) return null;
  return React.createElement(_reactNative.Animated.View, {
    pointerEvents: visible ? 'auto' : 'none',
    accessibilityViewIsModal: true,
    accessibilityLiveRegion: "polite",
    style: _reactNative.StyleSheet.absoluteFill,
    onAccessibilityEscape: hideModal,
    testID: testID
  }, React.createElement(AnimatedPressable, {
    accessibilityLabel: overlayAccessibilityLabel,
    accessibilityRole: "button",
    disabled: !dismissable,
    onPress: dismissable ? hideModal : undefined,
    importantForAccessibility: "no",
    style: [styles.backdrop, {
      backgroundColor: (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.backdrop,
      opacity: opacity
    }],
    testID: `${testID}-backdrop`
  }), React.createElement(_reactNative.View, {
    style: [styles.wrapper, {
      marginTop: top,
      marginBottom: bottom
    }, style],
    pointerEvents: "box-none",
    testID: `${testID}-wrapper`
  }, React.createElement(_Surface.default, {
    testID: `${testID}-surface`,
    theme: theme,
    style: [{
      opacity: opacity
    }, styles.content, contentContainerStyle]
  }, children)));
}
var _default = Modal;
exports.default = _default;
var styles = _reactNative.StyleSheet.create({
  backdrop: {
    flex: 1
  },
  wrapper: _objectSpread(_objectSpread({}, _reactNative.StyleSheet.absoluteFillObject), {}, {
    justifyContent: 'center'
  }),
  content: {
    backgroundColor: 'transparent',
    justifyContent: 'center'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9yZWFjdE5hdGl2ZVNhZmVBcmVhQ29udGV4dCIsIl91c2VMYXRlc3RDYWxsYmFjayIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfU3VyZmFjZSIsIl90aGVtaW5nIiwiX2FkZEV2ZW50TGlzdGVuZXIiLCJfQmFja0hhbmRsZXIiLCJfdXNlQW5pbWF0ZWRWYWx1ZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJERUZBVUxUX0RVUkFUSU9OIiwiQW5pbWF0ZWRQcmVzc2FibGUiLCJBbmltYXRlZCIsImNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50IiwiUHJlc3NhYmxlIiwiTW9kYWwiLCJfcmVmIiwiX3RoZW1lJGNvbG9ycyIsIl9yZWYkZGlzbWlzc2FibGUiLCJkaXNtaXNzYWJsZSIsIl9yZWYkZGlzbWlzc2FibGVCYWNrQiIsImRpc21pc3NhYmxlQmFja0J1dHRvbiIsIl9yZWYkdmlzaWJsZSIsInZpc2libGUiLCJfcmVmJG92ZXJsYXlBY2Nlc3NpYmkiLCJvdmVybGF5QWNjZXNzaWJpbGl0eUxhYmVsIiwiX3JlZiRvbkRpc21pc3MiLCJvbkRpc21pc3MiLCJjaGlsZHJlbiIsImNvbnRlbnRDb250YWluZXJTdHlsZSIsInN0eWxlIiwidGhlbWVPdmVycmlkZXMiLCJ0aGVtZSIsIl9yZWYkdGVzdElEIiwidGVzdElEIiwidXNlSW50ZXJuYWxUaGVtZSIsInZpc2libGVSZWYiLCJ1c2VSZWYiLCJ1c2VFZmZlY3QiLCJjdXJyZW50Iiwib25EaXNtaXNzQ2FsbGJhY2siLCJzY2FsZSIsImFuaW1hdGlvbiIsIl9yZWYzIiwidXNlU2FmZUFyZWFJbnNldHMiLCJ0b3AiLCJib3R0b20iLCJvcGFjaXR5IiwiX1JlYWN0JHVzZVN0YXRlIiwidXNlU3RhdGUiLCJfUmVhY3QkdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkyIiwicmVuZGVyZWQiLCJzZXRSZW5kZXJlZCIsInNob3dNb2RhbCIsInVzZUNhbGxiYWNrIiwidGltaW5nIiwidG9WYWx1ZSIsImR1cmF0aW9uIiwiZWFzaW5nIiwiRWFzaW5nIiwib3V0IiwiY3ViaWMiLCJ1c2VOYXRpdmVEcml2ZXIiLCJzdGFydCIsImhpZGVNb2RhbCIsIl9yZWYyIiwiZmluaXNoZWQiLCJ1bmRlZmluZWQiLCJvbkhhcmR3YXJlQmFja1ByZXNzIiwic3Vic2NyaXB0aW9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsIkJhY2tIYW5kbGVyIiwicmVtb3ZlIiwicHJldlZpc2libGUiLCJjcmVhdGVFbGVtZW50IiwiVmlldyIsInBvaW50ZXJFdmVudHMiLCJhY2Nlc3NpYmlsaXR5Vmlld0lzTW9kYWwiLCJhY2Nlc3NpYmlsaXR5TGl2ZVJlZ2lvbiIsIlN0eWxlU2hlZXQiLCJhYnNvbHV0ZUZpbGwiLCJvbkFjY2Vzc2liaWxpdHlFc2NhcGUiLCJhY2Nlc3NpYmlsaXR5TGFiZWwiLCJhY2Nlc3NpYmlsaXR5Um9sZSIsImRpc2FibGVkIiwib25QcmVzcyIsImltcG9ydGFudEZvckFjY2Vzc2liaWxpdHkiLCJzdHlsZXMiLCJiYWNrZHJvcCIsImJhY2tncm91bmRDb2xvciIsImNvbG9ycyIsIndyYXBwZXIiLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJjb250ZW50IiwiX2RlZmF1bHQiLCJleHBvcnRzIiwiY3JlYXRlIiwiZmxleCIsIl9vYmplY3RTcHJlYWQiLCJhYnNvbHV0ZUZpbGxPYmplY3QiLCJqdXN0aWZ5Q29udGVudCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL01vZGFsLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxLQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFVQSxJQUFBRSwyQkFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsa0JBQUEsR0FBQUMsc0JBQUEsQ0FBQUosT0FBQTtBQUVBLElBQUFLLFFBQUEsR0FBQUQsc0JBQUEsQ0FBQUosT0FBQTtBQUNBLElBQUFNLFFBQUEsR0FBQU4sT0FBQTtBQUVBLElBQUFPLGlCQUFBLEdBQUFQLE9BQUE7QUFDQSxJQUFBUSxZQUFBLEdBQUFSLE9BQUE7QUFDQSxJQUFBUyxpQkFBQSxHQUFBTCxzQkFBQSxDQUFBSixPQUFBO0FBQXlELFNBQUFJLHVCQUFBTSxHQUFBO0VBQUEsT0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQTtJQUFBRSxPQUFBLEVBQUFGO0VBQUE7QUFBQTtBQUFBLFNBQUFHLHlCQUFBQyxXQUFBO0VBQUEsV0FBQUMsT0FBQTtFQUFBLElBQUFDLGlCQUFBLE9BQUFELE9BQUE7RUFBQSxJQUFBRSxnQkFBQSxPQUFBRixPQUFBO0VBQUEsUUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLFdBQUE7SUFBQSxPQUFBQSxXQUFBLEdBQUFHLGdCQUFBLEdBQUFELGlCQUFBO0VBQUEsR0FBQUYsV0FBQTtBQUFBO0FBQUEsU0FBQWYsd0JBQUFXLEdBQUEsRUFBQUksV0FBQTtFQUFBLEtBQUFBLFdBQUEsSUFBQUosR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUE7SUFBQSxPQUFBRCxHQUFBO0VBQUE7RUFBQSxJQUFBQSxHQUFBLG9CQUFBQSxHQUFBLHdCQUFBQSxHQUFBO0lBQUE7TUFBQUUsT0FBQSxFQUFBRjtJQUFBO0VBQUE7RUFBQSxJQUFBUSxLQUFB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