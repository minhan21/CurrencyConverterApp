3a9c457fd208d223f7850e1484f87e1d
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = overlay;
exports.isAnimatedValue = void 0;
var _reactNative = require("react-native");
var _color = _interopRequireDefault(require("color"));
var _DarkTheme = require("./themes/v2/DarkTheme");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var isAnimatedValue = function isAnimatedValue(it) {
  return it instanceof _reactNative.Animated.Value;
};
exports.isAnimatedValue = isAnimatedValue;
function overlay(elevation) {
  var _MD2DarkTheme$colors;
  var surfaceColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (_MD2DarkTheme$colors = _DarkTheme.MD2DarkTheme.colors) === null || _MD2DarkTheme$colors === void 0 ? void 0 : _MD2DarkTheme$colors.surface;
  if (isAnimatedValue(elevation)) {
    var inputRange = [0, 1, 2, 3, 8, 24];
    return elevation.interpolate({
      inputRange: inputRange,
      outputRange: inputRange.map(function (elevation) {
        return calculateColor(surfaceColor, elevation);
      })
    });
  }
  return calculateColor(surfaceColor, elevation);
}
function calculateColor(surfaceColor) {
  var elevation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var overlayTransparency;
  if (elevation >= 1 && elevation <= 24) {
    overlayTransparency = elevationOverlayTransparency[elevation];
  } else if (elevation > 24) {
    overlayTransparency = elevationOverlayTransparency[24];
  } else {
    overlayTransparency = elevationOverlayTransparency[1];
  }
  return (0, _color.default)(surfaceColor).mix((0, _color.default)('white'), overlayTransparency * 0.01).hex();
}
var elevationOverlayTransparency = {
  1: 5,
  2: 7,
  3: 8,
  4: 9,
  5: 10,
  6: 11,
  7: 11.5,
  8: 12,
  9: 12.5,
  10: 13,
  11: 13.5,
  12: 14,
  13: 14.25,
  14: 14.5,
  15: 14.75,
  16: 15,
  17: 15.12,
  18: 15.24,
  19: 15.36,
  20: 15.48,
  21: 15.6,
  22: 15.72,
  23: 15.84,
  24: 16
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX2NvbG9yIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9EYXJrVGhlbWUiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImlzQW5pbWF0ZWRWYWx1ZSIsIml0IiwiQW5pbWF0ZWQiLCJWYWx1ZSIsImV4cG9ydHMiLCJvdmVybGF5IiwiZWxldmF0aW9uIiwiX01EMkRhcmtUaGVtZSRjb2xvcnMiLCJzdXJmYWNlQ29sb3IiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJNRDJEYXJrVGhlbWUiLCJjb2xvcnMiLCJzdXJmYWNlIiwiaW5wdXRSYW5nZSIsImludGVycG9sYXRlIiwib3V0cHV0UmFuZ2UiLCJtYXAiLCJjYWxjdWxhdGVDb2xvciIsIm92ZXJsYXlUcmFuc3BhcmVuY3kiLCJlbGV2YXRpb25PdmVybGF5VHJhbnNwYXJlbmN5IiwibWl4IiwiaGV4Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N0eWxlcy9vdmVybGF5LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUFBLFlBQUEsR0FBQUMsT0FBQTtBQUVBLElBQUFDLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUVBLElBQUFHLFVBQUEsR0FBQUgsT0FBQTtBQUFxRCxTQUFBRSx1QkFBQUUsR0FBQTtFQUFBLE9BQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUE7SUFBQUUsT0FBQSxFQUFBRjtFQUFBO0FBQUE7QUFFOUMsSUFBTUcsZUFBZSxHQUMxQixTQURXQSxlQUFlQSxDQUMxQkMsRUFBcUU7RUFBQSxPQUM1Q0EsRUFBRSxZQUFZVCxZQUFBLENBQUFVLFFBQVEsQ0FBQ0MsS0FBSztBQUFBO0FBQUNDLE9BQUEsQ0FBQUosZUFBQSxHQUFBQSxlQUFBO0FBRXpDLFNBQVNLLE9BQU9BLENBQzdCQyxTQUFZLEVBRWlFO0VBQUEsSUFBQUMsb0JB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