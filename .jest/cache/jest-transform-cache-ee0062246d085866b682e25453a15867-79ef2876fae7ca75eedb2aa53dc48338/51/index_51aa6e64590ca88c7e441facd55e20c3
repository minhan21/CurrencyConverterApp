9541506eddeb1f699852e1f42a9ca496
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
Object.defineProperty(exports, "defaultStyles", {
  enumerable: true,
  get: function get() {
    return _styles.defaultStyles;
  }
});
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _picker = require("@react-native-picker/picker");
var _lodash = _interopRequireDefault(require("lodash.isequal"));
var _lodash2 = _interopRequireDefault(require("lodash.isobject"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _styles = require("./styles");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var RNPickerSelect = exports.default = function (_PureComponent) {
  function RNPickerSelect(props) {
    var _this;
    (0, _classCallCheck2.default)(this, RNPickerSelect);
    _this = _callSuper(this, RNPickerSelect, [props]);
    _this.componentDidUpdate = function (prevProps, prevState) {
      var items = RNPickerSelect.handlePlaceholder({
        placeholder: _this.props.placeholder
      }).concat(_this.props.items);
      var itemsChanged = !(0, _lodash.default)(prevState.items, items);
      var _RNPickerSelect$getSe = RNPickerSelect.getSelectedItem({
          items: items,
          key: _this.props.itemKey,
          value: _this.props.value
        }),
        selectedItem = _RNPickerSelect$getSe.selectedItem,
        idx = _RNPickerSelect$getSe.idx;
      var selectedItemChanged = !(0, _lodash.default)(_this.props.value, undefined) && !(0, _lodash.default)(prevState.selectedItem, selectedItem);
      if (itemsChanged || selectedItemChanged) {
        _this.props.onValueChange(selectedItem.value, idx);
        _this.setState(_objectSpread(_objectSpread({}, itemsChanged ? {
          items: items
        } : {}), selectedItemChanged ? {
          selectedItem: selectedItem
        } : {}));
      }
    };
    var _items = RNPickerSelect.handlePlaceholder({
      placeholder: props.placeholder
    }).concat(props.items);
    var _RNPickerSelect$getSe2 = RNPickerSelect.getSelectedItem({
        items: _items,
        key: props.itemKey,
        value: props.value
      }),
      _selectedItem = _RNPickerSelect$getSe2.selectedItem;
    _this.state = {
      items: _items,
      selectedItem: _selectedItem,
      showPicker: false,
      animationType: undefined,
      orientation: 'portrait',
      doneDepressed: false
    };
    _this.onUpArrow = _this.onUpArrow.bind(_this);
    _this.onDownArrow = _this.onDownArrow.bind(_this);
    _this.onValueChange = _this.onValueChange.bind(_this);
    _this.onOrientationChange = _this.onOrientationChange.bind(_this);
    _this.setInputRef = _this.setInputRef.bind(_this);
    _this.togglePicker = _this.togglePicker.bind(_this);
    _this.renderInputAccessoryView = _this.renderInputAccessoryView.bind(_this);
    return _this;
  }
  (0, _inherits2.default)(RNPickerSelect, _PureComponent);
  return (0, _createClass2.default)(RNPickerSelect, [{
    key: "onUpArrow",
    value: function onUpArrow() {
      var onUpArrow = this.props.onUpArrow;
      this.togglePicker(false, onUpArrow);
    }
  }, {
    key: "onDownArrow",
    value: function onDownArrow() {
      var onDownArrow = this.props.onDownArrow;
      this.togglePicker(false, onDownArrow);
    }
  }, {
    key: "onValueChange",
    value: function onValueChange(value, index) {
      var onValueChange = this.props.onValueChange;
      onValueChange(value, index);
      this.setState(function (prevState) {
        return {
          selectedItem: prevState.items[index]
        };
      });
    }
  }, {
    key: "onOrientationChange",
    value: function onOrientationChange(_ref) {
      var nativeEvent = _ref.nativeEvent;
      this.setState({
        orientation: nativeEvent.orientation
      });
    }
  }, {
    key: "setInputRef",
    value: function setInputRef(ref) {
      this.inputRef = ref;
    }
  }, {
    key: "getPlaceholderStyle",
    value: function getPlaceholderStyle() {
      var _this$props = this.props,
        placeholder = _this$props.placeholder,
        style = _this$props.style;
      var selectedItem = this.state.selectedItem;
      if (!(0, _lodash.default)(placeholder, {}) && selectedItem.label === placeholder.label) {
        return _objectSpread(_objectSpread({}, _styles.defaultStyles.placeholder), style.placeholder);
      }
      return {};
    }
  }, {
    key: "isDarkTheme",
    value: function isDarkTheme() {
      var darkTheme = this.props.darkTheme;
      return _reactNative.Platform.OS === 'ios' && darkTheme;
    }
  }, {
    key: "triggerOpenCloseCallbacks",
    value: function triggerOpenCloseCallbacks(donePressed) {
      var _this$props2 = this.props,
        onOpen = _this$props2.onOpen,
        onClose = _this$props2.onClose;
      var showPicker = this.state.showPicker;
      if (!showPicker && onOpen) {
        onOpen();
      }
      if (showPicker && onClose) {
        onClose(donePressed);
      }
    }
  }, {
    key: "togglePicker",
    value: function togglePicker() {
      var animate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var postToggleCallback = arguments.length > 1 ? arguments[1] : undefined;
      var donePressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var _this$props3 = this.props,
        modalProps = _this$props3.modalProps,
        disabled = _this$props3.disabled;
      var showPicker = this.state.showPicker;
      if (disabled) {
        return;
      }
      if (!showPicker) {
        _reactNative.Keyboard.dismiss();
      }
      var animationType = modalProps && modalProps.animationType ? modalProps.animationType : 'slide';
      this.triggerOpenCloseCallbacks(donePressed);
      this.setState(function (prevState) {
        return {
          animationType: animate ? animationType : undefined,
          showPicker: !prevState.showPicker
        };
      }, function () {
        if (postToggleCallback) {
          postToggleCallback();
        }
      });
    }
  }, {
    key: "renderPickerItems",
    value: function renderPickerItems() {
      var items = this.state.items;
      var defaultItemColor = this.isDarkTheme() ? '#fff' : undefined;
      return items.map(function (item) {
        return (0, _jsxRuntime.jsx)(_picker.Picker.Item, {
          label: item.label,
          value: item.value,
          color: item.color || defaultItemColor,
          testID: item.testID
        }, item.key || item.label);
      });
    }
  }, {
    key: "renderInputAccessoryView",
    value: function renderInputAccessoryView() {
      var _this2 = this;
      var _this$props4 = this.props,
        InputAccessoryView = _this$props4.InputAccessoryView,
        doneText = _this$props4.doneText,
        onUpArrow = _this$props4.onUpArrow,
        onDownArrow = _this$props4.onDownArrow,
        onDonePress = _this$props4.onDonePress,
        style = _this$props4.style,
        touchableDoneProps = _this$props4.touchableDoneProps;
      var doneDepressed = this.state.doneDepressed;
      if (InputAccessoryView) {
        return (0, _jsxRuntime.jsx)(InputAccessoryView, {
          testID: "custom_input_accessory_view"
        });
      }
      return (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [_styles.defaultStyles.modalViewMiddle, this.isDarkTheme() ? _styles.defaultStyles.modalViewMiddleDark : {}, this.isDarkTheme() ? style.modalViewMiddleDark : style.modalViewMiddle],
        testID: "input_accessory_view",
        children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: [_styles.defaultStyles.chevronContainer, style.chevronContainer],
          children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            activeOpacity: onUpArrow ? 0.5 : 1,
            onPress: onUpArrow ? this.onUpArrow : null,
            children: (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: [_styles.defaultStyles.chevron, this.isDarkTheme() ? _styles.defaultStyles.chevronDark : {}, this.isDarkTheme() ? style.chevronDark : style.chevron, _styles.defaultStyles.chevronUp, style.chevronUp, onUpArrow ? [_styles.defaultStyles.chevronActive, style.chevronActive] : {}]
            })
          }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            activeOpacity: onDownArrow ? 0.5 : 1,
            onPress: onDownArrow ? this.onDownArrow : null,
            children: (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: [_styles.defaultStyles.chevron, this.isDarkTheme() ? _styles.defaultStyles.chevronDark : {}, this.isDarkTheme() ? style.chevronDark : style.chevron, _styles.defaultStyles.chevronDown, style.chevronDown, onDownArrow ? [_styles.defaultStyles.chevronActive, style.chevronActive] : {}]
            })
          })]
        }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, _objectSpread(_objectSpread({
          testID: "done_button",
          onPress: function onPress() {
            _this2.togglePicker(true, onDonePress, true);
          },
          onPressIn: function onPressIn() {
            _this2.setState({
              doneDepressed: true
            });
          },
          onPressOut: function onPressOut() {
            _this2.setState({
              doneDepressed: false
            });
          },
          hitSlop: {
            top: 4,
            right: 4,
            bottom: 4,
            left: 4
          }
        }, touchableDoneProps), {}, {
          children: (0, _jsxRuntime.jsx)(_reactNative.View, {
            testID: "needed_for_touchable",
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              testID: "done_text",
              allowFontScaling: false,
              style: [_styles.defaultStyles.done, this.isDarkTheme() ? _styles.defaultStyles.doneDark : {}, this.isDarkTheme() ? style.doneDark : style.done, doneDepressed ? [_styles.defaultStyles.doneDepressed, style.doneDepressed] : {}],
              children: doneText
            })
          })
        }))]
      });
    }
  }, {
    key: "renderIcon",
    value: function renderIcon() {
      var _this$props5 = this.props,
        style = _this$props5.style,
        Icon = _this$props5.Icon;
      if (!Icon) {
        return null;
      }
      return (0, _jsxRuntime.jsx)(_reactNative.View, {
        testID: "icon_container",
        style: [_styles.defaultStyles.iconContainer, style.iconContainer],
        children: (0, _jsxRuntime.jsx)(Icon, {
          testID: "icon"
        })
      });
    }
  }, {
    key: "renderTextInputOrChildren",
    value: function renderTextInputOrChildren() {
      var _this$props6 = this.props,
        children = _this$props6.children,
        style = _this$props6.style,
        textInputProps = _this$props6.textInputProps;
      var selectedItem = this.state.selectedItem;
      var containerStyle = _reactNative.Platform.OS === 'ios' ? style.inputIOSContainer : style.inputAndroidContainer;
      if (children) {
        return (0, _jsxRuntime.jsx)(_reactNative.View, {
          pointerEvents: "box-only",
          style: containerStyle,
          children: children
        });
      }
      return (0, _jsxRuntime.jsxs)(_reactNative.View, {
        pointerEvents: "box-only",
        style: containerStyle,
        children: [(0, _jsxRuntime.jsx)(_reactNative.TextInput, _objectSpread({
          testID: "text_input",
          style: [_reactNative.Platform.OS === 'ios' ? style.inputIOS : style.inputAndroid, this.getPlaceholderStyle()],
          value: selectedItem.inputLabel ? selectedItem.inputLabel : selectedItem.label,
          ref: this.setInputRef,
          editable: false
        }, textInputProps)), this.renderIcon()]
      });
    }
  }, {
    key: "renderIOS",
    value: function renderIOS() {
      var _this3 = this;
      var _this$props7 = this.props,
        style = _this$props7.style,
        modalProps = _this$props7.modalProps,
        pickerProps = _this$props7.pickerProps,
        touchableWrapperProps = _this$props7.touchableWrapperProps;
      var _this$state = this.state,
        animationType = _this$state.animationType,
        orientation = _this$state.orientation,
        selectedItem = _this$state.selectedItem,
        showPicker = _this$state.showPicker;
      return (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [_styles.defaultStyles.viewContainer, style.viewContainer],
        children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, _objectSpread(_objectSpread({
          testID: "ios_touchable_wrapper",
          onPress: function onPress() {
            _this3.togglePicker(true);
          },
          activeOpacity: 1
        }, touchableWrapperProps), {}, {
          children: this.renderTextInputOrChildren()
        })), (0, _jsxRuntime.jsxs)(_reactNative.Modal, _objectSpread(_objectSpread({
          testID: "ios_modal",
          visible: showPicker,
          transparent: true,
          animationType: animationType,
          supportedOrientations: ['portrait', 'landscape'],
          onOrientationChange: this.onOrientationChange
        }, modalProps), {}, {
          children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            style: [_styles.defaultStyles.modalViewTop, style.modalViewTop],
            testID: "ios_modal_top",
            onPress: function onPress() {
              _this3.togglePicker(true);
            }
          }), this.renderInputAccessoryView(), (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: [_styles.defaultStyles.modalViewBottom, this.isDarkTheme() ? _styles.defaultStyles.modalViewBottomDark : {}, {
              height: orientation === 'portrait' ? 215 : 162
            }, this.isDarkTheme() ? style.modalViewBottomDark : style.modalViewBottom],
            children: (0, _jsxRuntime.jsx)(_picker.Picker, _objectSpread(_objectSpread({
              testID: "ios_picker",
              onValueChange: this.onValueChange,
              selectedValue: selectedItem.value
            }, pickerProps), {}, {
              children: this.renderPickerItems()
            }))
          })]
        }))]
      });
    }
  }, {
    key: "renderAndroidHeadless",
    value: function renderAndroidHeadless() {
      var _this$props8 = this.props,
        disabled = _this$props8.disabled,
        Icon = _this$props8.Icon,
        style = _this$props8.style,
        pickerProps = _this$props8.pickerProps,
        onOpen = _this$props8.onOpen,
        touchableWrapperProps = _this$props8.touchableWrapperProps,
        fixAndroidTouchableBug = _this$props8.fixAndroidTouchableBug;
      var selectedItem = this.state.selectedItem;
      var Component = fixAndroidTouchableBug ? _reactNative.View : _reactNative.TouchableOpacity;
      return (0, _jsxRuntime.jsx)(Component, _objectSpread(_objectSpread({
        testID: "android_touchable_wrapper",
        onPress: onOpen,
        activeOpacity: 1
      }, touchableWrapperProps), {}, {
        children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: style.headlessAndroidContainer,
          children: [this.renderTextInputOrChildren(), (0, _jsxRuntime.jsx)(_picker.Picker, _objectSpread(_objectSpread({
            style: [Icon ? {
              backgroundColor: 'transparent'
            } : {}, _styles.defaultStyles.headlessAndroidPicker, style.headlessAndroidPicker],
            testID: "android_picker_headless",
            enabled: !disabled,
            onValueChange: this.onValueChange,
            selectedValue: selectedItem.value
          }, pickerProps), {}, {
            children: this.renderPickerItems()
          }))]
        })
      }));
    }
  }, {
    key: "renderAndroidNativePickerStyle",
    value: function renderAndroidNativePickerStyle() {
      var _this$props9 = this.props,
        disabled = _this$props9.disabled,
        Icon = _this$props9.Icon,
        style = _this$props9.style,
        pickerProps = _this$props9.pickerProps;
      var selectedItem = this.state.selectedItem;
      return (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [_styles.defaultStyles.viewContainer, style.viewContainer],
        children: [(0, _jsxRuntime.jsx)(_picker.Picker, _objectSpread(_objectSpread({
          style: [Icon ? {
            backgroundColor: 'transparent'
          } : {}, style.inputAndroid, this.getPlaceholderStyle()],
          testID: "android_picker",
          enabled: !disabled,
          onValueChange: this.onValueChange,
          selectedValue: selectedItem.value
        }, pickerProps), {}, {
          children: this.renderPickerItems()
        })), this.renderIcon()]
      });
    }
  }, {
    key: "renderWeb",
    value: function renderWeb() {
      var _this$props10 = this.props,
        disabled = _this$props10.disabled,
        style = _this$props10.style,
        pickerProps = _this$props10.pickerProps;
      var selectedItem = this.state.selectedItem;
      return (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [_styles.defaultStyles.viewContainer, style.viewContainer],
        children: [(0, _jsxRuntime.jsx)(_picker.Picker, _objectSpread(_objectSpread({
          style: [style.inputWeb],
          testID: "web_picker",
          enabled: !disabled,
          onValueChange: this.onValueChange,
          selectedValue: selectedItem.value
        }, pickerProps), {}, {
          children: this.renderPickerItems()
        })), this.renderIcon()]
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props11 = this.props,
        children = _this$props11.children,
        useNativeAndroidPickerStyle = _this$props11.useNativeAndroidPickerStyle;
      if (_reactNative.Platform.OS === 'ios') {
        return this.renderIOS();
      }
      if (_reactNative.Platform.OS === 'web') {
        return this.renderWeb();
      }
      if (children || !useNativeAndroidPickerStyle) {
        return this.renderAndroidHeadless();
      }
      return this.renderAndroidNativePickerStyle();
    }
  }], [{
    key: "handlePlaceholder",
    value: function handlePlaceholder(_ref2) {
      var placeholder = _ref2.placeholder;
      if ((0, _lodash.default)(placeholder, {})) {
        return [];
      }
      return [placeholder];
    }
  }, {
    key: "getSelectedItem",
    value: function getSelectedItem(_ref3) {
      var items = _ref3.items,
        key = _ref3.key,
        value = _ref3.value;
      var idx = items.findIndex(function (item) {
        if (item.key && key) {
          return (0, _lodash.default)(item.key, key);
        }
        if ((0, _lodash2.default)(item.value) || (0, _lodash2.default)(value)) {
          return (0, _lodash.default)(item.value, value);
        }
        return (0, _lodash.default)(String(item.value), String(value));
      });
      if (idx === -1) {
        idx = 0;
      }
      return {
        selectedItem: items[idx] || {},
        idx: idx
      };
    }
  }]);
}(_react.PureComponent);
RNPickerSelect.propTypes = {
  onValueChange: _propTypes.default.func.isRequired,
  items: _propTypes.default.arrayOf(_propTypes.default.shape({
    label: _propTypes.default.string.isRequired,
    value: _propTypes.default.any.isRequired,
    testID: _propTypes.default.string,
    inputLabel: _propTypes.default.string,
    key: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    color: _propTypes.default.string
  })).isRequired,
  value: _propTypes.default.any,
  placeholder: _propTypes.default.shape({
    label: _propTypes.default.string,
    value: _propTypes.default.any,
    key: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
    color: _propTypes.default.string
  }),
  disabled: _propTypes.default.bool,
  itemKey: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  style: _propTypes.default.shape({}),
  children: _propTypes.default.any,
  onOpen: _propTypes.default.func,
  useNativeAndroidPickerStyle: _propTypes.default.bool,
  fixAndroidTouchableBug: _propTypes.default.bool,
  darkTheme: _propTypes.default.bool,
  doneText: _propTypes.default.string,
  onDonePress: _propTypes.default.func,
  onUpArrow: _propTypes.default.func,
  onDownArrow: _propTypes.default.func,
  onClose: _propTypes.default.func,
  modalProps: _propTypes.default.shape({}),
  textInputProps: _propTypes.default.shape({}),
  pickerProps: _propTypes.default.shape({}),
  touchableDoneProps: _propTypes.default.shape({}),
  touchableWrapperProps: _propTypes.default.shape({}),
  Icon: _propTypes.default.func,
  InputAccessoryView: _propTypes.default.func
};
RNPickerSelect.defaultProps = {
  value: undefined,
  placeholder: {
    label: 'Select an item...',
    value: null,
    color: '#9EA0A4'
  },
  disabled: false,
  itemKey: null,
  style: {},
  children: null,
  useNativeAndroidPickerStyle: true,
  fixAndroidTouchableBug: false,
  doneText: 'Done',
  onDonePress: null,
  onUpArrow: null,
  onDownArrow: null,
  onOpen: null,
  onClose: null,
  modalProps: {},
  textInputProps: {},
  pickerProps: {},
  touchableDoneProps: {},
  touchableWrapperProps: {},
  Icon: null,
  InputAccessoryView: null,
  darkTheme: false
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,