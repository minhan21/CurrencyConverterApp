1384889d9e370351e012a937062cda2d
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var SyntheticError = function (_Error) {
  function SyntheticError() {
    var _this;
    (0, _classCallCheck2.default)(this, SyntheticError);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, SyntheticError, [].concat(args));
    _this.name = '';
    return _this;
  }
  (0, _inherits2.default)(SyntheticError, _Error);
  return (0, _createClass2.default)(SyntheticError);
}((0, _wrapNativeSuper2.default)(Error));
var userExceptionDecorator;
var inUserExceptionDecorator = false;
var decoratedExtraDataKey = Symbol('decoratedExtraDataKey');
function unstable_setExceptionDecorator(exceptionDecorator) {
  userExceptionDecorator = exceptionDecorator;
}
function preprocessException(data) {
  if (userExceptionDecorator && !inUserExceptionDecorator) {
    inUserExceptionDecorator = true;
    try {
      return userExceptionDecorator(data);
    } catch (_unused) {} finally {
      inUserExceptionDecorator = false;
    }
  }
  return data;
}
var exceptionID = 0;
function reportException(e, isFatal, reportToConsole) {
  var parseErrorStack = require('./Devtools/parseErrorStack');
  var stack = parseErrorStack(e == null ? void 0 : e.stack);
  var currentExceptionID = ++exceptionID;
  var originalMessage = e.message || '';
  var message = originalMessage;
  if (e.componentStack != null) {
    message += `\n\nThis error is located at:${e.componentStack}`;
  }
  var namePrefix = e.name == null || e.name === '' ? '' : `${e.name}: `;
  if (!message.startsWith(namePrefix)) {
    message = namePrefix + message;
  }
  message = e.jsEngine == null ? message : `${message}, js engine: ${e.jsEngine}`;
  var extraData = _objectSpread(_objectSpread({}, e[decoratedExtraDataKey]), {}, {
    jsEngine: e.jsEngine,
    rawStack: e.stack
  });
  if (e.cause != null && typeof e.cause === 'object') {
    extraData.stackSymbols = e.cause.stackSymbols;
    extraData.stackReturnAddresses = e.cause.stackReturnAddresses;
    extraData.stackElements = e.cause.stackElements;
  }
  var data = preprocessException({
    message: message,
    originalMessage: message === originalMessage ? null : originalMessage,
    name: e.name == null || e.name === '' ? null : e.name,
    componentStack: typeof e.componentStack === 'string' ? e.componentStack : null,
    stack: stack,
    id: currentExceptionID,
    isFatal: isFatal,
    extraData: extraData
  });
  if (reportToConsole) {
    console.error(data.message);
  }
  if (__DEV__) {
    var LogBox = require('../LogBox/LogBox').default;
    LogBox.addException(_objectSpread(_objectSpread({}, data), {}, {
      isComponentError: !!e.isComponentError
    }));
  } else if (isFatal || e.type !== 'warn') {
    var NativeExceptionsManager = require('./NativeExceptionsManager').default;
    if (NativeExceptionsManager) {
      NativeExceptionsManager.reportException(data);
    }
  }
}
var inExceptionHandler = false;
function handleException(e, isFatal) {
  var error;
  if (e instanceof Error) {
    error = e;
  } else {
    error = new SyntheticError(e);
  }
  try {
    inExceptionHandler = true;
    reportException(error, isFatal, true);
  } finally {
    inExceptionHandler = false;
  }
}
function reactConsoleErrorHandler() {
  var _console;
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }
  (_console = console)._errorOriginal.apply(_console, args);
  if (!console.reportErrorsAsExceptions) {
    return;
  }
  if (inExceptionHandler) {
    return;
  }
  var error;
  var firstArg = args[0];
  if (firstArg != null && firstArg.stack) {
    error = firstArg;
  } else {
    var stringifySafe = require('../Utilities/stringifySafe').default;
    if (typeof firstArg === 'string' && firstArg.startsWith('Warning: ')) {
      return;
    }
    var message = args.map(function (arg) {
      return typeof arg === 'string' ? arg : stringifySafe(arg);
    }).join(' ');
    error = new SyntheticError(message);
    error.name = 'console.error';
  }
  reportException(error, false, false);
}
function installConsoleErrorReporter() {
  if (console._errorOriginal) {
    return;
  }
  console._errorOriginal = console.error.bind(console);
  console.error = reactConsoleErrorHandler;
  if (console.reportErrorsAsExceptions === undefined) {
    console.reportErrorsAsExceptions = true;
  }
}
module.exports = {
  decoratedExtraDataKey: decoratedExtraDataKey,
  handleException: handleException,
  installConsoleErrorReporter: installConsoleErrorReporter,
  SyntheticError: SyntheticError,
  unstable_setExceptionDecorator: unstable_setExceptionDecorator
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJfY3JlYXRlQ2xhc3MyIiwiX2NsYXNzQ2FsbENoZWNrMiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsIl9nZXRQcm90b3R5cGVPZjIiLCJfaW5oZXJpdHMyIiwiX3dyYXBOYXRpdmVTdXBlcjIiLCJvd25LZXlzIiwiZSIsInIiLCJ0IiwiT2JqZWN0Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm8iLCJmaWx0ZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImZvckVhY2giLCJkZWZhdWx0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIl9jYWxsU3VwZXIiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImNvbnN0cnVjdG9yIiwiQm9vbGVhbiIsInByb3RvdHlwZSIsInZhbHVlT2YiLCJjYWxsIiwiU3ludGhldGljRXJyb3IiLCJfRXJyb3IiLCJfdGhpcyIsIl9sZW4iLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiY29uY2F0IiwibmFtZSIsIkVycm9yIiwidXNlckV4Y2VwdGlvbkRlY29yYXRvciIsImluVXNlckV4Y2VwdGlvbkRlY29yYXRvciIsImRlY29yYXRlZEV4dHJhRGF0YUtleSIsIlN5bWJvbCIsInVuc3RhYmxlX3NldEV4Y2VwdGlvbkRlY29yYXRvciIsImV4Y2VwdGlvbkRlY29yYXRvciIsInByZXByb2Nlc3NFeGNlcHRpb24iLCJkYXRhIiwiX3VudXNlZCIsImV4Y2VwdGlvbklEIiwicmVwb3J0RXhjZXB0aW9uIiwiaXNGYXRhbCIsInJlcG9ydFRvQ29uc29sZSIsInBhcnNlRXJyb3JTdGFjayIsInN0YWNrIiwiY3VycmVudEV4Y2VwdGlvbklEIiwib3JpZ2luYWxNZXNzYWdlIiwibWVzc2FnZSIsImNvbXBvbmVudFN0YWNrIiwibmFtZVByZWZpeCIsInN0YXJ0c1dpdGgiLCJqc0VuZ2luZSIsImV4dHJhRGF0YSIsInJhd1N0YWNrIiwiY2F1c2UiLCJzdGFja1N5bWJvbHMiLCJzdGFja1JldHVybkFkZHJlc3NlcyIsInN0YWNrRWxlbWVudHMiLCJpZCIsImNvbnNvbGUiLCJlcnJvciIsIl9fREVWX18iLCJMb2dCb3giLCJhZGRFeGNlcHRpb24iLCJpc0NvbXBvbmVudEVycm9yIiwidHlwZSIsIk5hdGl2ZUV4Y2VwdGlvbnNNYW5hZ2VyIiwiaW5FeGNlcHRpb25IYW5kbGVyIiwiaGFuZGxlRXhjZXB0aW9uIiwicmVhY3RDb25zb2xlRXJyb3JIYW5kbGVyIiwiX2NvbnNvbGUiLCJfbGVuMiIsIl9rZXkyIiwiX2Vycm9yT3JpZ2luYWwiLCJyZXBvcnRFcnJvcnNBc0V4Y2VwdGlvbnMiLCJmaXJzdEFyZyIsInN0cmluZ2lmeVNhZmUiLCJtYXAiLCJhcmciLCJqb2luIiwiaW5zdGFsbENvbnNvbGVFcnJvclJlcG9ydGVyIiwiYmluZCIsInVuZGVmaW5lZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJFeGNlcHRpb25zTWFuYWdlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdHlwZSB7RXh0ZW5kZWRFcnJvcn0gZnJvbSAnLi9FeHRlbmRlZEVycm9yJztcbmltcG9ydCB0eXBlIHtFeGNlcHRpb25EYXRhfSBmcm9tICcuL05hdGl2ZUV4Y2VwdGlvbnNNYW5hZ2VyJztcblxuY2xhc3MgU3ludGhldGljRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIG5hbWU6IHN0cmluZyA9ICcnO1xufVxuXG50eXBlIEV4Y2VwdGlvbkRlY29yYXRvciA9IEV4Y2VwdGlvbkRhdGEgPT4gRXhjZXB0aW9uRGF0YTtcblxubGV0IHVzZXJFeGNlcHRpb25EZWNvcmF0b3I6ID9FeGNlcHRpb25EZWNvcmF0b3I7XG5sZXQgaW5Vc2VyRXhjZXB0aW9uRGVjb3JhdG9yID0gZmFsc2U7XG5cbi8vIFRoaXMgU3ltYm9sIGlzIHVzZWQgdG8gZGVjb3JhdGUgYW4gRXh0ZW5kZWRFcnJvciB3aXRoIGV4dHJhIGRhdGEgaW4gc2VsZWN0IHVzZWNhc2VzLlxuLy8gTm90ZSB0aGF0IGRhdGEgcGFzc2VkIHVzaW5nIHRoaXMgbWV0aG9kIHNob3VsZCBiZSBzdHJpY3RseSBjb250YWluZWQsXG4vLyBhcyBkYXRhIHRoYXQncyBub3Qgc2VyaWFsaXphYmxlL3RvbyBsYXJnZSBtYXkgY2F1c2UgaXNzdWVzIHdpdGggcGFzc2luZyB0aGUgZXJyb3IgdG8gdGhlIG5hdGl2ZSBjb2RlLlxuY29uc3QgZGVjb3JhdGVkRXh0cmFEYXRhS2V5OiBzeW1ib2wgPSBTeW1ib2woJ2RlY29yYXRlZEV4dHJhRGF0YUtleScpO1xuXG4vKipcbiAqIEFsbG93cyB0aGUgYXBwIHRvIGFkZCBpbmZvcm1hdGlvbiB0byB0aGUgZXhjZXB0aW9uIHJlcG9ydCBiZWZvcmUgaXQgaXMgc2VudFxuICogdG8gbmF0aXZlLiBUaGlzIEFQSSBpcyBub3QgZmluYWwuXG4gKi9cblxuZnVuY3Rpb24gdW5zdGFibGVfc2V0RXhjZXB0aW9uRGVjb3JhdG9yKFxuICBleGNlcHRpb25EZWNvcmF0b3I6ID9FeGNlcHRpb25EZWNvcmF0b3IsXG4pIHtcbiAgdXNlckV4Y2VwdGlvbkRlY29yYXRvciA9IGV4Y2VwdGlvbkRlY29yYXRvcjtcbn1cblxuZnVuY3Rpb24gcHJlcHJvY2Vzc0V4Y2VwdGlvbihkYXRhOiBFeGNlcHRpb25EYXRhKTogRXhjZXB0aW9uRGF0YSB7XG4gIGlmICh1c2VyRXhjZXB0aW9uRGVjb3JhdG9yICYmICFpblVzZXJFeGNlcHRpb25EZWNvcmF0b3IpIHtcbiAgICBpblVzZXJFeGNlcHRpb25EZWNvcmF0b3IgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gdXNlckV4Y2VwdGlvbkRlY29yYXRvcihkYXRhKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIC8vIEZhbGwgdGhyb3VnaFxuICAgIH0gZmluYWxseSB7XG4gICAgICBpblVzZXJFeGNlcHRpb25EZWNvcmF0b3IgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogSGFuZGxlcyB0aGUgZGV2ZWxvcGVyLXZpc2libGUgYXNwZWN0IG9mIGVycm9ycyBhbmQgZXhjZXB0aW9uc1xuICovXG5sZXQgZXhjZXB0aW9uSUQgPSAwO1xuZnVuY3Rpb24gcmVwb3J0RXhjZXB0aW9uKFxuICBlOiBFeHRlbmRlZEVycm9yLFxuICBpc0ZhdGFsOiBib29sZWFuLFxuICByZXBvcnRUb0NvbnNvbGU6IGJvb2xlYW4sIC8vIG9ubHkgdHJ1ZSB3aGVuIGNvbWluZyBmcm9tIGhhbmRsZUV4Y2VwdGlvbjsgdGhlIGVycm9yIGhhcyBub3QgeWV0IGJlZW4gbG9nZ2VkXG4pIHtcbiAgY29uc3QgcGFyc2VFcnJvclN0YWNrID0gcmVxdWlyZSgnLi9EZXZ0b29scy9wYXJzZUVycm9yU3RhY2snKTtcbiAgY29uc3Qgc3RhY2sgPSBwYXJzZUVycm9yU3RhY2soZT8uc3RhY2spO1xuICBjb25zdCBjdXJyZW50RXhjZXB0aW9uSUQgPSArK2V4Y2VwdGlvbklEO1xuICBjb25zdCBvcmlnaW5hbE1lc3NhZ2UgPSBlLm1lc3NhZ2UgfHwgJyc7XG4gIGxldCBtZXNzYWdlID0gb3JpZ2luYWxNZXNzYWdlO1xuICBpZiAoZS5jb21wb25lbnRTdGFjayAhPSBudWxsKSB7XG4gICAgbWVzc2FnZSArPSBgXFxuXFxuVGhpcyBlcnJvciBpcyBsb2NhdGVkIGF0OiR7ZS5jb21wb25lbnRTdGFja31gO1xuICB9XG4gIGNvbnN0IG5hbWVQcmVmaXggPSBlLm5hbWUgPT0gbnVsbCB8fCBlLm5hbWUgPT09ICcnID8gJycgOiBgJHtlLm5hbWV9OiBgO1xuXG4gIGlmICghbWVzc2FnZS5zdGFydHNXaXRoKG5hbWVQcmVmaXgpKSB7XG4gICAgbWVzc2FnZSA9IG5hbWVQcmVmaXggKyBtZXNzYWdlO1xuICB9XG5cbiAgbWVzc2FnZSA9XG4gICAgZS5qc0VuZ2luZSA9PSBudWxsID8gbWVzc2FnZSA6IGAke21lc3NhZ2V9LCBqcyBlbmdpbmU6ICR7ZS5qc0VuZ2luZX1gO1xuXG4gIC8vICRGbG93Rml4TWVbdW5jbGVhci10eXBlXVxuICBjb25zdCBleHRyYURhdGE6IE9iamVjdCA9IHtcbiAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS11c2VdIHdlIGNhbid0IGRlZmluZSBhIHR5cGUgd2l0aCBhIFN5bWJvbC1rZXllZCBmaWVsZCBpbiBmbG93XG4gICAgLi4uZVtkZWNvcmF0ZWRFeHRyYURhdGFLZXldLFxuICAgIGpzRW5naW5lOiBlLmpzRW5naW5lLFxuICAgIHJhd1N0YWNrOiBlLnN0YWNrLFxuICB9O1xuICBpZiAoZS5jYXVzZSAhPSBudWxsICYmIHR5cGVvZiBlLmNhdXNlID09PSAnb2JqZWN0Jykge1xuICAgIGV4dHJhRGF0YS5zdGFja1N5bWJvbHMgPSBlLmNhdXNlLnN0YWNrU3ltYm9scztcbiAgICBleHRyYURhdGEuc3RhY2tSZXR1cm5BZGRyZXNzZXMgPSBlLmNhdXNlLnN0YWNrUmV0dXJuQWRkcmVzc2VzO1xuICAgIGV4dHJhRGF0YS5zdGFja0VsZW1lbnRzID0gZS5jYXVzZS5zdGFja0VsZW1lbnRzO1xuICB9XG5cbiAgY29uc3QgZGF0YSA9IHByZXByb2Nlc3NFeGNlcHRpb24oe1xuICAgIG1lc3NhZ2UsXG4gICAgb3JpZ2luYWxNZXNzYWdlOiBtZXNzYWdlID09PSBvcmlnaW5hbE1lc3NhZ2UgPyBudWxsIDogb3JpZ2luYWxNZXNzYWdlLFxuICAgIG5hbWU6IGUubmFtZSA9PSBudWxsIHx8IGUubmFtZSA9PT0gJycgPyBudWxsIDogZS5uYW1lLFxuICAgIGNvbXBvbmVudFN0YWNrOlxuICAgICAgdHlwZW9mIGUuY29tcG9uZW50U3RhY2sgPT09ICdzdHJpbmcnID8gZS5jb21wb25lbnRTdGFjayA6IG51bGwsXG4gICAgc3RhY2ssXG4gICAgaWQ6IGN1cnJlbnRFeGNlcHRpb25JRCxcbiAgICBpc0ZhdGFsLFxuICAgIGV4dHJhRGF0YSxcbiAgfSk7XG5cbiAgaWYgKHJlcG9ydFRvQ29uc29sZSkge1xuICAgIC8vIHdlIGZlZWQgYmFjayBpbnRvIGNvbnNvbGUuZXJyb3IsIHRvIG1ha2Ugc3VyZSBhbnkgbWV0aG9kcyB0aGF0IGFyZVxuICAgIC8vIG1vbmtleSBwYXRjaGVkIG9uIHRvcCBvZiBjb25zb2xlLmVycm9yIGFyZSBjYWxsZWQgd2hlbiBjb21pbmcgZnJvbVxuICAgIC8vIGhhbmRsZUV4Y2VwdGlvblxuICAgIGNvbnNvbGUuZXJyb3IoZGF0YS5tZXNzYWdlKTtcbiAgfVxuXG4gIGlmIChfX0RFVl9fKSB7XG4gICAgY29uc3QgTG9nQm94ID0gcmVxdWlyZSgnLi4vTG9nQm94L0xvZ0JveCcpLmRlZmF1bHQ7XG4gICAgTG9nQm94LmFkZEV4Y2VwdGlvbih7XG4gICAgICAuLi5kYXRhLFxuICAgICAgaXNDb21wb25lbnRFcnJvcjogISFlLmlzQ29tcG9uZW50RXJyb3IsXG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoaXNGYXRhbCB8fCBlLnR5cGUgIT09ICd3YXJuJykge1xuICAgIGNvbnN0IE5hdGl2ZUV4Y2VwdGlvbnNNYW5hZ2VyID1cbiAgICAgIHJlcXVpcmUoJy4vTmF0aXZlRXhjZXB0aW9uc01hbmFnZXInKS5kZWZhdWx0O1xuICAgIGlmIChOYXRpdmVFeGNlcHRpb25zTWFuYWdlcikge1xuICAgICAgTmF0aXZlRXhjZXB0aW9uc01hbmFnZXIucmVwb3J0RXhjZXB0aW9uKGRhdGEpO1xuICAgIH1cbiAgfVxufVxuXG5kZWNsYXJlIHZhciBjb25zb2xlOiB7XG4gIGVycm9yOiB0eXBlb2YgY29uc29sZS5lcnJvcixcbiAgX2Vycm9yT3JpZ2luYWw6IHR5cGVvZiBjb25zb2xlLmVycm9yLFxuICByZXBvcnRFcnJvcnNBc0V4Y2VwdGlvbnM6IGJvb2xlYW4sXG4gIC4uLlxufTtcblxuLy8gSWYgd2UgdHJpZ2dlciBjb25zb2xlLmVycm9yIF9mcm9tXyBoYW5kbGVFeGNlcHRpb24sXG4vLyB3ZSBkbyB3YW50IHRvIG1ha2Ugc3VyZSB0aGF0IGNvbnNvbGUuZXJyb3IgZG9lc24ndCB0cmlnZ2VyIGVycm9yIHJlcG9ydGluZyBhZ2FpblxubGV0IGluRXhjZXB0aW9uSGFuZGxlciA9IGZhbHNlO1xuXG4vKipcbiAqIExvZ3MgZXhjZXB0aW9ucyB0byB0aGUgKG5hdGl2ZSkgY29uc29sZSBhbmQgZGlzcGxheXMgdGhlbVxuICovXG5mdW5jdGlvbiBoYW5kbGVFeGNlcHRpb24oZTogbWl4ZWQsIGlzRmF0YWw6IGJvb2xlYW4pIHtcbiAgbGV0IGVycm9yOiBFcnJvcjtcbiAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIGVycm9yID0gZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBXb3JrYXJvdW5kIGZvciByZXBvcnRpbmcgZXJyb3JzIGNhdXNlZCBieSBgdGhyb3cgJ3NvbWUgc3RyaW5nJ2BcbiAgICAvLyBVbmZvcnR1bmF0ZWx5IHRoZXJlIGlzIG5vIHdheSB0byBmaWd1cmUgb3V0IHRoZSBzdGFja3RyYWNlIGluIHRoaXNcbiAgICAvLyBjYXNlLCBzbyBpZiB5b3UgZW5kZWQgdXAgaGVyZSB0cnlpbmcgdG8gdHJhY2UgYW4gZXJyb3IsIGxvb2sgZm9yXG4gICAgLy8gYHRocm93ICc8ZXJyb3IgbWVzc2FnZT4nYCBzb21ld2hlcmUgaW4geW91ciBjb2RlYmFzZS5cbiAgICBlcnJvciA9IG5ldyBTeW50aGV0aWNFcnJvcihlKTtcbiAgfVxuICB0cnkge1xuICAgIGluRXhjZXB0aW9uSGFuZGxlciA9IHRydWU7XG4gICAgLyogJEZsb3dGaXhNZVtjbGFzcy1vYmplY3Qtc3VidHlwaW5nXSBhZGRlZCB3aGVuIGltcHJvdmluZyB0eXBpbmcgZm9yIHRoaXNcbiAgICAgKiBwYXJhbWV0ZXJzICovXG4gICAgcmVwb3J0RXhjZXB0aW9uKGVycm9yLCBpc0ZhdGFsLCAvKnJlcG9ydFRvQ29uc29sZSovIHRydWUpO1xuICB9IGZpbmFsbHkge1xuICAgIGluRXhjZXB0aW9uSGFuZGxlciA9IGZhbHNlO1xuICB9XG59XG5cbi8qICRGbG93Rml4TWVbbWlzc2luZy1sb2NhbC1hbm5vdF0gVGhlIHR5cGUgYW5ub3RhdGlvbihzKSByZXF1aXJlZCBieSBGbG93J3NcbiAqIExUSSB1cGRhdGUgY291bGQgbm90IGJlIGFkZGVkIHZpYSBjb2RlbW9kICovXG5mdW5jdGlvbiByZWFjdENvbnNvbGVFcnJvckhhbmRsZXIoLi4uYXJncykge1xuICAvLyBidWJibGUgdXAgdG8gYW55IG9yaWdpbmFsIGhhbmRsZXJzXG4gIGNvbnNvbGUuX2Vycm9yT3JpZ2luYWwoLi4uYXJncyk7XG4gIGlmICghY29uc29sZS5yZXBvcnRFcnJvcnNBc0V4Y2VwdGlvbnMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGluRXhjZXB0aW9uSGFuZGxlcikge1xuICAgIC8vIFRoZSBmdW5kYW1lbnRhbCB0cmljayBoZXJlIGlzIHRoYXQgYXJlIG11bHRpcGxlIGVudHJ5IHBvaW50IHRvIGxvZ2dpbmcgZXJyb3JzOlxuICAgIC8vIChzZWUgRDE5NzQzMDc1IGZvciBtb3JlIGJhY2tncm91bmQpXG4gICAgLy9cbiAgICAvLyAxLiBBbiB1bmNhdWdodCBleGNlcHRpb24gYmVpbmcgY2F1Z2h0IGJ5IHRoZSBnbG9iYWwgaGFuZGxlclxuICAgIC8vIDIuIEFuIGVycm9yIGJlaW5nIGxvZ2dlZCB0aHJvdyBjb25zb2xlLmVycm9yXG4gICAgLy9cbiAgICAvLyBIb3dldmVyLCBjb25zb2xlLmVycm9yIGlzIG1vbmtleSBwYXRjaGVkIG11bHRpcGxlIHRpbWVzOiBieSB0aGlzIG1vZHVsZSwgYW5kIGJ5IHRoZVxuICAgIC8vIERldlRvb2xzIHNldHVwIHRoYXQgc2VuZHMgbWVzc2FnZXMgdG8gTWV0cm8uXG4gICAgLy8gVGhlIHBhdGNoaW5nIG9yZGVyIGNhbm5vdCBiZSByZWxpZWQgdXBvbi5cbiAgICAvL1xuICAgIC8vIFNvLCBzb21lIHNjZW5hcmlvcyB0aGF0IGFyZSBoYW5kbGVkIGJ5IHRoaXMgZmxhZzpcbiAgICAvL1xuICAgIC8vIExvZ2dpbmcgYW4gZXJyb3I6XG4gICAgLy8gMS4gY29uc29sZS5lcnJvciBjYWxsZWQgZnJvbSB1c2VyIGNvZGVcbiAgICAvLyAyLiAocG9zc2libHkpIGFycml2ZXMgX2ZpcnN0XyBhdCBEZXZUb29sIGhhbmRsZXIsIHNlbmQgdG8gTWV0cm9cbiAgICAvLyAzLiBCdWJibGVzIHRvIGhlcmVcbiAgICAvLyA0LiBnb2VzIGludG8gcmVwb3J0IEV4Y2VwdGlvbi5cbiAgICAvLyA1LiBzaG91bGQgbm90IHRyaWdnZXIgY29uc29sZS5lcnJvciBhZ2FpbiwgdG8gYXZvaWQgbG9vcGluZyAvIGxvZ2dpbmcgdHdpY2VcbiAgICAvLyA2LiBzaG91bGQgc3RpbGwgYnViYmxlIHVwIHRvIG9yaWdpbmFsIGNvbnNvbGVcbiAgICAvLyAgICAod2hpY2ggbWlnaHQgZWl0aGVyIGJlIGNvbnNvbGUubG9nLCBvciB0aGUgRGV2VG9vbHMgaGFuZGxlciBpbiBjYXNlIGl0IHBhdGNoZWQgX2VhcmxpZXJfIGFuZCAoMikgZGlkbid0IGhhcHBlbilcbiAgICAvL1xuICAgIC8vIFRocm93aW5nIGFuIHVuY2F1Z2h0IGV4Y2VwdGlvbjpcbiAgICAvLyAxLiBleGNlcHRpb24gdGhyb3duXG4gICAgLy8gMi4gcGlja2VkIHVwIGJ5IGhhbmRsZUV4Y2VwdGlvblxuICAgIC8vIDMuIHNob3VsZCBiZSBzZW50IHRvIGNvbnNvbGUuZXJyb3IgKG5vdCBjb25zb2xlLl9lcnJvck9yaWdpbmFsLCBhcyBEZXZUb29scyBtaWdodCBoYXZlIHBhdGNoZWQgX2xhdGVyXyBhbmQgaXQgbmVlZHMgdG8gc2VuZCBpdCB0byBNZXRybylcbiAgICAvLyA0LiB0aGF0IF9taWdodF8gYnViYmxlIGFnYWluIHRvIHRoZSBgcmVhY3RDb25zb2xlRXJyb3JIYW5kbGVgIGRlZmluZWQgaGVyZVxuICAgIC8vICAgIC0+IHNob3VsZCBub3QgaGFuZGxlIGV4Y2VwdGlvbiBfYWdhaW5fLCB0byBhdm9pZCBsb29waW5nIC8gc2hvd2luZyB0d2ljZSAodGhpcyBjb2RlIGJyYW5jaClcbiAgICAvLyA1LiBzaG91bGQgc3RpbGwgYnViYmxlIHVwIHRvIG9yaWdpbmFsIGNvbnNvbGUgKHdoaWNoIG1pZ2h0IGVpdGhlciBiZSBjb25zb2xlLmxvZywgb3IgdGhlIERldlRvb2xzIGhhbmRsZXIgaW4gY2FzZSB0aGF0IG9uZSBwYXRjaGVkIF9lYXJsaWVyXylcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgZXJyb3I7XG5cbiAgY29uc3QgZmlyc3RBcmcgPSBhcmdzWzBdO1xuICBpZiAoZmlyc3RBcmc/LnN0YWNrKSB7XG4gICAgLy8gcmVwb3J0RXhjZXB0aW9uIHdpbGwgY29uc29sZS5lcnJvciB0aGlzIHdpdGggaGlnaCBlbm91Z2ggZmlkZWxpdHkuXG4gICAgZXJyb3IgPSBmaXJzdEFyZztcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBzdHJpbmdpZnlTYWZlID0gcmVxdWlyZSgnLi4vVXRpbGl0aWVzL3N0cmluZ2lmeVNhZmUnKS5kZWZhdWx0O1xuICAgIGlmICh0eXBlb2YgZmlyc3RBcmcgPT09ICdzdHJpbmcnICYmIGZpcnN0QXJnLnN0YXJ0c1dpdGgoJ1dhcm5pbmc6ICcpKSB7XG4gICAgICAvLyBSZWFjdCB3YXJuaW5ncyB1c2UgY29uc29sZS5lcnJvciBzbyB0aGF0IGEgc3RhY2sgdHJhY2UgaXMgc2hvd24sIGJ1dFxuICAgICAgLy8gd2UgZG9uJ3QgKGN1cnJlbnRseSkgd2FudCB0aGVzZSB0byBzaG93IGEgcmVkYm94XG4gICAgICAvLyAoTm90ZTogTG9naWMgZHVwbGljYXRlZCBpbiBwb2x5ZmlsbHMvY29uc29sZS5qcy4pXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG1lc3NhZ2UgPSBhcmdzXG4gICAgICAubWFwKGFyZyA9PiAodHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgPyBhcmcgOiBzdHJpbmdpZnlTYWZlKGFyZykpKVxuICAgICAgLmpvaW4oJyAnKTtcblxuICAgIGVycm9yID0gbmV3IFN5bnRoZXRpY0Vycm9yKG1lc3NhZ2UpO1xuICAgIGVycm9yLm5hbWUgPSAnY29uc29sZS5lcnJvcic7XG4gIH1cblxuICByZXBvcnRFeGNlcHRpb24oXG4gICAgLyogJEZsb3dGaXhNZVtjbGFzcy1vYmplY3Qtc3VidHlwaW5nXSBhZGRlZCB3aGVuIGltcHJvdmluZyB0eXBpbmcgZm9yIHRoaXNcbiAgICAgKiBwYXJhbWV0ZXJzICovXG4gICAgZXJyb3IsXG4gICAgZmFsc2UsIC8vIGlzRmF0YWxcbiAgICBmYWxzZSwgLy8gcmVwb3J0VG9Db25zb2xlXG4gICk7XG59XG5cbi8qKlxuICogU2hvd3MgYSByZWRib3ggd2l0aCBzdGFja3RyYWNlIGZvciBhbGwgY29uc29sZS5lcnJvciBtZXNzYWdlcy4gIERpc2FibGUgYnlcbiAqIHNldHRpbmcgYGNvbnNvbGUucmVwb3J0RXJyb3JzQXNFeGNlcHRpb25zID0gZmFsc2U7YCBpbiB5b3VyIGFwcC5cbiAqL1xuZnVuY3Rpb24gaW5zdGFsbENvbnNvbGVFcnJvclJlcG9ydGVyKCkge1xuICAvLyBFbmFibGUgcmVwb3J0RXJyb3JzQXNFeGNlcHRpb25zXG4gIGlmIChjb25zb2xlLl9lcnJvck9yaWdpbmFsKSB7XG4gICAgcmV0dXJuOyAvLyBhbHJlYWR5IGluc3RhbGxlZFxuICB9XG4gIC8vIEZsb3cgZG9lc24ndCBsaWtlIGl0IHdoZW4geW91IHNldCBhcmJpdHJhcnkgdmFsdWVzIG9uIGEgZ2xvYmFsIG9iamVjdFxuICBjb25zb2xlLl9lcnJvck9yaWdpbmFsID0gY29uc29sZS5lcnJvci5iaW5kKGNvbnNvbGUpO1xuICBjb25zb2xlLmVycm9yID0gcmVhY3RDb25zb2xlRXJyb3JIYW5kbGVyO1xuICBpZiAoY29uc29sZS5yZXBvcnRFcnJvcnNBc0V4Y2VwdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIEluZGl2aWR1YWwgYXBwcyBjYW4gZGlzYWJsZSB0aGlzXG4gICAgLy8gRmxvdyBkb2Vzbid0IGxpa2UgaXQgd2hlbiB5b3Ugc2V0IGFyYml0cmFyeSB2YWx1ZXMgb24gYSBnbG9iYWwgb2JqZWN0XG4gICAgY29uc29sZS5yZXBvcnRFcnJvcnNBc0V4Y2VwdGlvbnMgPSB0cnVlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkZWNvcmF0ZWRFeHRyYURhdGFLZXksXG4gIGhhbmRsZUV4Y2VwdGlvbixcbiAgaW5zdGFsbENvbnNvbGVFcnJvclJlcG9ydGVyLFxuICBTeW50aGV0aWNFcnJvcixcbiAgdW5zdGFibGVfc2V0RXhjZXB0aW9uRGVjb3JhdG9yLFxufTtcbiJdLCJtYXBwaW5ncyI6IkFBVUEsWUFBWTs7QUFBQyxJQUFBQSxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsZ0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFFLGFBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFHLGdCQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBSSwyQkFBQSxHQUFBTCxzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUssZ0JBQUEsR0FBQU4sc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFNLFVBQUEsR0FBQVAsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFPLGlCQUFBLEdBQUFSLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxTQUFBUSxRQUFBQyxDQUFBLEVBQUFDLENBQUEsUUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLElBQUEsQ0FBQUosQ0FBQSxPQUFBRyxNQUFBLENBQUFFLHFCQUFBLFFB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