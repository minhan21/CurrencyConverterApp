65d106e699448245ef060bd01652d138
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["icon", "size", "style", "theme"],
  _excluded2 = ["backgroundColor"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _theming = require("../../core/theming");
var _colors = require("../../styles/themes/v2/colors");
var _getContrastingColor = _interopRequireDefault(require("../../utils/getContrastingColor"));
var _Icon = _interopRequireDefault(require("../Icon"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var defaultSize = 64;
var Avatar = function Avatar(_ref) {
  var _rest$color;
  var _theme$colors;
  var icon = _ref.icon,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? defaultSize : _ref$size,
    style = _ref.style,
    themeOverrides = _ref.theme,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var _ref2 = _reactNative.StyleSheet.flatten(style) || {},
    _ref2$backgroundColor = _ref2.backgroundColor,
    backgroundColor = _ref2$backgroundColor === void 0 ? (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.primary : _ref2$backgroundColor,
    restStyle = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
  var textColor = (_rest$color = rest.color) != null ? _rest$color : (0, _getContrastingColor.default)(backgroundColor, _colors.white, 'rgba(0, 0, 0, .54)');
  return React.createElement(_reactNative.View, _extends({
    style: [{
      width: size,
      height: size,
      borderRadius: size / 2,
      backgroundColor: backgroundColor
    }, styles.container, restStyle]
  }, rest), React.createElement(_Icon.default, {
    source: icon,
    color: textColor,
    size: size * 0.6
  }));
};
Avatar.displayName = 'Avatar.Icon';
var styles = _reactNative.StyleSheet.create({
  container: {
    justifyContent: 'center',
    alignItems: 'center'
  }
});
var _default = Avatar;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl90aGVtaW5nIiwiX2NvbG9ycyIsIl9nZXRDb250cmFzdGluZ0NvbG9yIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9JY29uIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIl9leHRlbmRzIiwiYXNzaWduIiwiYmluZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJhcHBseSIsImRlZmF1bHRTaXplIiwiQXZhdGFyIiwiX3JlZiIsIl9yZXN0JGNvbG9yIiwiX3RoZW1lJGNvbG9ycyIsImljb24iLCJfcmVmJHNpemUiLCJzaXplIiwic3R5bGUiLCJ0aGVtZU92ZXJyaWRlcyIsInRoZW1lIiwicmVzdCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllczIiLCJfZXhjbHVkZWQiLCJ1c2VJbnRlcm5hbFRoZW1lIiwiX3JlZjIiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsIl9yZWYyJGJhY2tncm91bmRDb2xvciIsImJhY2tncm91bmRDb2xvciIsImNvbG9ycyIsInByaW1hcnkiLCJyZXN0U3R5bGUiLCJfZXhjbHVkZWQyIiwidGV4dENvbG9yIiwiY29sb3IiLCJ3aGl0ZSIsImNyZWF0ZUVsZW1lbnQiLCJWaWV3Iiwid2lkdGgiLCJoZWlnaHQiLCJib3JkZXJSYWRpdXMiLCJzdHlsZXMiLCJjb250YWluZXIiLCJkaXNwbGF5TmFtZSIsImNyZWF0ZSIsImp1c3RpZnlDb250ZW50IiwiYWxpZ25JdGVtcyIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0F2YXRhci9BdmF0YXJJY29uLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLElBQUFBLEtBQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQUVBLElBQUFFLFFBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLE9BQUEsR0FBQUgsT0FBQTtBQUVBLElBQUFJLG9CQUFBLEdBQUFDLHNCQUFBLENBQUFMLE9BQUE7QUFDQSxJQUFBTSxLQUFBLEdBQUFELHNCQUFBLENBQUFMLE9BQUE7QUFBMkMsU0FBQUssdUJBQUFFLEdBQUE7RUFBQSxPQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBO0lBQUFFLE9BQUEsRUFBQUY7RUFBQTtBQUFBO0FBQUEsU0FBQUcseUJBQUFDLFdBQUE7RUFBQSxXQUFBQyxPQUFBO0VBQUEsSUFBQUMsaUJBQUEsT0FBQUQsT0FBQTtFQUFBLElBQUFFLGdCQUFBLE9BQUFGLE9BQUE7RUFBQSxRQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsV0FBQTtJQUFBLE9BQUFBLFdBQUEsR0FBQUcsZ0JBQUEsR0FBQUQsaUJBQUE7RUFBQSxHQUFBRixXQUFBO0FBQUE7QUFBQSxTQUFBWix3QkFBQVEsR0FBQSxFQUFBSSxXQUFBO0VBQUEsS0FBQUEsV0FBQSxJQUFBSixHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQTtJQUFBLE9BQUFELEdBQUE7RUFBQTtFQUFBLElBQUFBLEdBQUEsb0JBQUFBLEdBQUEsd0JBQUFBLEdBQUE7SUFBQTtNQUFBRSxPQUFBLEVBQUFGO0lBQUE7RUFBQTtFQUFBLElBQUFRLEtBQUEsR0FBQUwsd0JBQUEs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