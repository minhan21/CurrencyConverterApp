804898786b4215847568241e653a88b4
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["children", "textStyle", "style", "numeric", "maxFontSizeMultiplier", "testID"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _TouchableRipple = _interopRequireDefault(require("../TouchableRipple/TouchableRipple"));
var _Text = _interopRequireDefault(require("../Typography/Text"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var DataTableCell = function DataTableCell(_ref) {
  var children = _ref.children,
    textStyle = _ref.textStyle,
    style = _ref.style,
    numeric = _ref.numeric,
    maxFontSizeMultiplier = _ref.maxFontSizeMultiplier,
    testID = _ref.testID,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  return React.createElement(_TouchableRipple.default, _extends({}, rest, {
    testID: testID,
    style: [styles.container, numeric && styles.right, style]
  }), React.createElement(CellContent, {
    textStyle: textStyle,
    testID: testID,
    maxFontSizeMultiplier: maxFontSizeMultiplier
  }, children));
};
var CellContent = function CellContent(_ref2) {
  var children = _ref2.children,
    textStyle = _ref2.textStyle,
    maxFontSizeMultiplier = _ref2.maxFontSizeMultiplier,
    testID = _ref2.testID;
  if (React.isValidElement(children)) {
    return children;
  }
  return React.createElement(_Text.default, {
    style: textStyle,
    numberOfLines: 1,
    maxFontSizeMultiplier: maxFontSizeMultiplier,
    testID: `${testID}-text-container`
  }, children);
};
DataTableCell.displayName = 'DataTable.Cell';
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center'
  },
  right: {
    justifyContent: 'flex-end'
  }
});
var _default = DataTableCell;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9Ub3VjaGFibGVSaXBwbGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX1RleHQiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJiaW5kIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImFwcGx5IiwiRGF0YVRhYmxlQ2VsbCIsIl9yZWYiLCJjaGlsZHJlbiIsInRleHRTdHlsZSIsInN0eWxlIiwibnVtZXJpYyIsIm1heEZvbnRTaXplTXVsdGlwbGllciIsInRlc3RJRCIsInJlc3QiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwiX2V4Y2x1ZGVkIiwiY3JlYXRlRWxlbWVudCIsInN0eWxlcyIsImNvbnRhaW5lciIsInJpZ2h0IiwiQ2VsbENvbnRlbnQiLCJfcmVmMiIsImlzVmFsaWRFbGVtZW50IiwibnVtYmVyT2ZMaW5lcyIsImRpc3BsYXlOYW1lIiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsImZsZXgiLCJmbGV4RGlyZWN0aW9uIiwiYWxpZ25JdGVtcyIsImp1c3RpZnlDb250ZW50IiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRGF0YVRhYmxlL0RhdGFU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