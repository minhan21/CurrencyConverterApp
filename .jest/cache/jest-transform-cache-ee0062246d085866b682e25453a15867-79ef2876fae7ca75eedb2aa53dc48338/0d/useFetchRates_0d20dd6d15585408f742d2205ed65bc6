1012048ef8c84fa2b21521d040d797c2
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// src/hooks/useFetchRates.ts
const react_1 = require("react");
const api_1 = require("../services/api");
const useFetchRates = (baseCurrency) => {
    const [rates, setRates] = (0, react_1.useState)({});
    const [loading, setLoading] = (0, react_1.useState)(true);
    const [error, setError] = (0, react_1.useState)(null);
    const loadRates = (0, react_1.useCallback)(async () => {
        try {
            setLoading(true);
            setError(null);
            const data = await (0, api_1.fetchRates)(baseCurrency);
            setRates(data.rates);
            setLoading(false);
        }
        catch (err) {
            setError(err.message || 'An error occurred while fetching exchange rates.');
            setLoading(false);
        }
    }, [baseCurrency]);
    (0, react_1.useEffect)(() => {
        loadRates();
    }, [loadRates]);
    return { rates, loading, error, refetch: loadRates };
};
exports.default = useFetchRates;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2FudHJhbi9EZXNrdG9wL0N1cnJlbmN5Q29udmVydGVyQXBwL3NyYy9ob29rcy91c2VGZXRjaFJhdGVzLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsNkJBQTZCO0FBQzdCLGlDQUF5RDtBQUN6RCx5Q0FBNkM7QUFFN0MsTUFBTSxhQUFhLEdBQUcsQ0FBQyxZQUFvQixFQUFFLEVBQUU7SUFDN0MsTUFBTSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsR0FBRyxJQUFBLGdCQUFRLEVBQXlCLEVBQUUsQ0FBQyxDQUFDO0lBQy9ELE1BQU0sQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLEdBQUcsSUFBQSxnQkFBUSxFQUFVLElBQUksQ0FBQyxDQUFDO0lBQ3RELE1BQU0sQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEdBQUcsSUFBQSxnQkFBUSxFQUFnQixJQUFJLENBQUMsQ0FBQztJQUV4RCxNQUFNLFNBQVMsR0FBRyxJQUFBLG1CQUFXLEVBQUMsS0FBSyxJQUFJLEVBQUU7UUFDdkMsSUFBSSxDQUFDO1lBQ0gsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2pCLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNmLE1BQU0sSUFBSSxHQUFHLE1BQU0sSUFBQSxnQkFBVSxFQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzVDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDckIsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BCLENBQUM7UUFBQyxPQUFPLEdBQVEsRUFBRSxDQUFDO1lBQ2xCLFFBQVEsQ0FDTixHQUFHLENBQUMsT0FBTyxJQUFJLGtEQUFrRCxDQUNsRSxDQUFDO1lBQ0YsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BCLENBQUM7SUFDSCxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0lBRW5CLElBQUEsaUJBQVMsRUFBQyxHQUFHLEVBQUU7UUFDYixTQUFTLEVBQUUsQ0FBQztJQUNkLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFFaEIsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsQ0FBQztBQUN2RCxDQUFDLENBQUM7QUFFRixrQkFBZSxhQUFhLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2FudHJhbi9EZXNrdG9wL0N1cnJlbmN5Q29udmVydGVyQXBwL3NyYy9ob29rcy91c2VGZXRjaFJhdGVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9ob29rcy91c2VGZXRjaFJhdGVzLnRzXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlLCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGZldGNoUmF0ZXMgfSBmcm9tICcuLi9zZXJ2aWNlcy9hcGknO1xuXG5jb25zdCB1c2VGZXRjaFJhdGVzID0gKGJhc2VDdXJyZW5jeTogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IFtyYXRlcywgc2V0UmF0ZXNdID0gdXNlU3RhdGU8UmVjb3JkPHN0cmluZywgbnVtYmVyPj4oe30pO1xuICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZTxib29sZWFuPih0cnVlKTtcbiAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKTtcblxuICBjb25zdCBsb2FkUmF0ZXMgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHNldExvYWRpbmcodHJ1ZSk7XG4gICAgICBzZXRFcnJvcihudWxsKTtcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBmZXRjaFJhdGVzKGJhc2VDdXJyZW5jeSk7XG4gICAgICBzZXRSYXRlcyhkYXRhLnJhdGVzKTtcbiAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xuICAgIH0gY2F0Y2ggKGVycjogYW55KSB7XG4gICAgICBzZXRFcnJvcihcbiAgICAgICAgZXJyLm1lc3NhZ2UgfHwgJ0FuIGVycm9yIG9jY3VycmVkIHdoaWxlIGZldGNoaW5nIGV4Y2hhbmdlIHJhdGVzLicsXG4gICAgICApO1xuICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgfVxuICB9LCBbYmFzZUN1cnJlbmN5XSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBsb2FkUmF0ZXMoKTtcbiAgfSwgW2xvYWRSYXRlc10pO1xuXG4gIHJldHVybiB7IHJhdGVzLCBsb2FkaW5nLCBlcnJvciwgcmVmZXRjaDogbG9hZFJhdGVzIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1c2VGZXRjaFJhdGVzO1xuIl0sInZlcnNpb24iOjN9