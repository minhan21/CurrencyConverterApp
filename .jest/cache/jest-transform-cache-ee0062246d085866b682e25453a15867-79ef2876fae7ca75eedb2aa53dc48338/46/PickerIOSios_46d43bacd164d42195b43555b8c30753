c674bbef3455e1c1f1cc010fdda2fa7d
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _RNCPickerNativeComponent = _interopRequireWildcard(require("./RNCPickerNativeComponent"));
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return {
    default: e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
function useMergeRefs() {
  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
    refs[_key] = arguments[_key];
  }
  return React.useCallback(function (current) {
    for (var ref of refs) {
      if (ref != null) {
        if (typeof ref === 'function') {
          ref(current);
        } else {
          ref.current = current;
        }
      }
    }
  }, [].concat(refs));
}
var PickerIOSItem = function PickerIOSItem(props) {
  return null;
};
var PickerIOSWithForwardedRef = React.forwardRef(function PickerIOS(props, forwardedRef) {
  var children = props.children,
    selectedValue = props.selectedValue,
    selectionColor = props.selectionColor,
    themeVariant = props.themeVariant,
    testID = props.testID,
    itemStyle = props.itemStyle,
    numberOfLines = props.numberOfLines,
    onChange = props.onChange,
    onValueChange = props.onValueChange,
    style = props.style;
  var nativePickerRef = React.useRef(null);
  var ref = useMergeRefs(nativePickerRef, forwardedRef);
  var _React$useState = React.useState({
      value: null
    }),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    nativeSelectedIndex = _React$useState2[0],
    setNativeSelectedIndex = _React$useState2[1];
  var _React$useMemo = React.useMemo(function () {
      var selectedIndex = 0;
      var items = React.Children.toArray(children).map(function (child, index) {
        if (child === null) {
          return null;
        }
        if (String(child.props.value) === String(selectedValue)) {
          selectedIndex = index;
        }
        return {
          value: String(child.props.value),
          label: String(child.props.label),
          textColor: (0, _reactNative.processColor)(child.props.color),
          testID: child.props.testID
        };
      });
      return [items, selectedIndex];
    }, [children, selectedValue]),
    _React$useMemo2 = (0, _slicedToArray2.default)(_React$useMemo, 2),
    items = _React$useMemo2[0],
    selectedIndex = _React$useMemo2[1];
  var parsedNumberOfLines = Math.round(numberOfLines != null ? numberOfLines : 1);
  if (parsedNumberOfLines < 1) {
    parsedNumberOfLines = 1;
  }
  React.useLayoutEffect(function () {
    var jsValue = 0;
    React.Children.toArray(children).forEach(function (child, index) {
      if (String(child.props.value) === String(selectedValue)) {
        jsValue = index;
      }
    });
    var shouldUpdateNativePicker = nativeSelectedIndex.value != null && nativeSelectedIndex.value !== jsValue;
    if (shouldUpdateNativePicker && nativePickerRef.current) {
      var _global;
      if ((_global = global) !== null && _global !== void 0 && _global.nativeFabricUIManager) {
        _RNCPickerNativeComponent.Commands.setNativeSelectedIndex(nativePickerRef.current, jsValue);
      } else {
        nativePickerRef.current.setNativeProps({
          selectedIndex: jsValue
        });
      }
    }
  }, [selectedValue, nativeSelectedIndex, children]);
  var _onChange = React.useCallback(function (event) {
    onChange === null || onChange === void 0 || onChange(event);
    onValueChange === null || onValueChange === void 0 || onValueChange(event.nativeEvent.newValue, event.nativeEvent.newIndex);
    setNativeSelectedIndex({
      value: event.nativeEvent.newIndex
    });
  }, [onChange, onValueChange]);
  return React.createElement(_reactNative.View, {
    style: style
  }, React.createElement(_RNCPickerNativeComponent.default, {
    ref: ref,
    themeVariant: themeVariant,
    testID: testID,
    style: [styles.pickerIOS, itemStyle],
    items: items,
    onChange: _onChange,
    numberOfLines: parsedNumberOfLines,
    selectedIndex: selectedIndex,
    selectionColor: (0, _reactNative.processColor)(selectionColor)
  }));
});
var styles = _reactNative.StyleSheet.create({
  pickerIOS: {
    height: 216
  }
});
PickerIOSWithForwardedRef.Item = PickerIOSItem;
var _default = exports.default = PickerIOSWithForwardedRef;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,