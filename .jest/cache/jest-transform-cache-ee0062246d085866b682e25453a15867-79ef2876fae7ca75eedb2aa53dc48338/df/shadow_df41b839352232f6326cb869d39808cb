a4885d354a228b75a2040d0f0d5741dc
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = shadow;
var _reactNative = require("react-native");
var MD2Colors = _interopRequireWildcard(require("./themes/v2/colors"));
var _tokens = require("./themes/v3/tokens");
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
var SHADOW_COLOR = MD2Colors.black;
var SHADOW_OPACITY = 0.24;
var MD3_SHADOW_OPACITY = 0.3;
var MD3_SHADOW_COLOR = _tokens.MD3Colors.primary0;
function shadow() {
  var elevation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var isV3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  return isV3 ? v3Shadow(elevation) : v2Shadow(elevation);
}
function v2Shadow() {
  var elevation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  if (elevation instanceof _reactNative.Animated.Value) {
    var inputRange = [0, 1, 2, 3, 8, 24];
    return {
      shadowColor: SHADOW_COLOR,
      shadowOffset: {
        width: new _reactNative.Animated.Value(0),
        height: elevation.interpolate({
          inputRange: inputRange,
          outputRange: [0, 0.5, 0.75, 2, 7, 23]
        })
      },
      shadowOpacity: elevation.interpolate({
        inputRange: [0, 1],
        outputRange: [0, SHADOW_OPACITY],
        extrapolate: 'clamp'
      }),
      shadowRadius: elevation.interpolate({
        inputRange: inputRange,
        outputRange: [0, 0.75, 1.5, 3, 8, 24]
      })
    };
  } else {
    if (elevation === 0) {
      return {};
    }
    var height, radius;
    switch (elevation) {
      case 1:
        height = 0.5;
        radius = 0.75;
        break;
      case 2:
        height = 0.75;
        radius = 1.5;
        break;
      default:
        height = elevation - 1;
        radius = elevation;
    }
    return {
      shadowColor: SHADOW_COLOR,
      shadowOffset: {
        width: 0,
        height: height
      },
      shadowOpacity: SHADOW_OPACITY,
      shadowRadius: radius
    };
  }
}
function v3Shadow() {
  var elevation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var inputRange = [0, 1, 2, 3, 4, 5];
  var shadowHeight = [0, 1, 2, 4, 6, 8];
  var shadowRadius = [0, 3, 6, 8, 10, 12];
  if (elevation instanceof _reactNative.Animated.Value) {
    return {
      shadowColor: MD3_SHADOW_COLOR,
      shadowOffset: {
        width: new _reactNative.Animated.Value(0),
        height: elevation.interpolate({
          inputRange: inputRange,
          outputRange: shadowHeight
        })
      },
      shadowOpacity: elevation.interpolate({
        inputRange: [0, 1],
        outputRange: [0, MD3_SHADOW_OPACITY],
        extrapolate: 'clamp'
      }),
      shadowRadius: elevation.interpolate({
        inputRange: inputRange,
        outputRange: shadowRadius
      })
    };
  } else {
    return {
      shadowColor: MD3_SHADOW_COLOR,
      shadowOpacity: elevation ? MD3_SHADOW_OPACITY : 0,
      shadowOffset: {
        width: 0,
        height: shadowHeight[elevation]
      },
      shadowRadius: shadowRadius[elevation]
    };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiTUQyQ29sb3JzIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfdG9rZW5zIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIlNIQURPV19DT0xPUiIsImJsYWNrIiwiU0hBRE9XX09QQUNJVFkiLCJNRDNfU0hBRE9XX09QQUNJVFkiLCJNRDNfU0hBRE9XX0NPTE9SIiwiTUQzQ29sb3JzIiwicHJpbWFyeTAiLCJzaGFkb3ciLCJlbGV2YXRpb24iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJpc1YzIiwidjNTaGFkb3ciLCJ2MlNoYWRvdyIsIkFuaW1hdGVkIiwiVmFsdWUiLCJpbnB1dFJhbmdlIiwic2hhZG93Q29sb3IiLCJzaGFkb3dPZmZzZXQiLCJ3aWR0aCIsImhlaWdodCIsImludGVycG9sYXRlIiwib3V0cHV0UmFuZ2UiLCJzaGFkb3dPcGFjaXR5IiwiZXh0cmFwb2xhdGUiLCJzaGFkb3dSYWRpdXMiLCJyYWRpdXMiLCJzaGFkb3dIZWlnaHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3R5bGVzL3NoYWRvdy50c3giXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLFlBQUEsR0FBQUMsT0FBQTtBQUVBLElBQUFDLFNBQUEsR0FBQUMsdUJBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFH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