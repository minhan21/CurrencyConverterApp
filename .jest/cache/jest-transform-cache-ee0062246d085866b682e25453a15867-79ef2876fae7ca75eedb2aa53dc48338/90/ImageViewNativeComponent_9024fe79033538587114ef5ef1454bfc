2986d66cf884c3aa29af01fa2f6e4d29
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var NativeComponentRegistry = _interopRequireWildcard(require("../NativeComponent/NativeComponentRegistry"));
var _ViewConfigIgnore = require("../NativeComponent/ViewConfigIgnore");
var _codegenNativeCommands = _interopRequireDefault(require("../Utilities/codegenNativeCommands"));
var _Platform = _interopRequireDefault(require("../Utilities/Platform"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var Commands = exports.Commands = (0, _codegenNativeCommands.default)({
  supportedCommands: ['setIsVisible_EXPERIMENTAL']
});
var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = _Platform.default.OS === 'android' ? {
  uiViewClassName: 'RCTImageView',
  bubblingEventTypes: {},
  directEventTypes: {
    topLoadStart: {
      registrationName: 'onLoadStart'
    },
    topProgress: {
      registrationName: 'onProgress'
    },
    topError: {
      registrationName: 'onError'
    },
    topLoad: {
      registrationName: 'onLoad'
    },
    topLoadEnd: {
      registrationName: 'onLoadEnd'
    }
  },
  validAttributes: {
    blurRadius: true,
    internal_analyticTag: true,
    resizeMode: true,
    tintColor: {
      process: require('../StyleSheet/processColor').default
    },
    borderBottomLeftRadius: true,
    borderTopLeftRadius: true,
    resizeMethod: true,
    src: true,
    source: true,
    borderRadius: true,
    headers: true,
    shouldNotifyLoadEvents: true,
    defaultSrc: true,
    overlayColor: {
      process: require('../StyleSheet/processColor').default
    },
    borderColor: {
      process: require('../StyleSheet/processColor').default
    },
    accessible: true,
    progressiveRenderingEnabled: true,
    fadeDuration: true,
    borderBottomRightRadius: true,
    borderTopRightRadius: true,
    loadingIndicatorSrc: true
  }
} : {
  uiViewClassName: 'RCTImageView',
  bubblingEventTypes: {},
  directEventTypes: {
    topLoadStart: {
      registrationName: 'onLoadStart'
    },
    topProgress: {
      registrationName: 'onProgress'
    },
    topError: {
      registrationName: 'onError'
    },
    topPartialLoad: {
      registrationName: 'onPartialLoad'
    },
    topLoad: {
      registrationName: 'onLoad'
    },
    topLoadEnd: {
      registrationName: 'onLoadEnd'
    }
  },
  validAttributes: _objectSpread({
    blurRadius: true,
    capInsets: {
      diff: require('../Utilities/differ/insetsDiffer')
    },
    defaultSource: {
      process: require('./resolveAssetSource')
    },
    internal_analyticTag: true,
    resizeMode: true,
    source: true,
    tintColor: {
      process: require('../StyleSheet/processColor').default
    }
  }, (0, _ViewConfigIgnore.ConditionallyIgnoredEventHandlers)({
    onLoadStart: true,
    onLoad: true,
    onLoadEnd: true,
    onProgress: true,
    onError: true,
    onPartialLoad: true
  }))
};
var ImageViewNativeComponent = NativeComponentRegistry.get('RCTImageView', function () {
  return __INTERNAL_VIEW_CONFIG;
});
var _default = exports.default = ImageViewNativeComponent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,