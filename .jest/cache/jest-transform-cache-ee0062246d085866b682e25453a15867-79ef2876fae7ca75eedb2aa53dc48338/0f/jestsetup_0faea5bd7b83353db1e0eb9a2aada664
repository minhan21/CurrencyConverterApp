fa61bce573d9a02f1f80fc7d3cdd4f31
_getJestObj().mock('react-native/Libraries/Animated/NativeAnimatedHelper');
_getJestObj().mock('react-native/Libraries/Animated/Easing', function () {
  var actualEasing = jest.requireActual('react-native/Libraries/Animated/Easing');
  return _objectSpread(_objectSpread({}, actualEasing), {}, {
    ease: jest.fn(function () {
      return 'ease';
    }),
    bezier: jest.fn(function () {
      return function (t) {
        return t;
      };
    }),
    linear: jest.fn(function () {
      return 'linear';
    })
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
require("@testing-library/jest-native/extend-expect");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJhY3R1YWxFYXNpbmciLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsIl9vYmplY3RTcHJlYWQiLCJlYXNlIiwiZm4iLCJiZXppZXIiLCJ0IiwibGluZWFyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfZGVmaW5lUHJvcGVydHkyIiwib3duS2V5cyIsImUiLCJyIiwiT2JqZWN0Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm8iLCJmaWx0ZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsImRlZmF1bHQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5IiwiX3JlcXVpcmUiXSwic291cmNlcyI6WyJqZXN0LnNldHVwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LW5hdGl2ZS9leHRlbmQtZXhwZWN0JztcblxuLy8gTW9ja2luZyBuYXRpdmUgYW5pbWF0ZWQgbW9kdWxlIHRvIHByZXZlbnQgZXJyb3JzXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvQW5pbWF0ZWQvTmF0aXZlQW5pbWF0ZWRIZWxwZXInKTtcblxuLy8gTW9ja2luZyBFYXNpbmcgbW9kdWxlIGdsb2JhbGx5XG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvQW5pbWF0ZWQvRWFzaW5nJywgKCkgPT4ge1xuICBjb25zdCBhY3R1YWxFYXNpbmcgPSBqZXN0LnJlcXVpcmVBY3R1YWwoXG4gICAgJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvQW5pbWF0ZWQvRWFzaW5nJyxcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5hY3R1YWxFYXNpbmcsXG4gICAgZWFzZTogamVzdC5mbigoKSA9PiAnZWFzZScpLFxuICAgIGJlemllcjogamVzdC5mbigoKSA9PiAodCkgPT4gdCksIC8vIE1vY2sgYmV6aWVyIHRvIHJldHVybiBhIHNpbXBsZSBsaW5lYXIgZnVuY3Rpb25cbiAgICBsaW5lYXI6IGplc3QuZm4oKCkgPT4gJ2xpbmVhcicpLFxuICB9O1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUdBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxzREFBc0QsQ0FBQztBQUdqRUQsV0FBQSxHQUFLQyxJQUFJLENBQUMsd0NBQXdDLEVBQUUsWUFBTTtFQUN4RCxJQUFNQyxZQUFZLEdBQUdDLElBQUksQ0FBQ0MsYUFBYSxDQUNyQyx3Q0FDRixDQUFDO0VBQ0QsT0FBQUMsYUFBQSxDQUFBQSxhQUFBLEtBQ0tILFlBQVk7SUFDZkksSUFBSSxFQUFFSCxJQUFJLENBQUNJLEVBQUUsQ0FBQztNQUFBLE9BQU0sTUFBTTtJQUFBLEVBQUM7SUFDM0JDLE1BQU0sRUFBRUwsSUFBSSxDQUFDSSxFQUFFLENBQUM7TUFBQSxPQUFNLFVBQUNFLENBQUM7UUFBQSxPQUFLQSxDQUFDO01BQUE7SUFBQSxFQUFDO0lBQy9CQyxNQUFNLEVBQUVQLElBQUksQ0FBQ0ksRUFBRSxDQUFDO01BQUEsT0FBTSxRQUFRO0lBQUE7RUFBQztBQUVuQyxDQUFDLENBQUM7QUFBQyxJQUFBSSxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsZ0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQWhCSEEsT0FBQTtBQUFvRCxTQUFBRSxRQUFBQyxDQUFBLEVBQUFDLENBQUEsUUFBQVAsQ0FBQSxHQUFBUSxNQUFBLENBQUFDLElBQUEsQ0FBQUgsQ0FBQSxPQUFBRSxNQUFBLENBQUFFLHFCQUFBLFFBQUFDLENBQUEsR0FBQUgsTUFBQSxDQUFBRSxxQkFBQSxDQUFBSixDQUFBLEdBQUFDLENBQUEsS0FBQUksQ0FBQSxHQUFBQSxDQUFBLENBQUFDLE1BQUEsV0FBQUwsQ0FBQSxXQUFBQyxNQUFBLENBQUFLLHdCQUFBLENBQUFQLENBQUEsRUFBQUMsQ0FBQSxFQUFBTyxVQUFBLE9BQUFkLENBQUEsQ0FBQWUsSUFBQSxDQUFBQyxLQUFBLENBQUFoQixDQUFBLEVBQUFXLENBQUEsWUFBQVgsQ0FBQTtBQUFBLFNBQUFKLGNBQUFVLENBQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFVLFNBQUEsQ0FBQUMsTUFBQSxFQUFBWCxDQUFBLFVBQUFQLENBQUEsV0FBQWlCLFNBQUEsQ0FBQVYsQ0FBQSxJQUFBVSxTQUFBLENBQUFWLENBQUEsUUFBQUEsQ0FBQSxPQUFBRixPQUFBLENBQUFHLE1BQUEsQ0FBQVIsQ0FBQSxPQUFBbUIsT0FBQSxXQUFBWixDQUFBLFFBQUFILGdCQUFBLENBQUFnQixPQUFBLEVBQUFkLENBQUEsRUFBQUMsQ0FBQSxFQUFBUCxDQUFBLENBQUFPLENBQUEsU0FBQUMsTUFBQSxDQUFBYSx5QkFBQSxHQUFBYixNQUFBLENBQUFjLGdCQUFBLENBQUFoQixDQUFBLEVBQUFFLE1BQUEsQ0FBQWEseUJBQUEsQ0FBQXJCLENBQUEsS0FBQUssT0FBQSxDQUFBRyxNQUFBLENBQUFSLENBQUEsR0FBQW1CLE9BQUEsV0FBQVosQ0FBQSxJQUFBQyxNQUFBLENBQUFlLGNBQUEsQ0FBQWpCLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxNQUFBLENBQUFLLHdCQUFBLENBQUFiLENBQUEsRUFBQU8sQ0FBQSxpQkFBQUQsQ0FBQTtBQUFBLFNBQUFmLFlBQUE7RUFBQSxJQUFBaUMsUUFBQSxHQUFBckIsT0FBQTtJQUFBVCxJQUFBLEdBQUE4QixRQUFBLENBQUE5QixJQUFBO0VBQUFILFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFHLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQSIsImlnbm9yZUxpc3QiOltdfQ==