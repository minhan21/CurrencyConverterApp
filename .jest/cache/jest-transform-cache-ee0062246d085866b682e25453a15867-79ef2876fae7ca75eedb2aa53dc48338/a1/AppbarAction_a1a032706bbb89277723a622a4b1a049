e58f95d03695029a112b6101d56d55d1
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["size", "color", "icon", "disabled", "onPress", "accessibilityLabel", "isLeading", "theme", "rippleColor"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AppbarAction = void 0;
var React = _interopRequireWildcard(require("react"));
var _color = _interopRequireDefault(require("color"));
var _theming = require("../../core/theming");
var _colors = require("../../styles/themes/v2/colors");
var _forwardRef = require("../../utils/forwardRef");
var _IconButton = _interopRequireDefault(require("../IconButton/IconButton"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var AppbarAction = (0, _forwardRef.forwardRef)(function (_ref, ref) {
  var _ref$size = _ref.size,
    size = _ref$size === void 0 ? 24 : _ref$size,
    iconColor = _ref.color,
    icon = _ref.icon,
    disabled = _ref.disabled,
    onPress = _ref.onPress,
    accessibilityLabel = _ref.accessibilityLabel,
    isLeading = _ref.isLeading,
    themeOverrides = _ref.theme,
    rippleColor = _ref.rippleColor,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var actionIconColor = iconColor ? iconColor : theme.isV3 ? isLeading ? theme.colors.onSurface : theme.colors.onSurfaceVariant : (0, _color.default)(_colors.black).alpha(0.54).rgb().string();
  return React.createElement(_IconButton.default, _extends({
    size: size,
    onPress: onPress,
    iconColor: actionIconColor,
    icon: icon,
    disabled: disabled,
    accessibilityLabel: accessibilityLabel,
    animated: true,
    ref: ref,
    rippleColor: rippleColor
  }, rest));
});
exports.AppbarAction = AppbarAction;
AppbarAction.displayName = 'Appbar.Action';
var _default = AppbarAction;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9jb2xvciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfdGhlbWluZyIsIl9jb2xvcnMiLCJfZm9yd2FyZFJlZiIsIl9JY29uQnV0dG9uIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIl9leHRlbmRzIiwiYXNzaWduIiwiYmluZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJhcHBseSIsIkFwcGJhckFjdGlvbiIsImZvcndhcmRSZWYiLCJfcmVmIiwicmVmIiwiX3JlZiRzaXplIiwic2l6ZSIsImljb25Db2xvciIsImNvbG9yIiwiaWNvbiIsImRpc2FibGVkIiwib25QcmVzcyIsImFjY2Vzc2liaWxpdHlMYWJlbCIsImlzTGVhZGluZyIsInRoZW1lT3ZlcnJpZGVzIiwidGhlbWUiLCJyaXBwbGVDb2xvciIsInJlc3QiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwiX2V4Y2x1ZGVkIiwidXNlSW50ZXJuYWxUaGVtZSIsImFjdGlvbkljb25Db2xvciIsImlzVjMiLCJjb2xvcnMiLCJvblN1cmZhY2UiLCJvblN1cmZhY2VWYXJpYW50IiwiYmxhY2siLCJhbHBoYSIsInJnYiIsInN0cmluZyIsImNyZWF0ZUVsZW1lbnQiLCJhbmltYXRlZCIsImV4cG9ydHMiLCJkaXNwbGF5TmFtZSIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvQXBwYmFyL0FwcGJhckFjdGlvbi50c3giXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLElBQUFBLEtBQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQVNBLElBQUFDLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUdBLElBQUFHLFFBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLE9BQUEsR0FBQUosT0FBQTtBQUNBLElBQUFLLFdBQUEsR0FBQUwsT0FBQTtBQUVBLElBQUFNLFdBQUEsR0FBQUosc0JBQUEsQ0FBQUYsT0FBQTtBQUFrRCxTQUFBRSx1QkFBQUssR0FBQTtFQUFBLE9BQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUE7SUFBQUUsT0FBQSxFQUFBRjtFQUFBO0FBQUE7QUFBQSxTQUFBRyx5QkFBQUMsV0FBQTtFQUFBLFdBQUFDLE9BQUE7RUFBQSxJQUFBQyxpQkFBQSxPQUFBRCxPQUFBO0VBQUEsSUFBQUUsZ0JBQUEsT0FBQUYsT0FBQTtFQUFBLFFBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxXQUFBO0lBQUEsT0FBQUEsV0FBQSxHQUFBRyxnQkFBQSxHQUFBRCxpQkFBQTtFQUFBLEdBQUFGLFdBQUE7QUFBQTtBQUFBLFNBQUFaLHdCQUFBUSxHQUFBLEVBQUFJLFdBQUE7RUFBQSxLQUFBQSxXQUFBLElBQUFKLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBO0lBQUEsT0FBQUQsR0FBQTtFQUFBO0VBQUEsSUFBQUEsR0FBQSxvQkFBQUEsR0FBQSx3QkFBQUEsR0FBQTtJQUFBO01BQUFFLE9BQUEsRUFBQUY7SUFBQTtFQUFBO0VBQUEsSUFBQVEsS0FBQSxHQUFBTCx3QkFBQSxDQUFBQyxXQUFBO0VBQUEsSUFBQUksS0FBQSxJQUFBQSxLQUFBLENBQUFDLEdBQUEsQ0FBQVQsR0FBQTtJQUFBLE9BQUFRLEtBQUEsQ0FBQUUsR0FB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