aea6f655f43617f30e3f67793a3ac12c
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// src/components/ExchangeRates.tsx
const react_1 = __importStar(require("react"));
const react_native_1 = require("react-native");
const react_native_paper_1 = require("react-native-paper");
const useFetchRates_1 = __importDefault(require("../hooks/useFetchRates"));
const RateContext_1 = require("../context/RateContext");
const ExchangeRates = ({ baseCurrency }) => {
    const { rates, loading, error, refetch } = (0, useFetchRates_1.default)(baseCurrency);
    const { setRates } = (0, RateContext_1.useRateContext)();
    const { colors } = (0, react_native_paper_1.useTheme)();
    (0, react_1.useEffect)(() => {
        setRates(rates);
    }, [rates, setRates]);
    const renderItem = ({ item }) => (react_1.default.createElement(react_native_paper_1.Card, { style: styles.card },
        react_1.default.createElement(react_native_paper_1.Card.Content, { style: styles.cardContent },
            react_1.default.createElement(react_native_paper_1.Avatar.Text, { size: 40, label: item[0][0], style: styles.avatar }),
            react_1.default.createElement(react_native_1.View, { style: styles.textContainer },
                react_1.default.createElement(react_native_paper_1.Text, { style: styles.currency }, item[0]),
                react_1.default.createElement(react_native_paper_1.Text, { style: styles.rate }, item[1])))));
    if (loading) {
        return (react_1.default.createElement(react_native_1.View, { style: styles.loadingContainer },
            react_1.default.createElement(react_native_paper_1.ActivityIndicator, { animating: true, color: colors.primary, accessibilityLabel: "Loading exchange rates" }),
            react_1.default.createElement(react_native_paper_1.Text, null, "Loading exchange rates...")));
    }
    if (error) {
        return (react_1.default.createElement(react_native_1.View, { style: styles.errorContainer },
            react_1.default.createElement(react_native_paper_1.Text, { style: { color: colors.error, marginBottom: 10 }, accessibilityLabel: "Error fetching exchange rates" }, error),
            react_1.default.createElement(react_native_paper_1.Button, { icon: "refresh", mode: "contained", onPress: refetch, style: styles.refreshButton }, "Try Again")));
    }
    return (react_1.default.createElement(react_native_1.View, { style: styles.background },
        react_1.default.createElement(react_native_1.View, { style: styles.container, accessible: true, accessibilityLabel: "Exchange rates" },
            react_1.default.createElement(react_native_paper_1.Button, { icon: "refresh", mode: "contained", onPress: refetch, style: styles.refreshButton, labelStyle: styles.refreshButtonText }, "Refresh Rates"),
            react_1.default.createElement(react_native_1.FlatList, { data: Object.entries(rates), renderItem: renderItem, keyExtractor: (item) => item[0], refreshing: loading, onRefresh: refetch, contentContainerStyle: styles.list }))));
};
const styles = react_native_1.StyleSheet.create({
    background: {
        flex: 1,
        resizeMode: 'cover',
        justifyContent: 'center',
    },
    container: {
        flex: 1,
        backgroundColor: 'rgba(255, 255, 255, 0.9)',
        padding: 10,
    },
    loadingContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
    },
    errorContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        padding: 20,
    },
    refreshButton: {
        marginBottom: 10,
        backgroundColor: '#6200ee',
    },
    refreshButtonText: {
        color: '#fff',
        fontWeight: 'bold',
    },
    list: {
        paddingBottom: 100,
    },
    card: {
        marginVertical: 5,
        borderRadius: 10,
        elevation: 3,
    },
    cardContent: {
        flexDirection: 'row',
        alignItems: 'center',
    },
    avatar: {
        backgroundColor: '#6200ee',
    },
    textContainer: {
        marginLeft: 15,
    },
    currency: {
        fontSize: 18,
        fontWeight: 'bold',
        color: '#333',
    },
    rate: {
        fontSize: 16,
        color: '#555',
    },
});
exports.default = (0, react_1.memo)(ExchangeRates);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,