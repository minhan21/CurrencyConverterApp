20e9700f194094150c5af6e2cde75c67
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _Platform = _interopRequireDefault(require("../Utilities/Platform"));
var _AnimatedImplementation = _interopRequireDefault(require("./AnimatedImplementation"));
var _AnimatedMock = _interopRequireDefault(require("./AnimatedMock"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var Animated = _Platform.default.isDisableAnimations ? _AnimatedMock.default : _AnimatedImplementation.default;
var _default = exports.default = _objectSpread({
  get FlatList() {
    return require('./components/AnimatedFlatList').default;
  },
  get Image() {
    return require('./components/AnimatedImage').default;
  },
  get ScrollView() {
    return require('./components/AnimatedScrollView').default;
  },
  get SectionList() {
    return require('./components/AnimatedSectionList').default;
  },
  get Text() {
    return require('./components/AnimatedText').default;
  },
  get View() {
    return require('./components/AnimatedView').default;
  }
}, Animated);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfUGxhdGZvcm0iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9BbmltYXRlZEltcGxlbWVudGF0aW9uIiwiX0FuaW1hdGVkTW9jayIsIm93bktleXMiLCJlIiwiciIsInQiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJkZWZhdWx0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIkFuaW1hdGVkIiwiUGxhdGZvcm0iLCJpc0Rpc2FibGVBbmltYXRpb25zIiwiQW5pbWF0ZWRNb2NrIiwiQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbiIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIkZsYXRMaXN0IiwiSW1hZ2UiLCJTY3JvbGxWaWV3IiwiU2VjdGlvbkxpc3QiLCJUZXh0IiwiVmlldyJdLCJzb3VyY2VzIjpbIkFuaW1hdGVkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICogQGZvcm1hdFxuICovXG5cbmV4cG9ydCB0eXBlIHtDb21wb3NpdGVBbmltYXRpb24sIE51bWVyaWN9IGZyb20gJy4vQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbic7XG5cbmltcG9ydCB0eXBlb2YgQW5pbWF0ZWRGbGF0TGlzdCBmcm9tICcuL2NvbXBvbmVudHMvQW5pbWF0ZWRGbGF0TGlzdCc7XG5pbXBvcnQgdHlwZW9mIEFuaW1hdGVkSW1hZ2UgZnJvbSAnLi9jb21wb25lbnRzL0FuaW1hdGVkSW1hZ2UnO1xuaW1wb3J0IHR5cGVvZiBBbmltYXRlZFNjcm9sbFZpZXcgZnJvbSAnLi9jb21wb25lbnRzL0FuaW1hdGVkU2Nyb2xsVmlldyc7XG5pbXBvcnQgdHlwZW9mIEFuaW1hdGVkU2VjdGlvbkxpc3QgZnJvbSAnLi9jb21wb25lbnRzL0FuaW1hdGVkU2VjdGlvbkxpc3QnO1xuaW1wb3J0IHR5cGVvZiBBbmltYXRlZFRleHQgZnJvbSAnLi9jb21wb25lbnRzL0FuaW1hdGVkVGV4dCc7XG5pbXBvcnQgdHlwZW9mIEFuaW1hdGVkVmlldyBmcm9tICcuL2NvbXBvbmVudHMvQW5pbWF0ZWRWaWV3JztcblxuaW1wb3J0IFBsYXRmb3JtIGZyb20gJy4uL1V0aWxpdGllcy9QbGF0Zm9ybSc7XG5pbXBvcnQgQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbiBmcm9tICcuL0FuaW1hdGVkSW1wbGVtZW50YXRpb24nO1xuaW1wb3J0IEFuaW1hdGVkTW9jayBmcm9tICcuL0FuaW1hdGVkTW9jayc7XG5cbmNvbnN0IEFuaW1hdGVkOiB0eXBlb2YgQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbiA9IFBsYXRmb3JtLmlzRGlzYWJsZUFuaW1hdGlvbnNcbiAgPyBBbmltYXRlZE1vY2tcbiAgOiBBbmltYXRlZEltcGxlbWVudGF0aW9uO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdldCBGbGF0TGlzdCgpOiBBbmltYXRlZEZsYXRMaXN0IHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9jb21wb25lbnRzL0FuaW1hdGVkRmxhdExpc3QnKS5kZWZhdWx0O1xuICB9LFxuICBnZXQgSW1hZ2UoKTogQW5pbWF0ZWRJbWFnZSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vY29tcG9uZW50cy9BbmltYXRlZEltYWdlJykuZGVmYXVsdDtcbiAgfSxcbiAgZ2V0IFNjcm9sbFZpZXcoKTogQW5pbWF0ZWRTY3JvbGxWaWV3IHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9jb21wb25lbnRzL0FuaW1hdGVkU2Nyb2xsVmlldycpLmRlZmF1bHQ7XG4gIH0sXG4gIGdldCBTZWN0aW9uTGlzdCgpOiBBbmltYXRlZFNlY3Rpb25MaXN0IHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9jb21wb25lbnRzL0FuaW1hdGVkU2VjdGlvbkxpc3QnKS5kZWZhdWx0O1xuICB9LFxuICBnZXQgVGV4dCgpOiBBbmltYXRlZFRleHQge1xuICAgIHJldHVybiByZXF1aXJlKCcuL2NvbXBvbmVudHMvQW5pbWF0ZWRUZXh0JykuZGVmYXVsdDtcbiAgfSxcbiAgZ2V0IFZpZXcoKTogQW5pbWF0ZWRWaWV3IHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9jb21wb25lbnRzL0FuaW1hdGVkVmlldycpLmRlZmF1bHQ7XG4gIH0sXG4gIC4uLkFuaW1hdGVkLFxufTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBbUJBLElBQUFBLFNBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLHVCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxhQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFBMEMsU0FBQUcsUUFBQUMsQ0FBQSxFQUFBQyxDQUFBLFFBQUFDLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxJQUFBLENBQUFKLENBQUEsT0FBQUcsTUFBQSxDQUFBRSxxQkFBQSxRQUFBQyxDQUFBLEdBQUFILE1BQUEsQ0FBQUUscUJBQUEsQ0FBQUwsQ0FBQSxHQUFBQyxDQUFBLEtBQUFLLENBQUEsR0FBQUEsQ0FBQSxDQUFBQyxNQUFBLFdBQUFOLENBQUEsV0FBQUUsTUFBQSxDQUFBSyx3QkFBQSxDQUFBUixDQUFBLEVBQUFDLENBQUEsRUFBQVEsVUFBQSxPQUFBUCxDQUFBLENBQUFRLElBQUEsQ0FBQUMsS0FBQSxDQUFBVCxDQUFBLEVBQUFJLENBQUEsWUFBQUosQ0FBQTtBQUFBLFNBQUFVLGNBQUFaLENBQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFZLFNBQUEsQ0FBQUMsTUFBQSxFQUFBYixDQUFBLFVBQUFDLENBQUEsV0FBQVcsU0FBQSxDQUFBWixDQUFBLElBQUFZLFNBQUEsQ0FBQVosQ0FBQSxRQUFBQSxDQUFBLE9BQUFGLE9BQUEsQ0FBQUksTUFBQSxDQUFBRCxDQUFBLE9BQUFhLE9BQUEsV0FBQWQsQ0FBQSxRQUFBZSxnQkFBQSxDQUFBQyxPQUFBLEVBQUFqQixDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxDQUFBRCxDQUFBLFNBQUFFLE1BQUEsQ0FBQWUseUJBQUEsR0FBQWYsTUFBQSxDQUFBZ0IsZ0JBQUEsQ0FBQW5CLENBQUEsRUFBQUcsTUFBQSxDQUFBZSx5QkFBQSxDQUFBaEIsQ0FBQSxLQUFBSCxPQUFBLENBQUFJLE1BQUEsQ0FBQUQsQ0FBQSxHQUFBYSxPQUFBLFdBQUFkLENBQUEsSUFBQUUsTUFBQSxDQUFBaUIsY0FBQSxDQUFBcEIsQ0FBQSxFQUFBQyxDQUFBLEVBQUFFLE1BQUEsQ0FBQUssd0JBQUEsQ0FBQU4sQ0FBQSxFQUFBRCxDQUFBLGlCQUFBRCxDQUFBO0FBRTFDLElBQU1xQixRQUF1QyxHQUFHQyxpQkFBUSxDQUFDQyxtQkFBbUIsR0FDeEVDLHFCQUFZLEdBQ1pDLCtCQUFzQjtBQUFDLElBQUFDLFFBQUEsR0FBQUMsT0FBQSxDQUFBVixPQUFBLEdBQUFMLGFBQUE7RUFHekIsSUFBSWdCLFFBQVFBLENBQUEsRUFBcUI7SUFDL0IsT0FBT2hDLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQyxDQUFDcUIsT0FBTztFQUN6RCxDQUFDO0VBQ0QsSUFBSVksS0FBS0EsQ0FBQSxFQUFrQjtJQUN6QixPQUFPakMsT0FBTyxDQUFDLDRCQUE0QixDQUFDLENBQUNxQixPQUFPO0VBQ3RELENBQUM7RUFDRCxJQUFJYSxVQUFVQSxDQUFBLEVBQXVCO0lBQ25DLE9BQU9sQyxPQUFPLENBQUMsaUNBQWlDLENBQUMsQ0FBQ3FCLE9BQU87RUFDM0QsQ0FBQztFQUNELElBQUljLFdBQVdBLENBQUEsRUFBd0I7SUFDckMsT0FBT25DLE9BQU8sQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDcUIsT0FBTztFQUM1RCxDQUFDO0VBQ0QsSUFBSWUsSUFBSUEsQ0FBQSxFQUFpQjtJQUN2QixPQUFPcEMsT0FBTyxDQUFDLDJCQUEyQixDQUFDLENBQUNxQixPQUFPO0VBQ3JELENBQUM7RUFDRCxJQUFJZ0IsSUFBSUEsQ0FBQSxFQUFpQjtJQUN2QixPQUFPckMsT0FBTyxDQUFDLDJCQUEyQixDQUFDLENBQUNxQixPQUFPO0VBQ3JEO0FBQUMsR0FDRUksUUFBUSIsImlnbm9yZUxpc3QiOltdfQ==