b8162146af77c21bf48b0026d2bfcea6
_getJestObj().mock('react-native/Libraries/Animated/NativeAnimatedHelper');
_getJestObj().mock('react-native/Libraries/Animated/Easing', function () {
  var actualEasing = jest.requireActual('react-native/Libraries/Animated/Easing');
  return _objectSpread(_objectSpread({}, actualEasing), {}, {
    ease: jest.fn(function () {
      return 'ease';
    }),
    bezier: jest.fn(function () {
      return 'bezier';
    }),
    linear: jest.fn(function () {
      return 'linear';
    })
  });
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
require("@testing-library/jest-native/extend-expect");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJhY3R1YWxFYXNpbmciLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsIl9vYmplY3RTcHJlYWQiLCJlYXNlIiwiZm4iLCJiZXppZXIiLCJsaW5lYXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJvd25LZXlzIiwiZSIsInIiLCJ0IiwiT2JqZWN0Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm8iLCJmaWx0ZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsImRlZmF1bHQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5IiwiX3JlcXVpcmUiXSwic291cmNlcyI6WyJqZXN0LnNldHVwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LW5hdGl2ZS9leHRlbmQtZXhwZWN0JztcblxuLy8gTW9ja2luZyBuYXRpdmUgYW5pbWF0ZWQgbW9kdWxlIHRvIHByZXZlbnQgZXJyb3JzXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvQW5pbWF0ZWQvTmF0aXZlQW5pbWF0ZWRIZWxwZXInKTtcblxuLy8gTW9ja2luZyBFYXNpbmcgbW9kdWxlIGdsb2JhbGx5XG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvQW5pbWF0ZWQvRWFzaW5nJywgKCkgPT4ge1xuICBjb25zdCBhY3R1YWxFYXNpbmcgPSBqZXN0LnJlcXVpcmVBY3R1YWwoXG4gICAgJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvQW5pbWF0ZWQvRWFzaW5nJyxcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5hY3R1YWxFYXNpbmcsXG4gICAgZWFzZTogamVzdC5mbigoKSA9PiAnZWFzZScpLFxuICAgIGJlemllcjogamVzdC5mbigoKSA9PiAnYmV6aWVyJyksXG4gICAgbGluZWFyOiBqZXN0LmZuKCgpID0+ICdsaW5lYXInKSxcbiAgICAvLyBBZGQgb3RoZXIgZWFzaW5nIGZ1bmN0aW9ucyBhcyBuZWVkZWRcbiAgfTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFHQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsc0RBQXNELENBQUM7QUFHakVELFdBQUEsR0FBS0MsSUFBSSxDQUFDLHdDQUF3QyxFQUFFLFlBQU07RUFDeEQsSUFBTUMsWUFBWSxHQUFHQyxJQUFJLENBQUNDLGFBQWEsQ0FDckMsd0NBQ0YsQ0FBQztFQUNELE9BQUFDLGFBQUEsQ0FBQUEsYUFBQSxLQUNLSCxZQUFZO0lBQ2ZJLElBQUksRUFBRUgsSUFBSSxDQUFDSSxFQUFFLENBQUM7TUFBQSxPQUFNLE1BQU07SUFBQSxFQUFDO0lBQzNCQyxNQUFNLEVBQUVMLElBQUksQ0FBQ0ksRUFBRSxDQUFDO01BQUEsT0FBTSxRQUFRO0lBQUEsRUFBQztJQUMvQkUsTUFBTSxFQUFFTixJQUFJLENBQUNJLEVBQUUsQ0FBQztNQUFBLE9BQU0sUUFBUTtJQUFBO0VBQUM7QUFHbkMsQ0FBQyxDQUFDO0FBQUMsSUFBQUcsc0JBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLGdCQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFqQkhBLE9BQUE7QUFBb0QsU0FBQUUsUUFBQUMsQ0FBQSxFQUFBQyxDQUFBLFFBQUFDLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxJQUFBLENBQUFKLENBQUEsT0FBQUcsTUFBQSxDQUFBRSxxQkFBQSxRQUFBQyxDQUFBLEdBQUFILE1BQUEsQ0FBQUUscUJBQUEsQ0FBQUwsQ0FBQSxHQUFBQyxDQUFBLEtBQUFLLENBQUEsR0FBQUEsQ0FBQSxDQUFBQyxNQUFBLFdBQUFOLENBQUEsV0FBQUUsTUFBQSxDQUFBSyx3QkFBQSxDQUFBUixDQUFBLEVBQUFDLENBQUEsRUFBQVEsVUFBQSxPQUFBUCxDQUFBLENBQUFRLElBQUEsQ0FBQUMsS0FBQSxDQUFBVCxDQUFBLEVBQUFJLENBQUEsWUFBQUosQ0FBQTtBQUFBLFNBQUFYLGNBQUFTLENBQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFXLFNBQUEsQ0FBQUMsTUFBQSxFQUFBWixDQUFBLFVBQUFDLENBQUEsV0FBQVUsU0FBQSxDQUFBWCxDQUFBLElBQUFXLFNBQUEsQ0FBQVgsQ0FBQSxRQUFBQSxDQUFBLE9BQUFGLE9BQUEsQ0FBQUksTUFBQSxDQUFBRCxDQUFBLE9BQUFZLE9BQUEsV0FBQWIsQ0FBQSxRQUFBSCxnQkFBQSxDQUFBaUIsT0FBQSxFQUFBZixDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxDQUFBRCxDQUFBLFNBQUFFLE1BQUEsQ0FBQWEseUJBQUEsR0FBQWIsTUFBQSxDQUFBYyxnQkFBQSxDQUFBakIsQ0FBQSxFQUFBRyxNQUFBLENBQUFhLHlCQUFBLENBQUFkLENBQUEsS0FBQUgsT0FBQSxDQUFBSSxNQUFBLENBQUFELENBQUEsR0FBQVksT0FBQSxXQUFBYixDQUFBLElBQUFFLE1BQUEsQ0FBQWUsY0FBQSxDQUFBbEIsQ0FBQSxFQUFBQyxDQUFBLEVBQUFFLE1BQUEsQ0FBQUssd0JBQUEsQ0FBQU4sQ0FBQSxFQUFBRCxDQUFBLGlCQUFBRCxDQUFBO0FBQUEsU0FBQWQsWUFBQTtFQUFBLElBQUFpQyxRQUFBLEdBQUF0QixPQUFBO0lBQUFSLElBQUEsR0FBQThCLFFBQUEsQ0FBQTlCLElBQUE7RUFBQUgsV0FBQSxZQUFBQSxZQUFBO0lBQUEsT0FBQUcsSUFBQTtFQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBIiwiaWdub3JlTGlzdCI6W119