{"version":3,"names":["_parseErrorStack","_interopRequireDefault","require","_UTFSequence","_stringifySafe","_ansiRegex","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","ANSI_REGEX","ansiRegex","source","BABEL_TRANSFORM_ERROR_FORMAT","BABEL_CODE_FRAME_MARKER_PATTERN","RegExp","join","BABEL_CODE_FRAME_ERROR_FORMAT","METRO_ERROR_FORMAT","SUBSTITUTION","UTFSequence","BOM","parseInterpolation","args","categoryParts","contentParts","substitutionOffsets","remaining","_toConsumableArray2","formatString","String","shift","formatStringParts","split","substitutionCount","substitutions","splice","categoryString","contentString","substitutionIndex","formatStringPart","substitution","stringifySafe","offset","remainingArgs","map","arg","category","message","content","isComponentStack","consoleArgument","isOldComponentStackFormat","test","isNewComponentStackFormat","isNewJSCComponentStackFormat","parseComponentStack","stack","parseErrorStack","frame","methodName","collapse","fileName","file","location","column","row","lineNumber","s","match","_match$slice","slice","_match$slice2","_slicedToArray2","parseInt","Boolean","parseLogBoxException","error","originalMessage","metroInternalError","_metroInternalError$s","_metroInternalError$s2","codeFrame","level","type","isComponentError","componentStack","extraData","babelTransformError","_babelTransformError$","_babelTransformError$2","babelCodeFrameError","_babelCodeFrameError$","_babelCodeFrameError$2","isFatal","parseLogBoxLog","argsWithoutComponentStack","lastArg","messageEndIndex","search"],"sources":["parseLogBoxLog.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {ExceptionData} from '../../Core/NativeExceptionsManager';\nimport type {LogBoxLogData} from './LogBoxLog';\n\nimport parseErrorStack from '../../Core/Devtools/parseErrorStack';\nimport UTFSequence from '../../UTFSequence';\nimport stringifySafe from '../../Utilities/stringifySafe';\nimport ansiRegex from 'ansi-regex';\n\nconst ANSI_REGEX = ansiRegex().source;\n\nconst BABEL_TRANSFORM_ERROR_FORMAT =\n  /^(?:TransformError )?(?:SyntaxError: |ReferenceError: )(.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)/;\n\n// https://github.com/babel/babel/blob/33dbb85e9e9fe36915273080ecc42aee62ed0ade/packages/babel-code-frame/src/index.ts#L183-L184\nconst BABEL_CODE_FRAME_MARKER_PATTERN = new RegExp(\n  [\n    // Beginning of a line (per 'm' flag)\n    '^',\n    // Optional ANSI escapes for colors\n    `(?:${ANSI_REGEX})*`,\n    // Marker\n    '>',\n    // Optional ANSI escapes for colors\n    `(?:${ANSI_REGEX})*`,\n    // Left padding for line number\n    ' +',\n    // Line number\n    '[0-9]+',\n    // Gutter\n    ' \\\\|',\n  ].join(''),\n  'm',\n);\n\nconst BABEL_CODE_FRAME_ERROR_FORMAT =\n  // eslint-disable-next-line no-control-regex\n  /^(?:TransformError )?(?:.*):? (?:.*?)(\\/.*): ([\\s\\S]+?)\\n([ >]{2}[\\d\\s]+ \\|[\\s\\S]+|\\u{001b}[\\s\\S]+)/u;\n\nconst METRO_ERROR_FORMAT =\n  /^(?:InternalError Metro has encountered an error:) (.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)/u;\n\nexport type ExtendedExceptionData = ExceptionData & {\n  isComponentError: boolean,\n  ...\n};\nexport type Category = string;\nexport type CodeFrame = $ReadOnly<{|\n  content: string,\n  location: ?{\n    row: number,\n    column: number,\n    ...\n  },\n  fileName: string,\n\n  // TODO: When React switched to using call stack frames,\n  // we gained the ability to use the collapse flag, but\n  // it is not integrated into the LogBox UI.\n  collapse?: boolean,\n|}>;\nexport type Message = $ReadOnly<{|\n  content: string,\n  substitutions: $ReadOnlyArray<\n    $ReadOnly<{|\n      length: number,\n      offset: number,\n    |}>,\n  >,\n|}>;\n\nexport type ComponentStack = $ReadOnlyArray<CodeFrame>;\n\nconst SUBSTITUTION = UTFSequence.BOM + '%s';\n\nexport function parseInterpolation(args: $ReadOnlyArray<mixed>): $ReadOnly<{|\n  category: Category,\n  message: Message,\n|}> {\n  const categoryParts = [];\n  const contentParts = [];\n  const substitutionOffsets = [];\n\n  const remaining = [...args];\n  if (typeof remaining[0] === 'string') {\n    const formatString = String(remaining.shift());\n    const formatStringParts = formatString.split('%s');\n    const substitutionCount = formatStringParts.length - 1;\n    const substitutions = remaining.splice(0, substitutionCount);\n\n    let categoryString = '';\n    let contentString = '';\n\n    let substitutionIndex = 0;\n    for (const formatStringPart of formatStringParts) {\n      categoryString += formatStringPart;\n      contentString += formatStringPart;\n\n      if (substitutionIndex < substitutionCount) {\n        if (substitutionIndex < substitutions.length) {\n          // Don't stringify a string type.\n          // It adds quotation mark wrappers around the string,\n          // which causes the LogBox to look odd.\n          const substitution =\n            typeof substitutions[substitutionIndex] === 'string'\n              ? substitutions[substitutionIndex]\n              : stringifySafe(substitutions[substitutionIndex]);\n          substitutionOffsets.push({\n            length: substitution.length,\n            offset: contentString.length,\n          });\n\n          categoryString += SUBSTITUTION;\n          contentString += substitution;\n        } else {\n          substitutionOffsets.push({\n            length: 2,\n            offset: contentString.length,\n          });\n\n          categoryString += '%s';\n          contentString += '%s';\n        }\n\n        substitutionIndex++;\n      }\n    }\n\n    categoryParts.push(categoryString);\n    contentParts.push(contentString);\n  }\n\n  const remainingArgs = remaining.map(arg => {\n    // Don't stringify a string type.\n    // It adds quotation mark wrappers around the string,\n    // which causes the LogBox to look odd.\n    return typeof arg === 'string' ? arg : stringifySafe(arg);\n  });\n  categoryParts.push(...remainingArgs);\n  contentParts.push(...remainingArgs);\n\n  return {\n    category: categoryParts.join(' '),\n    message: {\n      content: contentParts.join(' '),\n      substitutions: substitutionOffsets,\n    },\n  };\n}\n\nfunction isComponentStack(consoleArgument: string) {\n  const isOldComponentStackFormat = / {4}in/.test(consoleArgument);\n  const isNewComponentStackFormat = / {4}at/.test(consoleArgument);\n  const isNewJSCComponentStackFormat = /@.*\\n/.test(consoleArgument);\n\n  return (\n    isOldComponentStackFormat ||\n    isNewComponentStackFormat ||\n    isNewJSCComponentStackFormat\n  );\n}\n\nexport function parseComponentStack(message: string): ComponentStack {\n  // In newer versions of React, the component stack is formatted as a call stack frame.\n  // First try to parse the component stack as a call stack frame, and if that doesn't\n  // work then we'll fallback to the old custom component stack format parsing.\n  const stack = parseErrorStack(message);\n  if (stack && stack.length > 0) {\n    return stack.map(frame => ({\n      content: frame.methodName,\n      collapse: frame.collapse || false,\n      fileName: frame.file == null ? 'unknown' : frame.file,\n      location: {\n        column: frame.column == null ? -1 : frame.column,\n        row: frame.lineNumber == null ? -1 : frame.lineNumber,\n      },\n    }));\n  }\n\n  return message\n    .split(/\\n {4}in /g)\n    .map(s => {\n      if (!s) {\n        return null;\n      }\n      const match = s.match(/(.*) \\(at (.*\\.(?:js|jsx|ts|tsx)):([\\d]+)\\)/);\n      if (!match) {\n        return null;\n      }\n\n      let [content, fileName, row] = match.slice(1);\n      return {\n        content,\n        fileName,\n        location: {column: -1, row: parseInt(row, 10)},\n      };\n    })\n    .filter(Boolean);\n}\n\nexport function parseLogBoxException(\n  error: ExtendedExceptionData,\n): LogBoxLogData {\n  const message =\n    error.originalMessage != null ? error.originalMessage : 'Unknown';\n\n  const metroInternalError = message.match(METRO_ERROR_FORMAT);\n  if (metroInternalError) {\n    const [content, fileName, row, column, codeFrame] =\n      metroInternalError.slice(1);\n\n    return {\n      level: 'fatal',\n      type: 'Metro Error',\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName,\n        location: {\n          row: parseInt(row, 10),\n          column: parseInt(column, 10),\n        },\n        content: codeFrame,\n      },\n      message: {\n        content,\n        substitutions: [],\n      },\n      category: `${fileName}-${row}-${column}`,\n      extraData: error.extraData,\n    };\n  }\n\n  const babelTransformError = message.match(BABEL_TRANSFORM_ERROR_FORMAT);\n  if (babelTransformError) {\n    // Transform errors are thrown from inside the Babel transformer.\n    const [fileName, content, row, column, codeFrame] =\n      babelTransformError.slice(1);\n\n    return {\n      level: 'syntax',\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName,\n        location: {\n          row: parseInt(row, 10),\n          column: parseInt(column, 10),\n        },\n        content: codeFrame,\n      },\n      message: {\n        content,\n        substitutions: [],\n      },\n      category: `${fileName}-${row}-${column}`,\n      extraData: error.extraData,\n    };\n  }\n\n  // Perform a cheap match first before trying to parse the full message, which\n  // can get expensive for arbitrary input.\n  if (BABEL_CODE_FRAME_MARKER_PATTERN.test(message)) {\n    const babelCodeFrameError = message.match(BABEL_CODE_FRAME_ERROR_FORMAT);\n\n    if (babelCodeFrameError) {\n      // Codeframe errors are thrown from any use of buildCodeFrameError.\n      const [fileName, content, codeFrame] = babelCodeFrameError.slice(1);\n      return {\n        level: 'syntax',\n        stack: [],\n        isComponentError: false,\n        componentStack: [],\n        codeFrame: {\n          fileName,\n          location: null, // We are not given the location.\n          content: codeFrame,\n        },\n        message: {\n          content,\n          substitutions: [],\n        },\n        category: `${fileName}-${1}-${1}`,\n        extraData: error.extraData,\n      };\n    }\n  }\n\n  if (message.match(/^TransformError /)) {\n    return {\n      level: 'syntax',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: [],\n      message: {\n        content: message,\n        substitutions: [],\n      },\n      category: message,\n      extraData: error.extraData,\n    };\n  }\n\n  const componentStack = error.componentStack;\n  if (error.isFatal || error.isComponentError) {\n    return {\n      level: 'fatal',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack:\n        componentStack != null ? parseComponentStack(componentStack) : [],\n      extraData: error.extraData,\n      ...parseInterpolation([message]),\n    };\n  }\n\n  if (componentStack != null) {\n    // It is possible that console errors have a componentStack.\n    return {\n      level: 'error',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: parseComponentStack(componentStack),\n      extraData: error.extraData,\n      ...parseInterpolation([message]),\n    };\n  }\n\n  // Most `console.error` calls won't have a componentStack. We parse them like\n  // regular logs which have the component stack buried in the message.\n  return {\n    level: 'error',\n    stack: error.stack,\n    isComponentError: error.isComponentError,\n    extraData: error.extraData,\n    ...parseLogBoxLog([message]),\n  };\n}\n\nexport function parseLogBoxLog(args: $ReadOnlyArray<mixed>): {|\n  componentStack: ComponentStack,\n  category: Category,\n  message: Message,\n|} {\n  const message = args[0];\n  let argsWithoutComponentStack: Array<mixed> = [];\n  let componentStack: ComponentStack = [];\n\n  // Extract component stack from warnings like \"Some warning%s\".\n  if (\n    typeof message === 'string' &&\n    message.slice(-2) === '%s' &&\n    args.length > 0\n  ) {\n    const lastArg = args[args.length - 1];\n    if (typeof lastArg === 'string' && isComponentStack(lastArg)) {\n      argsWithoutComponentStack = args.slice(0, -1);\n      argsWithoutComponentStack[0] = message.slice(0, -2);\n      componentStack = parseComponentStack(lastArg);\n    }\n  }\n\n  if (componentStack.length === 0) {\n    // Try finding the component stack elsewhere.\n    for (const arg of args) {\n      if (typeof arg === 'string' && isComponentStack(arg)) {\n        // Strip out any messages before the component stack.\n        let messageEndIndex = arg.search(/\\n {4}(in|at) /);\n        if (messageEndIndex < 0) {\n          // Handle JSC component stacks.\n          messageEndIndex = arg.search(/\\n/);\n        }\n        if (messageEndIndex > 0) {\n          argsWithoutComponentStack.push(arg.slice(0, messageEndIndex));\n        }\n\n        componentStack = parseComponentStack(arg);\n      } else {\n        argsWithoutComponentStack.push(arg);\n      }\n    }\n  }\n\n  return {\n    ...parseInterpolation(argsWithoutComponentStack),\n    componentStack,\n  };\n}\n"],"mappings":"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","ignoreList":[]}