29b1433b795108c5c16ff5d757fba6d6
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSegmentedButtonDensityPadding = exports.getSegmentedButtonColors = exports.getSegmentedButtonBorderRadius = exports.getDisabledSegmentedButtonStyle = void 0;
var _reactNative = require("react-native");
var _color = _interopRequireDefault(require("color"));
var _colors = require("../../styles/themes/v2/colors");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
var DEFAULT_PADDING = 9;
var getSegmentedButtonDensityPadding = function getSegmentedButtonDensityPadding(_ref) {
  var density = _ref.density;
  var padding = DEFAULT_PADDING;
  switch (density) {
    case 'small':
      return padding - 2;
    case 'medium':
      return padding - 4;
    case 'high':
      return padding - 8;
    default:
      return padding;
  }
};
exports.getSegmentedButtonDensityPadding = getSegmentedButtonDensityPadding;
var getDisabledSegmentedButtonStyle = function getDisabledSegmentedButtonStyle(_ref2) {
  var _buttons$index, _buttons;
  var theme = _ref2.theme,
    index = _ref2.index,
    buttons = _ref2.buttons;
  var width = getSegmentedButtonBorderWidth({
    theme: theme
  });
  var isDisabled = (_buttons$index = buttons[index]) === null || _buttons$index === void 0 ? void 0 : _buttons$index.disabled;
  var isNextDisabled = (_buttons = buttons[index + 1]) === null || _buttons === void 0 ? void 0 : _buttons.disabled;
  if (!isDisabled && isNextDisabled) {
    return {
      borderRightWidth: width
    };
  }
  return {};
};
exports.getDisabledSegmentedButtonStyle = getDisabledSegmentedButtonStyle;
var getSegmentedButtonBorderRadius = function getSegmentedButtonBorderRadius(_ref3) {
  var segment = _ref3.segment,
    theme = _ref3.theme;
  if (segment === 'first') {
    return _objectSpread({
      borderTopRightRadius: 0,
      borderBottomRightRadius: 0
    }, theme.isV3 && {
      borderRightWidth: 0
    });
  } else if (segment === 'last') {
    return {
      borderTopLeftRadius: 0,
      borderBottomLeftRadius: 0
    };
  } else {
    return _objectSpread({
      borderRadius: 0
    }, theme.isV3 && {
      borderRightWidth: 0
    });
  }
};
exports.getSegmentedButtonBorderRadius = getSegmentedButtonBorderRadius;
var getSegmentedButtonBackgroundColor = function getSegmentedButtonBackgroundColor(_ref4) {
  var checked = _ref4.checked,
    theme = _ref4.theme;
  if (checked) {
    if (theme.isV3) {
      return theme.colors.secondaryContainer;
    } else {
      return (0, _color.default)(theme.colors.primary).alpha(0.12).rgb().string();
    }
  }
  return 'transparent';
};
var getSegmentedButtonBorderColor = function getSegmentedButtonBorderColor(_ref5) {
  var theme = _ref5.theme,
    disabled = _ref5.disabled,
    checked = _ref5.checked;
  if (theme.isV3) {
    if (disabled) {
      return theme.colors.surfaceDisabled;
    }
    return theme.colors.outline;
  }
  if (checked) {
    return theme.colors.primary;
  }
  return (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string();
};
var getSegmentedButtonBorderWidth = function getSegmentedButtonBorderWidth(_ref6) {
  var theme = _ref6.theme;
  if (theme.isV3) {
    return 1;
  }
  return _reactNative.StyleSheet.hairlineWidth;
};
var getSegmentedButtonTextColor = function getSegmentedButtonTextColor(_ref7) {
  var theme = _ref7.theme,
    disabled = _ref7.disabled,
    checked = _ref7.checked,
    checkedColor = _ref7.checkedColor,
    uncheckedColor = _ref7.uncheckedColor;
  if (theme.isV3) {
    if (disabled) {
      return theme.colors.onSurfaceDisabled;
    }
    if (checked) {
      return checkedColor != null ? checkedColor : theme.colors.onSecondaryContainer;
    }
    return uncheckedColor != null ? uncheckedColor : theme.colors.onSurface;
  }
  if (disabled) {
    return theme.colors.disabled;
  }
  return theme.colors.primary;
};
var getSegmentedButtonColors = function getSegmentedButtonColors(_ref8) {
  var theme = _ref8.theme,
    disabled = _ref8.disabled,
    checked = _ref8.checked,
    checkedColor = _ref8.checkedColor,
    uncheckedColor = _ref8.uncheckedColor;
  var backgroundColor = getSegmentedButtonBackgroundColor({
    theme: theme,
    checked: checked
  });
  var borderColor = getSegmentedButtonBorderColor({
    theme: theme,
    disabled: disabled,
    checked: checked
  });
  var textColor = getSegmentedButtonTextColor({
    theme: theme,
    disabled: disabled,
    checked: checked,
    checkedColor: checkedColor,
    uncheckedColor: uncheckedColor
  });
  var borderWidth = getSegmentedButtonBorderWidth({
    theme: theme
  });
  return {
    backgroundColor: backgroundColor,
    borderColor: borderColor,
    textColor: textColor,
    borderWidth: borderWidth
  };
};
exports.getSegmentedButtonColors = getSegmentedButtonColors;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX2NvbG9yIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9jb2xvcnMiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIkRFRkFVTFRfUEFERElORyIsImdldFNlZ21lbnRlZEJ1dHRvbkRlbnNpdHlQYWRkaW5nIiwiX3JlZiIsImRlbnNpdHkiLCJwYWRkaW5nIiwiZXhwb3J0cyIsImdldERpc2FibGVkU2VnbWVudGVkQnV0dG9uU3R5bGUiLCJfcmVmMiIsIl9idXR0b25zJGluZGV4IiwiX2J1dHRvbnMiLCJ0aGVtZSIsImluZGV4IiwiYnV0dG9ucyIsIndpZHRoIiwiZ2V0U2VnbWVudGVkQnV0dG9uQm9yZGVyV2lkdGgiLCJpc0Rpc2FibGVkIiwiZGlzYWJsZWQiLCJpc05leHREaXNhYmxlZCIsImJvcmRlclJpZ2h0V2lkdGgiLCJnZXRTZWdtZW50ZWRCdXR0b25Cb3JkZXJSYWRpdXMiLCJfcmVmMyIsInNlZ21lbnQiLCJfb2JqZWN0U3ByZWFkIiwiYm9yZGVyVG9wUmlnaHRSYWRpdXMiLCJib3JkZXJCb3R0b21SaWdodFJhZGl1cyIsImlzVjMiLCJib3JkZXJUb3BMZWZ0UmFkaXVzIiwiYm9yZGVyQm90dG9tTGVmdFJhZGl1cyIsImJvcmRlclJhZGl1cyIsImdldFNlZ21lbnRlZEJ1dHRvbkJhY2tncm91bmRDb2xvciIsIl9yZWY0IiwiY2hlY2tlZCIsImNvbG9ycyIsInNlY29uZGFyeUNvbnRhaW5lciIsInByaW1hcnkiLCJhbHBoYSIsInJnYiIsInN0cmluZyIsImdldFNlZ21lbnRlZEJ1dHRvbkJvcmRlckNvbG9yIiwiX3JlZjUiLCJzdXJmYWNlRGlzYWJsZWQiLCJvdXRsaW5lIiwiZGFyayIsIndoaXRlIiwiYmxhY2siLCJfcmVmNiIsIlN0eWxlU2hlZXQiLCJoYWlybGluZVdpZHRoIiwiZ2V0U2VnbWVudGVkQnV0dG9uVGV4dENvbG9yIiwiX3JlZjciLCJjaGVja2VkQ29sb3IiLCJ1bmNoZWNrZWRDb2xvciIsIm9uU3VyZmFjZURpc2FibGVkIiwib25TZWNvbmRhcnlDb250YWluZXIiLCJvblN1cmZhY2UiLCJnZXRTZWdtZW50ZWRCdXR0b25Db2xvcnMiLCJfcmVmOCIsImJhY2tncm91bmRDb2xvciIsImJvcmRlckNvbG9yIiwidGV4dENvbG9yIiwiYm9yZGVyV2lkdGgiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9TZWdtZW50ZWRCdXR0b25zL3V0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsSUFBQUEsWUFBQSxHQUFBQyxPQUFBO0FBRUEsSUFBQUMsTUFBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBRUEsSUFBQUcsT0FBQSxHQUFBSCxPQUFBO0FBQTZELFNBQUFFLHVCQUFBRSxHQUFBO0VBQUEsT0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQTtJQUFBRSxPQUFBLEVBQUFGO0VBQUE7QUFBQTtBQWM3RCxJQUFNRyxlQUFlLEdBQUcsQ0FBQztBQUVsQixJQUFNQyxnQ0FBZ0MsR0FBRyxTQUFuQ0EsZ0NBQWdDQSxDQUFHQyxJQUFBLEVBSTFDO0VBQUEsSUFISkMsT0FBQSxHQUdERCxJQUFBLENBSENDLE9BQUE7RUFJQSxJQUFJQyxPQUFPLEdBQUdKLGVBQWU7RUFFN0IsUUFBUUcsT0FBTztJQUNiLEtBQUssT0FBTztNQUNWLE9BQU9DLE9BQU8sR0FBRyxDQUFDO0lBQ3BCLEtBQUssUUFBUTtNQUNYLE9BQU9BLE9BQU8sR0FBRyxDQUFDO0lBQ3BCLEtBQUssTUFBTTtNQUNULE9BQU9BLE9BQU8sR0FBRyxDQUFDO0lBQ3BCO01BQ0UsT0FBT0EsT0FBTztFQUNsQjtBQUNGLENBQUM7QUFBQ0MsT0FBQSxDQUFBSixnQ0FBQSxHQUFBQSxnQ0FBQTtBQUVLLElBQU1LLCtCQUErQixHQUFHLFNBQWxDQSwrQkFBK0JBLENBQUdDLEtBQUEsRUFROUI7RUFBQSxJQUFBQyxjQUFBLEVBQUFD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