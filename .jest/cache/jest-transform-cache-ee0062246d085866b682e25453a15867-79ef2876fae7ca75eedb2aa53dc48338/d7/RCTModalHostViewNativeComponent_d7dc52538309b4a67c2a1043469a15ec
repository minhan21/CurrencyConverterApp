d1dccbb564c27a98d821a9fbfcbbef45
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty = require("@babel/runtime/helpers/defineProperty");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.__INTERNAL_VIEW_CONFIG = void 0;
var _codegenNativeComponent = _interopRequireDefault(require("../../../../Libraries/Utilities/codegenNativeComponent"));
var NativeComponentRegistry = require('react-native/Libraries/NativeComponent/NativeComponentRegistry');
var _require = require('react-native/Libraries/NativeComponent/ViewConfigIgnore'),
  ConditionallyIgnoredEventHandlers = _require.ConditionallyIgnoredEventHandlers;
var nativeComponentName = 'RCTModalHostView';
var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
  uiViewClassName: 'RCTModalHostView',
  directEventTypes: {
    topRequestClose: {
      registrationName: 'onRequestClose'
    },
    topShow: {
      registrationName: 'onShow'
    },
    topDismiss: {
      registrationName: 'onDismiss'
    },
    topOrientationChange: {
      registrationName: 'onOrientationChange'
    }
  },
  validAttributes: _objectSpread({
    animationType: true,
    presentationStyle: true,
    transparent: true,
    statusBarTranslucent: true,
    hardwareAccelerated: true,
    visible: true,
    animated: true,
    supportedOrientations: true,
    identifier: true
  }, ConditionallyIgnoredEventHandlers({
    onRequestClose: true,
    onShow: true,
    onDismiss: true,
    onOrientationChange: true
  }))
};
var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, function () {
  return __INTERNAL_VIEW_CONFIG;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29kZWdlbk5hdGl2ZUNvbXBvbmVudCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiTmF0aXZlQ29tcG9uZW50UmVnaXN0cnkiLCJfcmVxdWlyZSIsIkNvbmRpdGlvbmFsbHlJZ25vcmVkRXZlbnRIYW5kbGVycyIsIm5hdGl2ZUNvbXBvbmVudE5hbWUiLCJfX0lOVEVSTkFMX1ZJRVdfQ09ORklHIiwiZXhwb3J0cyIsInVpVmlld0NsYXNzTmFtZSIsImRpcmVjdEV2ZW50VHlwZXMiLCJ0b3BSZXF1ZXN0Q2xvc2UiLCJyZWdpc3RyYXRpb25OYW1lIiwidG9wU2hvdyIsInRvcERpc21pc3MiLCJ0b3BPcmllbnRhdGlvbkNoYW5nZSIsInZhbGlkQXR0cmlidXRlcyIsIl9vYmplY3RTcHJlYWQiLCJhbmltYXRpb25UeXBlIiwicHJlc2VudGF0aW9uU3R5bGUiLCJ0cmFuc3BhcmVudCIsInN0YXR1c0JhclRyYW5zbHVjZW50IiwiaGFyZHdhcmVBY2NlbGVyYXRlZCIsInZpc2libGUiLCJhbmltYXRlZCIsInN1cHBvcnRlZE9yaWVudGF0aW9ucyIsImlkZW50aWZpZXIiLCJvblJlcXVlc3RDbG9zZSIsIm9uU2hvdyIsIm9uRGlzbWlzcyIsIm9uT3JpZW50YXRpb25DaGFuZ2UiLCJfZGVmYXVsdCIsImRlZmF1bHQiLCJnZXQiXSwic291cmNlcyI6WyJSQ1RNb2RhbEhvc3RWaWV3TmF0aXZlQ29tcG9uZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG5pbXBvcnQgdHlwZSB7Vmlld1Byb3BzfSBmcm9tICcuLi8uLi8uLi8uLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9WaWV3L1ZpZXdQcm9wVHlwZXMnO1xuaW1wb3J0IHR5cGUge0hvc3RDb21wb25lbnR9IGZyb20gJy4uLy4uLy4uLy4uL0xpYnJhcmllcy9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZVR5cGVzJztcbmltcG9ydCB0eXBlIHtcbiAgRGlyZWN0RXZlbnRIYW5kbGVyLFxuICBJbnQzMixcbiAgV2l0aERlZmF1bHQsXG59IGZyb20gJy4uLy4uLy4uLy4uL0xpYnJhcmllcy9UeXBlcy9Db2RlZ2VuVHlwZXMnO1xuXG5pbXBvcnQgY29kZWdlbk5hdGl2ZUNvbXBvbmVudCBmcm9tICcuLi8uLi8uLi8uLi9MaWJyYXJpZXMvVXRpbGl0aWVzL2NvZGVnZW5OYXRpdmVDb21wb25lbnQnO1xuXG50eXBlIE9yaWVudGF0aW9uQ2hhbmdlRXZlbnQgPSAkUmVhZE9ubHk8e3xcbiAgb3JpZW50YXRpb246ICdwb3J0cmFpdCcgfCAnbGFuZHNjYXBlJyxcbnx9PjtcblxudHlwZSBOYXRpdmVQcm9wcyA9ICRSZWFkT25seTx7fFxuICAuLi5WaWV3UHJvcHMsXG5cbiAgLyoqXG4gICAqIFRoZSBgYW5pbWF0aW9uVHlwZWAgcHJvcCBjb250cm9scyBob3cgdGhlIG1vZGFsIGFuaW1hdGVzLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9tb2RhbCNhbmltYXRpb250eXBlXG4gICAqL1xuICBhbmltYXRpb25UeXBlPzogV2l0aERlZmF1bHQ8J25vbmUnIHwgJ3NsaWRlJyB8ICdmYWRlJywgJ25vbmUnPixcblxuICAvKipcbiAgICogVGhlIGBwcmVzZW50YXRpb25TdHlsZWAgcHJvcCBjb250cm9scyBob3cgdGhlIG1vZGFsIGFwcGVhcnMuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL21vZGFsI3ByZXNlbnRhdGlvbnN0eWxlXG4gICAqL1xuICBwcmVzZW50YXRpb25TdHlsZT86IFdpdGhEZWZhdWx0PFxuICAgICdmdWxsU2NyZWVuJyB8ICdwYWdlU2hlZXQnIHwgJ2Zvcm1TaGVldCcgfCAnb3ZlckZ1bGxTY3JlZW4nLFxuICAgICdmdWxsU2NyZWVuJyxcbiAgPixcblxuICAvKipcbiAgICogVGhlIGB0cmFuc3BhcmVudGAgcHJvcCBkZXRlcm1pbmVzIHdoZXRoZXIgeW91ciBtb2RhbCB3aWxsIGZpbGwgdGhlXG4gICAqIGVudGlyZSB2aWV3LlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9tb2RhbCN0cmFuc3BhcmVudFxuICAgKi9cbiAgdHJhbnNwYXJlbnQ/OiBXaXRoRGVmYXVsdDxib29sZWFuLCBmYWxzZT4sXG5cbiAgLyoqXG4gICAqIFRoZSBgc3RhdHVzQmFyVHJhbnNsdWNlbnRgIHByb3AgZGV0ZXJtaW5lcyB3aGV0aGVyIHlvdXIgbW9kYWwgc2hvdWxkIGdvIHVuZGVyXG4gICAqIHRoZSBzeXN0ZW0gc3RhdHVzYmFyLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9tb2RhbCNzdGF0dXNCYXJUcmFuc2x1Y2VudFxuICAgKi9cbiAgc3RhdHVzQmFyVHJhbnNsdWNlbnQ/OiBXaXRoRGVmYXVsdDxib29sZWFuLCBmYWxzZT4sXG5cbiAgLyoqXG4gICAqIFRoZSBgaGFyZHdhcmVBY2NlbGVyYXRlZGAgcHJvcCBjb250cm9scyB3aGV0aGVyIHRvIGZvcmNlIGhhcmR3YXJlXG4gICAqIGFjY2VsZXJhdGlvbiBmb3IgdGhlIHVuZGVybHlpbmcgd2luZG93LlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9tb2RhbCNoYXJkd2FyZWFjY2VsZXJhdGVkXG4gICAqL1xuICBoYXJkd2FyZUFjY2VsZXJhdGVkPzogV2l0aERlZmF1bHQ8Ym9vbGVhbiwgZmFsc2U+LFxuXG4gIC8qKlxuICAgKiBUaGUgYG9uUmVxdWVzdENsb3NlYCBjYWxsYmFjayBpcyBjYWxsZWQgd2hlbiB0aGUgdXNlciB0YXBzIHRoZSBoYXJkd2FyZVxuICAgKiBiYWNrIGJ1dHRvbiBvbiBBbmRyb2lkIG9yIHRoZSBtZW51IGJ1dHRvbiBvbiBBcHBsZSBUVi5cbiAgICpcbiAgICogVGhpcyBpcyByZXF1aXJlZCBvbiBBcHBsZSBUViBhbmQgQW5kcm9pZC5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvbW9kYWwjb25yZXF1ZXN0Y2xvc2VcbiAgICovXG4gIG9uUmVxdWVzdENsb3NlPzogP0RpcmVjdEV2ZW50SGFuZGxlcjxudWxsPixcblxuICAvKipcbiAgICogVGhlIGBvblNob3dgIHByb3AgYWxsb3dzIHBhc3NpbmcgYSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIG9uY2UgdGhlXG4gICAqIG1vZGFsIGhhcyBiZWVuIHNob3duLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9tb2RhbCNvbnNob3dcbiAgICovXG4gIG9uU2hvdz86ID9EaXJlY3RFdmVudEhhbmRsZXI8bnVsbD4sXG5cbiAgLyoqXG4gICAqIFRoZSBgb25EaXNtaXNzYCBwcm9wIGFsbG93cyBwYXNzaW5nIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCBvbmNlXG4gICAqIHRoZSBtb2RhbCBoYXMgYmVlbiBkaXNtaXNzZWQuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL21vZGFsI29uZGlzbWlzc1xuICAgKi9cbiAgb25EaXNtaXNzPzogP0RpcmVjdEV2ZW50SGFuZGxlcjxudWxsPixcblxuICAvKipcbiAgICogVGhlIGB2aXNpYmxlYCBwcm9wIGRldGVybWluZXMgd2hldGhlciB5b3VyIG1vZGFsIGlzIHZpc2libGUuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL21vZGFsI3Zpc2libGVcbiAgICovXG4gIHZpc2libGU/OiBXaXRoRGVmYXVsdDxib29sZWFuLCBmYWxzZT4sXG5cbiAgLyoqXG4gICAqIERlcHJlY2F0ZWQuIFVzZSB0aGUgYGFuaW1hdGlvblR5cGVgIHByb3AgaW5zdGVhZC5cbiAgICovXG4gIGFuaW1hdGVkPzogV2l0aERlZmF1bHQ8Ym9vbGVhbiwgZmFsc2U+LFxuXG4gIC8qKlxuICAgKiBUaGUgYHN1cHBvcnRlZE9yaWVudGF0aW9uc2AgcHJvcCBhbGxvd3MgdGhlIG1vZGFsIHRvIGJlIHJvdGF0ZWQgdG8gYW55IG9mIHRoZSBzcGVjaWZpZWQgb3JpZW50YXRpb25zLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9tb2RhbCNzdXBwb3J0ZWRvcmllbnRhdGlvbnNcbiAgICovXG4gIHN1cHBvcnRlZE9yaWVudGF0aW9ucz86IFdpdGhEZWZhdWx0PFxuICAgICRSZWFkT25seUFycmF5PFxuICAgICAgfCAncG9ydHJhaXQnXG4gICAgICB8ICdwb3J0cmFpdC11cHNpZGUtZG93bidcbiAgICAgIHwgJ2xhbmRzY2FwZSdcbiAgICAgIHwgJ2xhbmRzY2FwZS1sZWZ0J1xuICAgICAgfCAnbGFuZHNjYXBlLXJpZ2h0JyxcbiAgICA+LFxuICAgICdwb3J0cmFpdCcsXG4gID4sXG5cbiAgLyoqXG4gICAqIFRoZSBgb25PcmllbnRhdGlvbkNoYW5nZWAgY2FsbGJhY2sgaXMgY2FsbGVkIHdoZW4gdGhlIG9yaWVudGF0aW9uIGNoYW5nZXMgd2hpbGUgdGhlIG1vZGFsIGlzIGJlaW5nIGRpc3BsYXllZC5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvbW9kYWwjb25vcmllbnRhdGlvbmNoYW5nZVxuICAgKi9cbiAgb25PcmllbnRhdGlvbkNoYW5nZT86ID9EaXJlY3RFdmVudEhhbmRsZXI8T3JpZW50YXRpb25DaGFuZ2VFdmVudD4sXG5cbiAgLyoqXG4gICAqIFRoZSBgaWRlbnRpZmllcmAgaXMgdGhlIHVuaXF1ZSBudW1iZXIgZm9yIGlkZW50aWZ5aW5nIE1vZGFsIGNvbXBvbmVudHMuXG4gICAqL1xuICBpZGVudGlmaWVyPzogV2l0aERlZmF1bHQ8SW50MzIsIDA+LFxufH0+O1xuXG5leHBvcnQgZGVmYXVsdCAoY29kZWdlbk5hdGl2ZUNvbXBvbmVudDxOYXRpdmVQcm9wcz4oJ01vZGFsSG9zdFZpZXcnLCB7XG4gIGludGVyZmFjZU9ubHk6IHRydWUsXG4gIHBhcGVyQ29tcG9uZW50TmFtZTogJ1JDVE1vZGFsSG9zdFZpZXcnLFxufSk6IEhvc3RDb21wb25lbnQ8TmF0aXZlUHJvcHM+KTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFrQkEsSUFBQUEsdUJBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUpBLElBQU1DLHVCQUF1QixHQUFHRCxPQUFPLENBQUMsZ0VBQWdFLENBQUM7QUFDekcsSUFBQUUsUUFBQSxHQUE0Q0YsT0FBTyxDQUFDLHlEQUF5RCxDQUFDO0VBQXZHRyxpQ0FBaUMsR0FBQUQsUUFBQSxDQUFqQ0MsaUNBQWlDO0FBRXhDLElBQUlDLG1CQUFtQixHQUFHLGtCQUFrQjtBQUdyQyxJQUFNQyxzQkFBc0IsR0FBQUMsT0FBQSxDQUFBRCxzQkFBQSxHQUFHO0VBQ3BDRSxlQUFlLEVBQUUsa0JBQWtCO0VBRW5DQyxnQkFBZ0IsRUFBRTtJQUNoQkMsZUFBZSxFQUFFO01BQ2ZDLGdCQUFnQixFQUFFO0lBQ3BCLENBQUM7SUFFREMsT0FBTyxFQUFFO01BQ1BELGdCQUFnQixFQUFFO0lBQ3BCLENBQUM7SUFFREUsVUFBVSxFQUFFO01BQ1ZGLGdCQUFnQixFQUFFO0lBQ3BCLENBQUM7SUFFREcsb0JBQW9CLEVBQUU7TUFDcEJILGdCQUFnQixFQUFFO0lBQ3BCO0VBQ0YsQ0FBQztFQUVESSxlQUFlLEVBQUFDLGFBQUE7SUFDYkMsYUFBYSxFQUFFLElBQUk7SUFDbkJDLGlCQUFpQixFQUFFLElBQUk7SUFDdkJDLFdBQVcsRUFBRSxJQUFJO0lBQ2pCQyxvQkFBb0IsRUFBRSxJQUFJO0lBQzFCQyxtQkFBbUIsRUFBRSxJQUFJO0lBQ3pCQyxPQUFPLEVBQUUsSUFBSTtJQUNiQyxRQUFRLEVBQUUsSUFBSTtJQUNkQyxxQkFBcUIsRUFBRSxJQUFJO0lBQzNCQyxVQUFVLEVBQUU7RUFBSSxHQUVickIsaUNBQWlDLENBQUM7SUFDbkNzQixjQUFjLEVBQUUsSUFBSTtJQUNwQkMsTUFBTSxFQUFFLElBQUk7SUFDWkMsU0FBUyxFQUFFLElBQUk7SUFDZkMsbUJBQW1CLEVBQUU7RUFDdkIsQ0FBQyxDQUFDO0FBRU4sQ0FBQztBQUFDLElBQUFDLFFBQUEsR0FBQXZCLE9BQUEsQ0FBQXdCLE9BQUEsR0FFYTdCLHVCQUF1QixDQUFDOEIsR0FBRyxDQUFDM0IsbUJBQW1CLEVBQUU7RUFBQSxPQUFNQyxzQkFBc0I7QUFBQSxFQUFDIiwiaWdub3JlTGlzdCI6W119