da6a1f21fdf4c2f88b60d55157230701
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SegmentedButtons = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _SegmentedButtonItem = _interopRequireDefault(require("./SegmentedButtonItem"));
var _utils = require("./utils");
var _theming = require("../../core/theming");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var SegmentedButtons = function SegmentedButtons(_ref) {
  var value = _ref.value,
    onValueChange = _ref.onValueChange,
    buttons = _ref.buttons,
    multiSelect = _ref.multiSelect,
    density = _ref.density,
    style = _ref.style,
    themeOverrides = _ref.theme;
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  return React.createElement(_reactNative.View, {
    style: [styles.row, style]
  }, buttons.map(function (item, i) {
    var disabledChildStyle = (0, _utils.getDisabledSegmentedButtonStyle)({
      theme: theme,
      buttons: buttons,
      index: i
    });
    var segment = i === 0 ? 'first' : i === buttons.length - 1 ? 'last' : undefined;
    var checked = multiSelect && Array.isArray(value) ? value.includes(item.value) : value === item.value;
    var onPress = function onPress(e) {
      var _item$onPress;
      (_item$onPress = item.onPress) === null || _item$onPress === void 0 ? void 0 : _item$onPress.call(item, e);
      var nextValue = multiSelect && Array.isArray(value) ? checked ? value.filter(function (val) {
        return item.value !== val;
      }) : [].concat((0, _toConsumableArray2.default)(value), [item.value]) : item.value;
      onValueChange(nextValue);
    };
    return React.createElement(_SegmentedButtonItem.default, _extends({}, item, {
      key: i,
      checked: checked,
      segment: segment,
      density: density,
      onPress: onPress,
      style: [item.style, disabledChildStyle],
      labelStyle: item.labelStyle,
      theme: theme
    }));
  }));
};
exports.SegmentedButtons = SegmentedButtons;
var styles = _reactNative.StyleSheet.create({
  row: {
    flexDirection: 'row'
  }
});
var _default = SegmentedButtons;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9TZWdtZW50ZWRCdXR0b25JdGVtIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl91dGlscyIsIl90aGVtaW5nIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIl9leHRlbmRzIiwiYXNzaWduIiwiYmluZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJhcHBseSIsIlNlZ21lbnRlZEJ1dHRvbnMiLCJfcmVmIiwidmFsdWUiLCJvblZhbHVlQ2hhbmdlIiwiYnV0dG9ucyIsIm11bHRpU2VsZWN0IiwiZGVuc2l0eSIsInN0eWxlIiwidGhlbWVPdmVycmlkZXMiLCJ0aGVtZSIsInVzZUludGVybmFsVGhlbWUiLCJjcmVhdGVFbGVtZW50IiwiVmlldyIsInN0eWxlcyIsInJvdyIsIm1hcCIsIml0ZW0iLCJkaXNhYmxlZENoaWxkU3R5bGUiLCJnZXREaXNhYmxlZFNlZ21lbnRlZEJ1dHRvblN0eWxlIiwiaW5kZXgiLCJzZWdtZW50IiwidW5kZWZpbmVkIiwiY2hlY2tlZCIsIkFycmF5IiwiaXNBcnJheSIsImluY2x1ZGVzIiwib25QcmVzcyIsImUiLCJfaXRlbSRvblByZXNzIiwibmV4dFZhbHVlIiwiZmlsdGVyIiwidmFsIiwiY29uY2F0IiwiX3RvQ29uc3VtYWJsZUFycmF5MiIsImxhYmVsU3R5bGUiLCJleHBvcnRzIiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsImZsZXhEaXJlY3Rpb24iLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1NlZ21lbnRlZEJ1dHRvbnMvU2VnbWVudGVkQnV0dG9ucy50c3giXSwic291cmNlc0NvbnRlbnQiOltudWxsXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBQUEsS0FBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBV0EsSUFBQUUsb0JBQUEsR0FBQUMsc0JBQUEsQ0FBQUgsT0FBQTtBQUNBLElBQUFJLE1BQUEsR0FBQUosT0FBQTtBQUNBLElBQUFLLFFBQUEsR0FBQUwsT0FBQTtBQUFzRCxTQUFBRyx1QkFBQUcsR0FBQTtFQUFBLE9BQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUE7SUFBQUUsT0FBQSxFQUFBRjtFQUFBO0FBQUE7QUFBQSxTQUFBRyx5QkFBQUMsV0FBQTtFQUFBLFdBQUFDLE9BQUE7RUFBQSxJQUFBQyxpQkFBQSxPQUFBRCxPQUFBO0VBQUEsSUFBQUUsZ0JBQUEsT0FBQUYsT0FBQTtFQUFBLFFBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxXQUFBO0lBQUEsT0FBQUEsV0FBQSxHQUFBRyxnQkFBQSxHQUFBRCxpQkFBQTtFQUFBLEdBQUFGLFdBQUE7QUFBQTtBQUFBLFNBQUFYLHdCQUFBTyxHQUFBLEVBQUFJLFdBQUE7RUFBQSxLQUFBQSxXQUFBLElBQUFKLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBO0lBQUEsT0FBQUQsR0FBQTtFQUFBO0VBQUEsSUFBQUEsR0FBQSxvQkFBQUEsR0FBQSx3QkFBQUEsR0FBQTtJQUFBO01BQUFFLE9BQUEsRUFBQUY7SUFBQTtFQUFBO0VBQUEsSUFBQVEsS0FBQSxHQUFBTCx3QkFBQSxDQUFBQyxXQUFBO0VBQUEsSUFBQUksS0FBQSxJQUFBQSxLQUFBLENBQUFD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