19d064ef1704195a03a727a469eb20be
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["focusedIcon", "unfocusedIcon", "label", "active", "theme", "style", "onPress", "disabled", "accessibilityLabel", "badge", "testID", "labelMaxFontSizeMultiplier"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _theming = require("../../core/theming");
var _Badge = _interopRequireDefault(require("../Badge"));
var _Icon = _interopRequireDefault(require("../Icon"));
var _Text = _interopRequireDefault(require("../Typography/Text"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
var badgeSize = 8;
var iconSize = 24;
var itemSize = 56;
var outlineHeight = 32;
var DrawerCollapsedItem = function DrawerCollapsedItem(_ref) {
  var focusedIcon = _ref.focusedIcon,
    unfocusedIcon = _ref.unfocusedIcon,
    label = _ref.label,
    active = _ref.active,
    themeOverrides = _ref.theme,
    style = _ref.style,
    onPress = _ref.onPress,
    disabled = _ref.disabled,
    accessibilityLabel = _ref.accessibilityLabel,
    _ref$badge = _ref.badge,
    badge = _ref$badge === void 0 ? false : _ref$badge,
    _ref$testID = _ref.testID,
    testID = _ref$testID === void 0 ? 'drawer-collapsed-item' : _ref$testID,
    labelMaxFontSizeMultiplier = _ref.labelMaxFontSizeMultiplier,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var theme = (0, _theming.useInternalTheme)(themeOverrides);
  var isV3 = theme.isV3;
  var scale = theme.animation.scale;
  var _React$useState = React.useState(1),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    numOfLines = _React$useState2[0],
    setNumOfLines = _React$useState2[1];
  var _React$useRef = React.useRef(new _reactNative.Animated.Value(active ? 1 : 0.5)),
    animScale = _React$useRef.current;
  React.useEffect(function () {
    if (!active) {
      animScale.setValue(0.5);
    }
  }, [animScale, active]);
  if (!isV3) {
    return null;
  }
  var handlePressOut = function handlePressOut() {
    _reactNative.Animated.timing(animScale, {
      toValue: 1,
      duration: 150 * scale,
      useNativeDriver: true
    }).start();
  };
  var iconPadding = ((!label ? itemSize : outlineHeight) - iconSize) / 2;
  var backgroundColor = active ? theme.colors.secondaryContainer : 'transparent';
  var labelColor = active ? theme.colors.onSurface : theme.colors.onSurfaceVariant;
  var iconColor = active ? theme.colors.onSecondaryContainer : theme.colors.onSurfaceVariant;
  var onTextLayout = function onTextLayout(_ref2) {
    var nativeEvent = _ref2.nativeEvent;
    setNumOfLines(nativeEvent.lines.length);
  };
  var androidLetterSpacingStyle = _reactNative.Platform.OS === 'android' && numOfLines > 4 && styles.letterSpacing;
  var labelTextStyle = _objectSpread({
    color: labelColor
  }, isV3 ? theme.fonts.labelMedium : {});
  var icon = !active && unfocusedIcon !== undefined ? unfocusedIcon : focusedIcon;
  return React.createElement(_reactNative.View, rest, React.createElement(_reactNative.Pressable, {
    onPress: onPress,
    onPressOut: onPress ? handlePressOut : undefined,
    disabled: disabled,
    accessibilityTraits: active ? ['button', 'selected'] : 'button',
    accessibilityComponentType: "button",
    accessibilityRole: "button",
    accessibilityState: {
      selected: active
    },
    accessibilityLabel: accessibilityLabel,
    testID: testID
  }, React.createElement(_reactNative.View, {
    style: styles.wrapper
  }, React.createElement(_reactNative.Animated.View, {
    style: [styles.outline, !label && styles.roundedOutline, {
      transform: [label ? {
        scaleX: animScale
      } : {
        scale: animScale
      }],
      backgroundColor: backgroundColor
    }, style],
    testID: `${testID}-outline`
  }), React.createElement(_reactNative.View, {
    style: [styles.icon, {
      top: iconPadding
    }],
    testID: `${testID}-container`
  }, badge && React.createElement(_reactNative.View, {
    style: styles.badgeContainer
  }, typeof badge === 'boolean' ? React.createElement(_Badge.default, {
    visible: badge,
    size: badgeSize
  }) : React.createElement(_Badge.default, {
    visible: badge != null,
    size: 2 * badgeSize
  }, badge)), React.createElement(_Icon.default, {
    source: icon,
    size: iconSize,
    color: iconColor
  })), label ? React.createElement(_Text.default, {
    variant: "labelMedium",
    selectable: false,
    numberOfLines: 2,
    onTextLayout: onTextLayout,
    style: [styles.label, androidLetterSpacingStyle, labelTextStyle],
    maxFontSizeMultiplier: labelMaxFontSizeMultiplier
  }, label) : null)));
};
DrawerCollapsedItem.displayName = 'Drawer.CollapsedItem';
var styles = _reactNative.StyleSheet.create({
  wrapper: {
    width: 80,
    marginBottom: 12,
    minHeight: itemSize,
    alignItems: 'center'
  },
  outline: {
    width: itemSize,
    height: outlineHeight,
    borderRadius: itemSize / 2,
    alignItems: 'center',
    justifyContent: 'center'
  },
  roundedOutline: {
    height: itemSize
  },
  icon: {
    position: 'absolute'
  },
  letterSpacing: {
    letterSpacing: 0.3,
    alignSelf: 'stretch'
  },
  label: {
    marginHorizontal: 12,
    marginTop: 4,
    textAlign: 'center'
  },
  badgeContainer: {
    position: 'absolute',
    left: 20,
    bottom: 20,
    zIndex: 2
  }
});
var _default = DrawerCollapsedItem;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,