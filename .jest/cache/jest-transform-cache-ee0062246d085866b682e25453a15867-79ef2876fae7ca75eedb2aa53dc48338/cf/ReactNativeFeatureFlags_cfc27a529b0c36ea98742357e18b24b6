2d13c1ae043c5791c0f68818a3ee9028
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useModernRuntimeScheduler = exports.shouldUseSetNativePropsInFabric = exports.shouldUseRemoveClippedSubviewsAsDefaultOnIOS = exports.shouldUseAnimatedObjectForTransform = exports.override = exports.jsOnlyTestFlag = exports.isLayoutAnimationEnabled = exports.inspectorEnableModernCDPRegistry = exports.inspectorEnableCxxInspectorPackagerConnection = exports.enableSpannableBuildingUnification = exports.enableMicrotasks = exports.enableFixForClippedSubviewsCrash = exports.enableCustomDrawOrderFabric = exports.enableBackgroundExecutor = exports.enableAccessToHostTreeInFabric = exports.destroyFabricSurfacesInReactInstanceManager = exports.commonTestFlag = exports.batchRenderingUpdatesInEventLoop = exports.animatedShouldUseSingleOp = exports.animatedShouldDebounceQueueFlush = exports.androidEnablePendingFabricTransactions = void 0;
var _ReactNativeFeatureFlagsBase = require("./ReactNativeFeatureFlagsBase");
var jsOnlyTestFlag = exports.jsOnlyTestFlag = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('jsOnlyTestFlag', false);
var isLayoutAnimationEnabled = exports.isLayoutAnimationEnabled = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('isLayoutAnimationEnabled', true);
var animatedShouldDebounceQueueFlush = exports.animatedShouldDebounceQueueFlush = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('animatedShouldDebounceQueueFlush', false);
var animatedShouldUseSingleOp = exports.animatedShouldUseSingleOp = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('animatedShouldUseSingleOp', false);
var enableAccessToHostTreeInFabric = exports.enableAccessToHostTreeInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('enableAccessToHostTreeInFabric', false);
var shouldUseAnimatedObjectForTransform = exports.shouldUseAnimatedObjectForTransform = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseAnimatedObjectForTransform', false);
var shouldUseSetNativePropsInFabric = exports.shouldUseSetNativePropsInFabric = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseSetNativePropsInFabric', true);
var shouldUseRemoveClippedSubviewsAsDefaultOnIOS = exports.shouldUseRemoveClippedSubviewsAsDefaultOnIOS = (0, _ReactNativeFeatureFlagsBase.createJavaScriptFlagGetter)('shouldUseRemoveClippedSubviewsAsDefaultOnIOS', false);
var commonTestFlag = exports.commonTestFlag = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('commonTestFlag', false);
var androidEnablePendingFabricTransactions = exports.androidEnablePendingFabricTransactions = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('androidEnablePendingFabricTransactions', false);
var batchRenderingUpdatesInEventLoop = exports.batchRenderingUpdatesInEventLoop = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('batchRenderingUpdatesInEventLoop', false);
var destroyFabricSurfacesInReactInstanceManager = exports.destroyFabricSurfacesInReactInstanceManager = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('destroyFabricSurfacesInReactInstanceManager', false);
var enableBackgroundExecutor = exports.enableBackgroundExecutor = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableBackgroundExecutor', false);
var useModernRuntimeScheduler = exports.useModernRuntimeScheduler = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('useModernRuntimeScheduler', false);
var enableMicrotasks = exports.enableMicrotasks = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableMicrotasks', false);
var enableSpannableBuildingUnification = exports.enableSpannableBuildingUnification = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableSpannableBuildingUnification', false);
var enableCustomDrawOrderFabric = exports.enableCustomDrawOrderFabric = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableCustomDrawOrderFabric', false);
var enableFixForClippedSubviewsCrash = exports.enableFixForClippedSubviewsCrash = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('enableFixForClippedSubviewsCrash', false);
var inspectorEnableCxxInspectorPackagerConnection = exports.inspectorEnableCxxInspectorPackagerConnection = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('inspectorEnableCxxInspectorPackagerConnection', false);
var inspectorEnableModernCDPRegistry = exports.inspectorEnableModernCDPRegistry = (0, _ReactNativeFeatureFlagsBase.createNativeFlagGetter)('inspectorEnableModernCDPRegistry', false);
var override = exports.override = _ReactNativeFeatureFlagsBase.setOverrides;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,