1697cbc22081ff629dec39ff9d838a4e
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));
var _excluded = ["style", "theme"],
  _excluded2 = ["elevation", "style", "backgroundColor", "testID", "children", "mode"],
  _excluded3 = ["elevation", "children", "theme", "style", "testID", "mode"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _theming = require("../core/theming");
var _overlay = _interopRequireWildcard(require("../styles/overlay"));
var _shadow = _interopRequireDefault(require("../styles/shadow"));
var _forwardRef = require("../utils/forwardRef");
var _splitStyles = require("../utils/splitStyles");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var MD2Surface = (0, _forwardRef.forwardRef)(function (_ref, ref) {
  var style = _ref.style,
    overrideTheme = _ref.theme,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var _ref4 = _reactNative.StyleSheet.flatten(style) || {},
    _ref4$elevation = _ref4.elevation,
    elevation = _ref4$elevation === void 0 ? 4 : _ref4$elevation;
  var _ref5 = (0, _theming.useInternalTheme)(overrideTheme),
    isDarkTheme = _ref5.dark,
    mode = _ref5.mode,
    colors = _ref5.colors;
  return React.createElement(_reactNative.Animated.View, _extends({
    ref: ref
  }, rest, {
    style: [{
      backgroundColor: isDarkTheme && mode === 'adaptive' ? (0, _overlay.default)(elevation, colors === null || colors === void 0 ? void 0 : colors.surface) : colors === null || colors === void 0 ? void 0 : colors.surface
    }, elevation ? (0, _shadow.default)(elevation) : null, style]
  }));
});
var outerLayerStyleProperties = ['position', 'alignSelf', 'top', 'right', 'bottom', 'left', 'start', 'end', 'flex', 'flexShrink', 'flexGrow', 'width', 'height', 'transform', 'opacity'];
var shadowColor = '#000';
var iOSShadowOutputRanges = [{
  shadowOpacity: 0.15,
  height: [0, 1, 2, 4, 6, 8],
  shadowRadius: [0, 3, 6, 8, 10, 12]
}, {
  shadowOpacity: 0.3,
  height: [0, 1, 1, 1, 2, 4],
  shadowRadius: [0, 1, 2, 3, 3, 4]
}];
var inputRange = [0, 1, 2, 3, 4, 5];
function getStyleForShadowLayer(elevation, layer) {
  if ((0, _overlay.isAnimatedValue)(elevation)) {
    return {
      shadowColor: shadowColor,
      shadowOpacity: elevation.interpolate({
        inputRange: [0, 1],
        outputRange: [0, iOSShadowOutputRanges[layer].shadowOpacity],
        extrapolate: 'clamp'
      }),
      shadowOffset: {
        width: 0,
        height: elevation.interpolate({
          inputRange: inputRange,
          outputRange: iOSShadowOutputRanges[layer].height
        })
      },
      shadowRadius: elevation.interpolate({
        inputRange: inputRange,
        outputRange: iOSShadowOutputRanges[layer].shadowRadius
      })
    };
  }
  return {
    shadowColor: shadowColor,
    shadowOpacity: elevation ? iOSShadowOutputRanges[layer].shadowOpacity : 0,
    shadowOffset: {
      width: 0,
      height: iOSShadowOutputRanges[layer].height[elevation]
    },
    shadowRadius: iOSShadowOutputRanges[layer].shadowRadius[elevation]
  };
}
var SurfaceIOS = (0, _forwardRef.forwardRef)(function (_ref2, ref) {
  var elevation = _ref2.elevation,
    style = _ref2.style,
    backgroundColor = _ref2.backgroundColor,
    testID = _ref2.testID,
    children = _ref2.children,
    _ref2$mode = _ref2.mode,
    mode = _ref2$mode === void 0 ? 'elevated' : _ref2$mode,
    props = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
  var _React$useMemo = React.useMemo(function () {
      var flattenedStyles = _reactNative.StyleSheet.flatten(style) || {};
      var _ref6 = (0, _splitStyles.splitStyles)(flattenedStyles, function (style) {
          return outerLayerStyleProperties.includes(style) || style.startsWith('margin');
        }, function (style) {
          return style.startsWith('border') && style.endsWith('Radius');
        }),
        _ref7 = (0, _slicedToArray2.default)(_ref6, 3),
        filteredStyles = _ref7[0],
        outerLayerStyles = _ref7[1],
        borderRadiusStyles = _ref7[2];
      if ("test" !== 'production' && filteredStyles.overflow === 'hidden' && elevation !== 0) {
        console.warn('When setting overflow to hidden on Surface the shadow will not be displayed correctly. Wrap the content of your component in a separate View with the overflow style.');
      }
      var bgColor = flattenedStyles.backgroundColor || backgroundColor;
      var isElevated = mode === 'elevated';
      var outerLayerViewStyles = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, isElevated && getStyleForShadowLayer(elevation, 0)), outerLayerStyles), borderRadiusStyles), {}, {
        backgroundColor: bgColor
      });
      var innerLayerViewStyles = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, isElevated && getStyleForShadowLayer(elevation, 1)), filteredStyles), borderRadiusStyles), {}, {
        flex: flattenedStyles.height ? 1 : undefined,
        backgroundColor: bgColor
      });
      return [outerLayerViewStyles, innerLayerViewStyles];
    }, [style, elevation, backgroundColor, mode]),
    _React$useMemo2 = (0, _slicedToArray2.default)(_React$useMemo, 2),
    outerLayerViewStyles = _React$useMemo2[0],
    innerLayerViewStyles = _React$useMemo2[1];
  return React.createElement(_reactNative.Animated.View, {
    ref: ref,
    style: outerLayerViewStyles,
    testID: `${testID}-outer-layer`
  }, React.createElement(_reactNative.Animated.View, _extends({}, props, {
    style: innerLayerViewStyles,
    testID: testID
  }), children));
});
var Surface = (0, _forwardRef.forwardRef)(function (_ref3, ref) {
  var _ref3$elevation = _ref3.elevation,
    elevation = _ref3$elevation === void 0 ? 1 : _ref3$elevation,
    children = _ref3.children,
    overridenTheme = _ref3.theme,
    style = _ref3.style,
    _ref3$testID = _ref3.testID,
    testID = _ref3$testID === void 0 ? 'surface' : _ref3$testID,
    _ref3$mode = _ref3.mode,
    mode = _ref3$mode === void 0 ? 'elevated' : _ref3$mode,
    props = (0, _objectWithoutProperties2.default)(_ref3, _excluded3);
  var theme = (0, _theming.useInternalTheme)(overridenTheme);
  if (!theme.isV3) return React.createElement(MD2Surface, _extends({}, props, {
    theme: theme,
    style: style,
    ref: ref
  }), children);
  var colors = theme.colors;
  var inputRange = [0, 1, 2, 3, 4, 5];
  var backgroundColor = function (_colors$elevation2) {
    if ((0, _overlay.isAnimatedValue)(elevation)) {
      return elevation.interpolate({
        inputRange: inputRange,
        outputRange: inputRange.map(function (elevation) {
          var _colors$elevation;
          return (_colors$elevation = colors.elevation) === null || _colors$elevation === void 0 ? void 0 : _colors$elevation[`level${elevation}`];
        })
      });
    }
    return (_colors$elevation2 = colors.elevation) === null || _colors$elevation2 === void 0 ? void 0 : _colors$elevation2[`level${elevation}`];
  }();
  var isElevated = mode === 'elevated';
  if (_reactNative.Platform.OS === 'web') {
    var _props$pointerEvents = props.pointerEvents,
      pointerEvents = _props$pointerEvents === void 0 ? 'auto' : _props$pointerEvents;
    return React.createElement(_reactNative.Animated.View, _extends({}, props, {
      pointerEvents: pointerEvents,
      ref: ref,
      testID: testID,
      style: [{
        backgroundColor: backgroundColor
      }, elevation && isElevated ? (0, _shadow.default)(elevation, theme.isV3) : null, style]
    }), children);
  }
  if (_reactNative.Platform.OS === 'android') {
    var elevationLevel = [0, 3, 6, 9, 12, 15];
    var getElevationAndroid = function getElevationAndroid() {
      if ((0, _overlay.isAnimatedValue)(elevation)) {
        return elevation.interpolate({
          inputRange: inputRange,
          outputRange: elevationLevel
        });
      }
      return elevationLevel[elevation];
    };
    var _ref8 = _reactNative.StyleSheet.flatten(style) || {},
      margin = _ref8.margin,
      padding = _ref8.padding,
      transform = _ref8.transform,
      borderRadius = _ref8.borderRadius;
    var outerLayerStyles = {
      margin: margin,
      padding: padding,
      transform: transform,
      borderRadius: borderRadius
    };
    var sharedStyle = [{
      backgroundColor: backgroundColor
    }, style];
    return React.createElement(_reactNative.Animated.View, _extends({}, props, {
      testID: testID,
      ref: ref,
      style: [{
        backgroundColor: backgroundColor,
        transform: transform
      }, outerLayerStyles, sharedStyle, isElevated && {
        elevation: getElevationAndroid()
      }]
    }), children);
  }
  return React.createElement(SurfaceIOS, _extends({}, props, {
    ref: ref,
    elevation: elevation,
    backgroundColor: backgroundColor,
    style: style,
    testID: testID,
    mode: mode
  }), children);
});
var _default = Surface;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,